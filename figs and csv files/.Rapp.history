# Perform the Wilcoxon Signed-Rank Test#
fun.wilcox <- function(data, paired=True, alternative='two.sided') wilcox.test(data[data$x == 2,][order(data[data$x == 2,]$s),]$y, data[data$x == 3,][order(data[data$x == 3,]$s),]$y, paired = paired, alternative=alternative)#
#
fun.wilcox(data8)
# Perform the Wilcoxon Signed-Rank Test#
fun.wilcox <- function(data, paired=TRUE, alternative='two.sided') wilcox.test(data[data$x == 2,][order(data[data$x == 2,]$s),]$y, data[data$x == 3,][order(data[data$x == 3,]$s),]$y, paired = paired, alternative=alternative)
fun.wilcox(data8)
fun.wilcox(data8, alternative='less')
fun.wilcox(data8, paired=FALSE, alternative='less')
fun.wilcox(data9, paired=FALSE, alternative='less')
fun.wilcox(data9, paired=FALSE)
fun.wilcox(data10)#
fun.wilcox(data11)
wilcox.test(data11[data11$x == 2,][order(data11[data11$x == 2,]$s),]$y, data11[data11$x == 3,][order(data11[data11$x == 3,]$s),]$y, paired = TRUE)
wilcox.test(data11[data11$x == 2,][order(data11[data11$x == 2,]$s),]$y, data11[data11$x == 3,][order(data11[data11$x == 3,]$s),]$y, paired = FALSE)
wilcox.test(data11[data11$x == 2,][order(data11[data11$x == 2,]$s),]$y, data11[data11$x == 3,][order(data11[data11$x == 3,]$s),]$y, paired = TRUE)
data
# Perform the Wilcoxon Signed-Rank Test#
fun.wilcox2 <- function(data, paired=TRUE, alternative='two.sided') wilcox.test(data[data$x == 1,][order(data[data$x == 1,]$s),]$y, data[data$x == 2,][order(data[data$x == 2,]$s),]$y, paired = paired, alternative=alternative)
fun.wilcox2(data6)
data6
fun.wilcox2(data6, paired=FALSE)
fun.wilcox2(data7)
fun.wilcox(data8, paired=FALSE, alternative='less')#
fun.wilcox(data9, paired=FALSE, alternative='less')#
fun.wilcox(data10, paired=FALSE, alternative='less')#
fun.wilcox(data11, paired=FALSE, alternative='less')
fun.wilcox(data8, paired=FALSE, alternative='less')
fun.wilcox(data8, paired=FALSE)
fun.wilcox(data8, paired=FALSE, alternative='less')
fun.wilcox(data9, paired=FALSE, alternative='less')
fun.wilcox(data9, paired=FALSE)
fun.wilcox(data8, paired=FALSE, alternative='less')
data8
fun.wilcox(data8, paired=FALSE, alternative='less')#
fun.wilcox(data9, paired=FALSE, alternative='less')
wilcox.test.default
wilcox.test
stats::wilcox.test
stats:::wilcox.test
stats:::wilcox.test.default
# Perform the Wilcoxon Signed-Rank Test#
fun.wilcox <- function(data, paired=TRUE, alternative='two.sided', exact=NULL) wilcox.test(data[data$x == 2,][order(data[data$x == 2,]$s),]$y, data[data$x == 3,][order(data[data$x == 3,]$s),]$y, paired = paired, alternative=alternative)#
#
fun.wilcox(data8)
# Perform the Wilcoxon Signed-Rank Test#
fun.wilcox <- function(data, paired=TRUE, alternative='two.sided', exact=NULL) wilcox.test(data[data$x == 2,][order(data[data$x == 2,]$s),]$y, data[data$x == 3,][order(data[data$x == 3,]$s),]$y, paired = paired, alternative=alternative)#
#
fun.wilcox(data8, exact=TRUE)
# Perform the Wilcoxon Signed-Rank Test#
fun.wilcox <- function(data, paired=TRUE, alternative='two.sided', exact=NULL) wilcox.test(data[data$x == 2,][order(data[data$x == 2,]$s),]$y, data[data$x == 3,][order(data[data$x == 3,]$s),]$y, paired = paired, alternative=alternative)#
#
fun.wilcox(data8, exact=FALSE)
fun.wilcox(data8, paired=FALSE, alternative='less')
fun.wilcox(data8, paired=FALSE, alternative='less', exact=TRUE)
fun.wilcox(data8, paired=FALSE, alternative='less', exact=FALSE)
# Perform the Wilcoxon Signed-Rank Test#
fun.wilcox <- function(data, paired=TRUE, alternative='two.sided', exact=NULL) wilcox.test(data[data$x == 2,][order(data[data$x == 2,]$s),]$y, data[data$x == 3,][order(data[data$x == 3,]$s),]$y, paired = paired, alternative=alternative, exact=exact)#
#
fun.wilcox(data8)
# Perform the Wilcoxon Signed-Rank Test#
fun.wilcox <- function(data, paired=TRUE, alternative='two.sided', exact=NULL) wilcox.test(data[data$x == 2,][order(data[data$x == 2,]$s),]$y, data[data$x == 3,][order(data[data$x == 3,]$s),]$y, paired = paired, alternative=alternative, exact=exact)#
#
fun.wilcox(data8, exact=FALSE)
# Perform the Wilcoxon Signed-Rank Test#
fun.wilcox <- function(data, paired=TRUE, alternative='two.sided', exact=NULL) wilcox.test(data[data$x == 2,][order(data[data$x == 2,]$s),]$y, data[data$x == 3,][order(data[data$x == 3,]$s),]$y, paired = paired, alternative=alternative, exact=exact)#
#
fun.wilcox(data8, exact=TRUE)
# Perform the Wilcoxon Signed-Rank Test#
fun.wilcox <- function(data, paired=TRUE, alternative='two.sided', exact=NULL) wilcox.test(data[data$x == 2,][order(data[data$x == 2,]$s),]$y, data[data$x == 3,][order(data[data$x == 3,]$s),]$y, paired = paired, alternative=alternative, exact=exact)#
#
fun.wilcox(data8, exact=FALSE)
fun.wilcox(data8, paired=FALSE, alternative='less')
fun.wilcox(data8, paired=FALSE, alternative='less', exact=FALSE)
fun.wilcox(data9, paired=FALSE, alternative='less', exact=FALSE)
fun.wilcox(data10, paired=FALSE, alternative='less')#
fun.wilcox(data11, paired=FALSE, alternative='less')
fun.wilcox(data10)#
fun.wilcox(data11)
############################
rm( list=ls(all=TRUE ) )#
library( ANOVA.boot )#
model <- Y ~ A + B + C + A*B*C#
n.A <- 5#
n.B <- 3#
n.C <- 2#
n <- 4 	# sample size in each group#
N.var <- 3#
mu.m <- c(50, 100, 150)#
sd.m <-  c(5, 10, 15)#
set.seed(42)#
rel.A <- matrix( rep(1, n.A*N.var), ncol=n.A )#
rel.B <- matrix( rep(1, n.B*N.var), ncol=n.B )#
rel.C <- matrix( rep(1, n.C*N.var), ncol=n.C )#
# rel.A[3, 2]=1.1; rel.B[3, 3]=1.1; rel.C[3, 2]=1.1#
rel.amplitudes <- list(A=rel.A, B=rel.B, C=rel.C)#
p = 0.3#
levs <- c(A=n.A, B=n.B, C=n.C)#
groups <-  names(levs)#
n.groups <- length(groups)#
# set up nesting#
rep.each <- c(1, sapply(1:(n.groups-1), function(ii) prod( levs[1:ii] ) ) )#
rep.times <- c( sapply(2:n.groups, function(ii) prod( levs[ii:n.groups] ) ), 1)#
factors <- lapply(1:n.groups, function(ii){#
	rep( rep(seq_len(levs[ii]), each=rep.each[ii]), times = rep.times[ii] ) #
})#
names(factors) <- groups #
scales <- factors#
factors1 <- factors#
factors <- lapply(1:n.groups, function(iii) rep(factors[[iii]], each=n) )#
factors <- lapply(factors, factor)#
for(ii in (1:n.groups) ){ assign(groups[ii], factors[[ii]]) }#
scales <- lapply(1:N.var, function(i){#
	scales.tmp <- scales#
	for(ii in (1:n.groups) ) {#
		for( iii in (1:levs[ii]) ) { scales.tmp[[ii]] <- replace(scales.tmp[[ii]], scales.tmp[[ii]]==iii, rel.amplitudes[[ii]][i,iii]); scales.tmp[[ii]] }#
	}#
	scales.tmp#
})#
scales <- lapply( 1:N.var, function(iii) do.call(cbind, scales[[iii]]) )#
scales <- sapply( 1:N.var, function(iii) apply(scales[[iii]] ,1,prod) )#
g <- interaction(A,B,C)#
# scales is total no of groups ( prod(levs) ) by N.var matrix that specifies average amplitude to simulate#
N <- prod(levs)		# dim(scales)[1]#
mu.m.scales <- scales * matrix( rep(mu.m, N), byrow=TRUE, ncol=N.var )#
N <- n.A*n.B*n.C#
muij <- mu.m.scales#
sdij <- matrix( rep(sd.m, each=N), ncol=N.var)#
names(factors) <- c("A","B","C")#
# Y <- muij[rep(1:N, each=n), ]  #
TYPE = "II"#
TEST="all"#
ANOVA=TRUE#
ANOVA.effect.size="os"#
show.power=FALSE#
alpha=0.05#
ar=FALSE#
longdata <- list(#
			mu=cbind(do.call(cbind, factors1), muij), #
			sd=cbind(do.call(cbind, factors1), sdij)#
		)#
longdata <- lapply(1:length(longdata), function(iii){#
		colnames(longdata[[iii]]) <- c("A","B","C", "Y1","Y2","Y3") #
		longdata[[iii]]#
	})#
names(longdata) <- c("mu", "sd")#
rm( list = ls()[!(ls() %in% c('model','muij','sdij','factors', 'longdata', 'n','p','ar','TYPE','TEST','ANOVA','ANOVA.effect.size','show.power','alpha'))] )#
# the wrapper for this is below#
expected <- expected.MANOVA(model=model, muij=muij, sdij=sdij, factors=factors, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha)#
expected
muij
# example starts here#
rm( list=ls(all=TRUE ) )#
library( ANOVA.boot )#
n.A <- 7#
n.B <- 5#
n.C <- 2#
set.seed(42)#
N <- lapply(1:n.C, function(iii){#
		matrix( sample(4:7,n.A*n.B,replace=T),  ncol = n.B )  	# N for n.A*n.B groups#
	})#
A <- lapply(1:n.C, function(iii){#
		do.call(c, sapply(1:n.B, function(ii) rep(seq_len(n.A), N[[iii]][,ii])) )#
	})#
A <- do.call(c, A)#
A <- as.factor(A)#
B <- lapply(1:n.C, function(iii){#
		rep(seq_len(n.B), apply(N[[iii]],2,sum))#
	})#
B <- do.call(c, B)#
B <- as.factor(B)#
C <- lapply(1:n.C, function(iii){#
	rep(iii, sum(N[[iii]]))#
	})#
C <- do.call(c, C)#
C <- as.factor(C)#
m <- 4#
set.seed(42)#
mu.m <- rnorm(n=m, mean=100, sd=20)#
p=0.3#
sd.m <- rnorm(m,20,1)#
cov.mat <- cov.mat.rm(sd.m, p=p, ar=TRUE) #
cholesky <- chol(cov.mat)#
Y <- matrix( rnorm(m*length(C), mean = 0, sd = 1), ncol = m )#
Y <- t( t(cholesky) %*% t(Y) ) + matrix(rep(mu.m, each = length(C)), byrow=FALSE, ncol = m)#
manRes1 <- manova(Y ~ A*B*C)#
summary(manRes1, test="Pillai")#
#            Df   Pillai approx F num Df den Df Pr(>F)#
# A           6 0.026636  0.34636     24   1240 0.9987#
# B           4 0.033596  0.65644     16   1240 0.8382#
# C           1 0.007526  0.58198      4    307 0.6759#
# A:B        24 0.308929  1.08108     96   1240 0.2848#
# A:C         6 0.098785  1.30829     24   1240 0.1458#
# B:C         4 0.051904  1.01887     16   1240 0.4331#
# A:B:C      24 0.282356  0.98103     96   1240 0.5337#
# Residuals 310                            #
# Type II/III sum of squares#
library(car)#
fitIII <- lm(Y ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIII, type="III")#
summary(Manova.test, univariate=FALSE)#
# Type III MANOVA Tests:#
# #
# Sum of squares and products for error:#
#            [,1]      [,2]      [,3]       [,4]#
# [1,] 124395.375  48966.04  20322.15   9174.845#
# [2,]  48966.039 110837.15  59001.39  26436.030#
# [3,]  20322.145  59001.39 159331.30  65636.216#
# [4,]   9174.845  26436.03  65636.22 122627.817#
# #
# ------------------------------------------#
#  #
# Term: (Intercept) #
# #
# Sum of squares and products for the hypothesis:#
#         [,1]    [,2]    [,3]    [,4]#
# [1,] 5835590 4007364 4901976 5170189#
# [2,] 4007364 2751901 3366241 3550425#
# [3,] 4901976 3366241 4117727 4343030#
# [4,] 5170189 3550425 4343030 4580659#
# #
# Multivariate Tests: (Intercept)#
#                  Df test stat approx F num Df den Df     Pr(>F)    #
# Pillai            1   0.98791 6273.904      4    307 < 2.22e-16 ***#
# Wilks             1   0.01209 6273.904      4    307 < 2.22e-16 ***#
# Hotelling-Lawley  1  81.74468 6273.904      4    307 < 2.22e-16 ***#
# Roy               1  81.74468 6273.904      4    307 < 2.22e-16 ***#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: A #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]      [,2]     [,3]      [,4]#
# [1,] 1263.0952  836.8615  827.166  772.7159#
# [2,]  836.8615 1361.4855 1133.547  938.2805#
# [3,]  827.1660 1133.5467 1338.470 1037.5614#
# [4,]  772.7159  938.2805 1037.561 1379.2690#
# #
# Multivariate Tests: A#
#                  Df test stat  approx F num Df   den Df  Pr(>F)#
# Pillai            6 0.0315659 0.4109690     24 1240.000 0.99490#
# Wilks             6 0.9687420 0.4085394     24 1072.205 0.99510#
# Hotelling-Lawley  6 0.0319499 0.4066954     24 1222.000 0.99529#
# Roy               6 0.0176754 0.9132276      6  310.000 0.48552#
# #
# ------------------------------------------#
#  #
# Term: B #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]      [,2]       [,3]       [,4]#
# [1,] 1143.2470  600.1166 -499.83313 -192.57841#
# [2,]  600.1166 1909.9466  653.46008 -358.39974#
# [3,] -499.8331  653.4601  798.65657  -90.86706#
# [4,] -192.5784 -358.3997  -90.86706  322.96264#
# #
# Multivariate Tests: B#
#                  Df test stat  approx F num Df    den Df  Pr(>F)#
# Pillai            4 0.0365398 0.7144846     16 1240.0000 0.78132#
# Wilks             4 0.9638229 0.7117807     16  938.5381 0.78388#
# Hotelling-Lawley  4 0.0371596 0.7095158     16 1222.0000 0.78645#
# Roy               4 0.0212065 1.6435013      4  310.0000 0.16315#
# #
# ------------------------------------------#
#  #
# Term: C #
# #
# Sum of squares and products for the hypothesis:#
#            [,1]      [,2]      [,3]       [,4]#
# [1,]  225.92548 -99.20121  96.67981 -207.94045#
# [2,]  -99.20121  43.55808 -42.45097   91.30420#
# [3,]   96.67981 -42.45097  41.37199  -88.98352#
# [4,] -207.94045  91.30420 -88.98352  191.38713#
# #
# Multivariate Tests: C#
#                  Df test stat  approx F num Df den Df  Pr(>F)#
# Pillai            1 0.0071736 0.5545519      4    307 0.69584#
# Wilks             1 0.9928264 0.5545519      4    307 0.69584#
# Hotelling-Lawley  1 0.0072254 0.5545519      4    307 0.69584#
# Roy               1 0.0072254 0.5545519      4    307 0.69584#
# #
# ------------------------------------------#
#  #
# Term: A:B #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]      [,2]      [,3]     [,4]#
# [1,] 11437.732  6877.305  4254.569 4219.432#
# [2,]  6877.305 12560.970  7233.591 4448.628#
# [3,]  4254.569  7233.591 14213.952 7174.512#
# [4,]  4219.432  4448.628  7174.512 8913.720#
# #
# Multivariate Tests: A:B#
#                  Df test stat approx F num Df   den Df   Pr(>F)  #
# Pillai           24 0.2981634 1.040369     96 1240.000 0.378957  #
# Wilks            24 0.7325609 1.037500     96 1218.694 0.386157  #
# Hotelling-Lawley 24 0.3250992 1.034560     96 1222.000 0.393470  #
# Roy              24 0.1234838 1.594999     24  310.000 0.040323 *#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: A:C #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]     [,2]     [,3]      [,4]#
# [1,] 2539.4311 2763.629  756.759  132.8004#
# [2,] 2763.6286 5370.723 1769.431 -719.1470#
# [3,]  756.7590 1769.431 2000.361 1476.4236#
# [4,]  132.8004 -719.147 1476.424 3334.1801#
# #
# Multivariate Tests: A:C#
#                  Df test stat approx F num Df   den Df    Pr(>F)   #
# Pillai            6 0.0947115 1.253026     24 1240.000 0.1855365   #
# Wilks             6 0.9077732 1.256473     24 1072.205 0.1833348   #
# Hotelling-Lawley  6 0.0988827 1.258695     24 1222.000 0.1811677   #
# Roy               6 0.0605502 3.128426      6  310.000 0.0054343 **#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: B:C #
# #
# Sum of squares and products for the hypothesis:#
#            [,1]       [,2]      [,3]      [,4]#
# [1,]  398.31372   10.30311 -307.0137 -659.1746#
# [2,]   10.30311  280.70782 -230.5529 -222.1600#
# [3,] -307.01375 -230.55287 2839.0028  375.8311#
# [4,] -659.17457 -222.15995  375.8311 1686.1707#
# #
# Multivariate Tests: B:C#
#                  Df test stat  approx F num Df    den Df   Pr(>F)  #
# Pillai            4 0.0497475 0.9759965     16 1240.0000 0.480792  #
# Wilks             4 0.9509327 0.9740160     16  938.5381 0.483265  #
# Hotelling-Lawley  4 0.0508862 0.9716077     16 1222.0000 0.485789  #
# Roy               4 0.0293228 2.2725148      4  310.0000 0.061397 .#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: A:B:C #
# #
# Sum of squares and products for the hypothesis:#
#          [,1]      [,2]     [,3]     [,4]#
# [1,] 8384.878  3737.071 1225.276 1088.927#
# [2,] 3737.071 10863.782 4190.858 2090.329#
# [3,] 1225.276  4190.858 8573.560 2080.437#
# [4,] 1088.927  2090.329 2080.437 8037.573#
# #
# Multivariate Tests: A:B:C#
#                  Df test stat  approx F num Df   den Df  Pr(>F)#
# Pillai           24 0.2823563 0.9810253     96 1240.000 0.53372#
# Wilks            24 0.7455292 0.9768058     96 1218.694 0.54506#
# Hotelling-Lawley 24 0.3056174 0.9725638     96 1222.000 0.55645#
# Roy              24 0.1059790 1.3688958     24  310.000 0.11930#
Manova.CAR <- summary(Manova.test, univariate=TRUE)#
Manova.CAR$univariate.tests#
"univariate.tests"#
Manova.test <- Anova(fitIII, type="II")#
Manova1 <- summary(Manova.test,univariate=TRUE)#
# summary(Manova.test, univariate=TRUE)#
Manova1#
####################################################################################################
####################################################################################################
# model <- Y ~ A + B + C + A*B*C#
# Manova2 <- MANOVA.f(Y, A=A, B=B, C=C, model, TYPE = "II", TEST="Wilks", ANOVA=TRUE, ANOVA.effect.size="all", show.power=FALSE, alpha=0.05)#
longdata <- cbind(A=A, B=B, C=C, Y)#
colnames(longdata)[4:7] = c("Y1","Y2","Y3","Y4")#
formula <- Y ~ A + B + C + A*B*C#
colnames(longdata)[4:7] = c("Y1","Y2","Y3","Y4")#
Manova2 <- MANOVA(formula, longdata, ANOVA.effect.size = "all")#
Manova2$univariate$`sum of squares`#
#        df          Y1           Y2           Y3          Y4#
# A       6    933.7091   1155.41702   1173.61195   1085.7261#
# B       4   1046.4472   1894.39016    964.53340    213.5417#
# C       1    153.3926     61.58029     38.23215    244.0636#
# A:B    24  10355.3436  12937.57388  14086.53354   8866.0929#
# A:C     6   2812.0570   5425.46916   1864.55069   3368.1547#
# B:C     4    514.9968    310.34917   3253.61159   1642.7279#
# A:B:C  24   8384.8777  10863.78180   8573.55970   8037.5727#
# error 310 124395.3754 110837.15424 159331.30254 122627.8166#
longdata1 <- longdata#
colnames(longdata1)[1:3] <- c("behaviour","drug","genotype")#
colnames(longdata)[4:7] = c("Y1","Y2","Y3","Y4")#
formula <- Y ~ behaviour + drug + genotype + behaviour*drug*genotype#
Manova2a <- MANOVA(formula, longdata1)#
Manova2a$univariate$`sum of squares`#
longdata2b <- longdata1[,-c(1,2)]#
formula <- Y ~ genotype#
Manova2b <- MANOVA(formula, longdata2b)#
Manova2b$univariate$`sum of squares`#
library(car)#
fit2b<- lm(Y ~ C, contrasts=list(C=contr.sum))#
Manova.test <- Anova(fit2b, type="II")#
summary(Manova.test, univariate=TRUE)#
library(car)#
fitIII <- lm(Y ~ A+B+C + A*B, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIII, type="II")#
summary(Manova.test, univariate=TRUE)#
formula <- Y ~ A + B + C + A*B#
MANOVA(formula, longdata)#
#MANOVA effect sizes#
Manova2$multivariate$Wilks[,"es"]#
#           A           B           C         A:B         A:C         B:C       A:B:C #
# 0.006321495 0.008794802 0.007291175 0.074680195 0.024557383 0.013033389 0.070785112 #
Manova2$multivariate$effect.sizes#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
# #
# Manova2$multivariate$Wilks is uncorrected Serlin adjusted value#
# if want adjusted then look at Manova2$multivariate$effect.sizes[,"m.es.W.adj"]#
# s <- min(p, q); b <- max(p, q); Serlin.adj <- (N - 1)/(N - b - 1)#
###here#
formula <- Y ~ A + B + C + A*B*C#
Manova2.pb <- pbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
Manova2.pb$univariate$`effect size`[1,]$os#
# $theta.hat#
#                 Y1           Y2           Y3            Y4#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# #
# $bias#
#                Y1          Y2          Y3          Y4#
# A     0.014772482 0.013342034 0.014824378 0.015067111#
# B     0.009961165 0.008050724 0.009890840 0.010353595#
# C     0.002421019 0.002567925 0.002638935 0.002388236#
# A:B   0.056212677 0.045746691 0.053022062 0.055911715#
# A:C   0.012731700 0.009988656 0.014456416 0.013264747#
# B:C   0.010587970 0.009798597 0.007542787 0.009288149#
# A:B:C 0.057281073 0.048840608 0.056172695 0.058488772#
# #
# $se#
#                Y1          Y2          Y3          Y4#
# A     0.010513217 0.010743731 0.010757265 0.011112646#
# B     0.009637489 0.011124648 0.009180885 0.007369940#
# C     0.003963100 0.003415133 0.003475131 0.004810767#
# A:B   0.030098152 0.028058980 0.029255532 0.026209907#
# A:C   0.014525642 0.017676126 0.011776628 0.015121872#
# B:C   0.008776768 0.007361134 0.012778618 0.011673016#
# A:B:C 0.028325518 0.026322791 0.025015462 0.028084117#
# #
# $ci.lower#
#                 Y1           Y2           Y3          Y4#
# A     -0.024696372 -0.022652481 -0.025044769 -0.02483533#
# B     -0.016994122 -0.012701506 -0.017794683 -0.01851385#
# C     -0.004818983 -0.004803210 -0.005036759 -0.00473971#
# A:B   -0.050630879 -0.020748916 -0.042800196 -0.05018757#
# A:C   -0.018115924 -0.005741267 -0.022969925 -0.01656434#
# B:C   -0.018519275 -0.017098843 -0.013128393 -0.01599380#
# A:B:C -0.056155219 -0.030271445 -0.064343787 -0.05897510#
# #
# $ci.upper#
#                Y1          Y2          Y3         Y4#
# A     0.013339990 0.019495642 0.016886659 0.01582727#
# B     0.017768444 0.028120516 0.017824680 0.00932972#
# C     0.009180808 0.007472613 0.007192856 0.01060378#
# A:B   0.067717057 0.089475243 0.067995770 0.05160527#
# A:C   0.035648844 0.064471943 0.020926782 0.04190924#
# B:C   0.015859537 0.011089414 0.037268291 0.02875325#
# A:B:C 0.052278417 0.067811424 0.034426745 0.05062527#
# no effect sizes#
# Manova2.pb$multivariate$permutations[1,]#
# MANOVA effect sizes  bootstrapshould match original MANOVA#
Manova2.pb$multivariate$`effect size`[1,]$`effect size`#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
Manova2$multivariate$effect.sizes#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
ptm <- proc.time()#
Manova2.nb <- nbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
proc.time() - ptm#
Manova2.nb$univariate$`effect size`[1,]$os#
# $theta.hat#
#                 Y1           Y2           Y3            Y4#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# #
# $os$bias#
#               Y1          Y2          Y3         Y4#
# A     0.01523289 0.013705943 0.017656208 0.01741846#
# B     0.01035114 0.008035487 0.010197354 0.01114398#
# C     0.00308148 0.002315069 0.002450947 0.00321472#
# A:B   0.06334511 0.063054040 0.065548500 0.06707082#
# A:C   0.01548741 0.017555537 0.016684918 0.01687540#
# B:C   0.01064833 0.012759570 0.014202708 0.01339203#
# A:B:C 0.06430303 0.059429123 0.062047813 0.06520411#
# #
# $os$se#
#                Y1          Y2          Y3          Y4#
# A     0.011280071 0.012547464 0.012817480 0.013948874#
# B     0.011159835 0.012928146 0.010111572 0.008776835#
# C     0.005482621 0.004019749 0.003573847 0.006078847#
# A:B   0.032706781 0.031099554 0.029921892 0.028819966#
# A:C   0.015654530 0.020349679 0.013943306 0.016488256#
# B:C   0.009641517 0.010067734 0.016533855 0.013823896#
# A:B:C 0.026921887 0.026545009 0.024761527 0.026738494#
# #
# $os$ci.lower#
#                 Y1           Y2          Y3           Y4#
# A     -0.026806541 -0.025292185 -0.02887922 -0.028608813#
# B     -0.018745710 -0.014418875 -0.01911224 -0.020145451#
# C     -0.005778235 -0.005021451 -0.00516426 -0.005876048#
# A:B   -0.053643129 -0.026481010 -0.04398363 -0.052203756#
# A:C   -0.023051018 -0.011406703 -0.02689824 -0.019702258#
# B:C   -0.019372671 -0.021254314 -0.01897810 -0.019448229#
# A:B:C -0.056794241 -0.032271489 -0.06394902 -0.058777981#
# #
# $os$ci.upper#
#               Y1          Y2          Y3         Y4#
# A     0.01728361 0.023406280 0.021511086 0.02516584#
# B     0.02508243 0.033205742 0.019901057 0.01304749#
# C     0.01532233 0.009833557 0.007841911 0.01571607#
# A:B   0.07087834 0.092985379 0.073430965 0.05852476#
# A:C   0.03619728 0.068525130 0.025736751 0.04444319#
# B:C   0.01745616 0.017493364 0.046293234 0.03316605#
# A:B:C 0.04937453 0.068219046 0.034699641 0.04906812#
# MANOVA effect sizes for non parametric bootstrap should match original MANOVA#
Manova2.nb$multivariate$`effect size`[1,]$`effect size`#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
Manova2$multivariate$effect.sizes#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
# change names#
colnames(longdata)[1:3] <- c("behaviour", "drug", "genotype")  #
formula <- Y ~ behaviour + drug + genotype + behaviour*drug*genotype#
ptm <- proc.time()#
Manova3.pb <- pbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
proc.time() - ptm#
Manova2.pb$multivariate$`effect size`[1,]#
# $`effect size`#
#                              m.es.W   m.es.W.adj        m.os     m.os.adj#
# behaviour               0.006321495 -0.009662609 0.009339923 -0.035848080#
# drug                    0.008794802 -0.001778053 0.024358789 -0.003027631#
# genotype                0.007291175 -0.003297719 0.004652742 -0.010190156#
# behaviour:drug          0.074680195  0.012123363 0.216882839 -0.189788529#
# behaviour:genotype      0.024557383  0.008866617 0.079913105  0.037944229#
# drug:genotype           0.013033389  0.002505746 0.040898330  0.013976178#
# behaviour:drug:genotype 0.070785112  0.007964950 0.203641199 -0.209906529#
# #
# $bias#
#                             m.es.W m.es.W.adj       m.os   m.os.adj#
# behaviour               0.01855975 0.01885829 0.07147885 0.07473929#
# drug                    0.01264616 0.01278105 0.04846200 0.04982234#
# genotype                0.01288362 0.01302104 0.01288491 0.01307706#
# behaviour:drug          0.06299905 0.06725814 0.19085413 0.28996435#
# behaviour:genotype      0.01855467 0.01885314 0.06736398 0.07043673#
# drug:genotype           0.01266839 0.01280352 0.04780337 0.04914522#
# behaviour:drug:genotype 0.06305946 0.06732264 0.19338485 0.29380927#
# #
# $se#
#                              m.es.W  m.es.W.adj       m.os   m.os.adj#
# behaviour               0.007391676 0.007510577 0.02760328 0.02886237#
# drug                    0.006790988 0.006863426 0.02550344 0.02621932#
# genotype                0.013092887 0.013232545 0.01309469 0.01328996#
# behaviour:drug          0.016652622 0.017778433 0.04518877 0.06865521#
# behaviour:genotype      0.009686318 0.009842130 0.03426936 0.03583252#
# drug:genotype           0.008215331 0.008302962 0.03046648 0.03132168#
# behaviour:drug:genotype 0.017460286 0.018640699 0.04825305 0.07331077#
# #
# $ci.lower#
#                                m.es.W  m.es.W.adj         m.os    m.os.adj#
# behaviour               -0.0061966183 -0.02238209 -0.038325396 -0.08568761#
# drug                    -0.0026439821 -0.01333885 -0.019370453 -0.04798436#
# genotype                -0.0097900849 -0.02056118 -0.012429900 -0.02752754#
# behaviour:drug           0.0445032549 -0.02009371  0.131179364 -0.31999767#
# behaviour:genotype       0.0081987082 -0.00775520  0.020786843 -0.02387902#
# drug:genotype           -0.0003587838 -0.01102928 -0.009714395 -0.03805726#
# behaviour:drug:genotype  0.0375649177 -0.02750112  0.107546142 -0.35590358#
# #
# $ci.upper#
#                             m.es.W  m.es.W.adj       m.os    m.os.adj#
# behaviour               0.02223283 0.006504676 0.06804201  0.02553165#
# drug                    0.02481898 0.014417053 0.08372657  0.05800662#
# genotype                0.03829755 0.028039392 0.03566429  0.02128384#
# behaviour:drug          0.11057988 0.050450073 0.31050160 -0.04755370#
# behaviour:genotype      0.04432598 0.028953209 0.14856145  0.10972390#
# drug:genotype           0.03087657 0.020539256 0.10605600  0.08096284#
# behaviour:drug:genotype 0.10643812 0.046028299 0.29806086 -0.06645491#
Manova3.pb$multivariate$`effect size`[1,]#
# $`effect size`#
#                              m.es.W   m.es.W.adj        m.os     m.os.adj#
# behaviour               0.006321495 -0.009662609 0.009339923 -0.035848080#
# drug                    0.008794802 -0.001778053 0.024358789 -0.003027631#
# genotype                0.007291175 -0.003297719 0.004652742 -0.010190156#
# behaviour:drug          0.074680195  0.012123363 0.216882839 -0.189788529#
# behaviour:genotype      0.024557383  0.008866617 0.079913105  0.037944229#
# drug:genotype           0.013033389  0.002505746 0.040898330  0.013976178#
# behaviour:drug:genotype 0.070785112  0.007964950 0.203641199 -0.209906529#
# #
# $bias#
#                             m.es.W m.es.W.adj       m.os   m.os.adj#
# behaviour               0.01855975 0.01885829 0.07147885 0.07473929#
# drug                    0.01264616 0.01278105 0.04846200 0.04982234#
# genotype                0.01288362 0.01302104 0.01288491 0.01307706#
# behaviour:drug          0.06299905 0.06725814 0.19085413 0.28996435#
# behaviour:genotype      0.01855467 0.01885314 0.06736398 0.07043673#
# drug:genotype           0.01266839 0.01280352 0.04780337 0.04914522#
# behaviour:drug:genotype 0.06305946 0.06732264 0.19338485 0.29380927#
# #
# $se#
#                              m.es.W  m.es.W.adj       m.os   m.os.adj#
# behaviour               0.007391676 0.007510577 0.02760328 0.02886237#
# drug                    0.006790988 0.006863426 0.02550344 0.02621932#
# genotype                0.013092887 0.013232545 0.01309469 0.01328996#
# behaviour:drug          0.016652622 0.017778433 0.04518877 0.06865521#
# behaviour:genotype      0.009686318 0.009842130 0.03426936 0.03583252#
# drug:genotype           0.008215331 0.008302962 0.03046648 0.03132168#
# behaviour:drug:genotype 0.017460286 0.018640699 0.04825305 0.07331077#
# #
# $ci.lower#
#                                m.es.W  m.es.W.adj         m.os    m.os.adj#
# behaviour               -0.0061966183 -0.02238209 -0.038325396 -0.08568761#
# drug                    -0.0026439821 -0.01333885 -0.019370453 -0.04798436#
# genotype                -0.0097900849 -0.02056118 -0.012429900 -0.02752754#
# behaviour:drug           0.0445032549 -0.02009371  0.131179364 -0.31999767#
# behaviour:genotype       0.0081987082 -0.00775520  0.020786843 -0.02387902#
# drug:genotype           -0.0003587838 -0.01102928 -0.009714395 -0.03805726#
# behaviour:drug:genotype  0.0375649177 -0.02750112  0.107546142 -0.35590358#
# #
# $ci.upper#
#                             m.es.W  m.es.W.adj       m.os    m.os.adj#
# behaviour               0.02223283 0.006504676 0.06804201  0.02553165#
# drug                    0.02481898 0.014417053 0.08372657  0.05800662#
# genotype                0.03829755 0.028039392 0.03566429  0.02128384#
# behaviour:drug          0.11057988 0.050450073 0.31050160 -0.04755370#
# behaviour:genotype      0.04432598 0.028953209 0.14856145  0.10972390#
# drug:genotype           0.03087657 0.020539256 0.10605600  0.08096284#
# behaviour:drug:genotype 0.10643812 0.046028299 0.29806086 -0.06645491#
ptm <- proc.time()#
Manova3.nb <- nbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
proc.time() - ptm#
Manova3.nb$univariate$`effect size`[1,]$os$theta.hat#
#                                   Y1           Y2           Y3            Y4#
# behaviour               -0.009892405 -0.006881247 -0.010064481 -0.0087910552#
# drug                    -0.003749422  0.003227373 -0.005750012 -0.0093441813#
# genotype                -0.001663671 -0.002057491 -0.002506532 -0.0010343026#
# behaviour:drug           0.004864068  0.030287309  0.009226276 -0.0042855153#
# behaviour:genotype       0.002714171  0.022804152 -0.006424137  0.0067907933#
# drug:genotype           -0.007316264 -0.007784891  0.006310624  0.0004126559#
# behaviour:drug:genotype -0.008360759  0.015870492 -0.019819763 -0.0099409477#
# check calculates df correctly #
# when weird (indirect)#
colnames(longdata)[1:3] <- c("A", "B", "C")  #
formula <- Y ~ A + C + A*B + B*C#
Manova4b <- MANOVA(formula, longdata, ANOVA.effect.size="pes")	# default current os#
fitIIb <- lm(Y ~ A + C + A*B + B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIIb, type="II")#
summary(Manova.test, univariate=TRUE)#
# pes <- F/(F + dfe/df)#
n.terms <- dim(Manova4b$univariate$`sum of squares`)[1]-1#
df <- Manova4b$univariate$`sum of squares`[1:n.terms,"df"]#
dfe <- Manova4b$univariate$`sum of squares`[n.terms+1,"df"]#
SS <- Manova4b$univariate$`sum of squares`[1:n.terms,"Y1"]#
SSe <- Manova4b$univariate$`sum of squares`[n.terms+1,"Y1"]#
F <- (SS/df) / (SSe/dfe)#
F#
#         A         C         B       A:B       C:B #
# 0.3902152 0.3846345 0.6256947 1.0709598 0.3677693#
Manova4b$univariate$F#
#            Y1        Y2         Y3        Y4#
# A   0.3902152 0.5150278 0.39173533 0.4590230#
# C   0.3846345 0.1646967 0.07656816 0.6191110#
# B   0.6256947 1.0927746 0.44354782 0.1787889#
# A:B 1.0709598 1.5086530 1.18973951 0.9585751#
# C:B 0.3677693 0.2887029 1.69602197 1.0032087#
F/(F + dfe/df)#
#           A           C           B         A:B         C:B #
# 0.006839056 0.001130000 0.007307324 0.070283901 0.004308058#
Manova4b$univariate$pes[,"Y1"]#
#           A           C           B         A:B         C:B #
# 0.006839056 0.001130000 0.007307324 0.070283901 0.004308058 #
# calculate pes by bootstrap (nb pes is test pes; bootstrap used to calculate se and ci#
Manova5b.pb <- pbMANOVA(formula, longdata, H0=FALSE, ANOVA.effect.size = "pes", Nreps=1e3)#
Manova5b.nb <- nbMANOVA(formula, longdata, H0=FALSE, ANOVA.effect.size = "pes", Nreps=1e3)#
Manova5b.pb$univariate$`effect size`[1,]$pes$theta.hat#
#              Y1           Y2           Y3          Y4#
# A   0.006839056 0.0090068647 0.0068655153 0.008035316#
# C   0.001130000 0.0004841675 0.0002251498 0.001817605#
# B   0.007307324 0.0126929884 0.0051911212 0.002098984#
# A:B 0.070283901 0.0962438421 0.0774751267 0.063375851#
# C:B 0.004308058 0.0033850071 0.0195628580 0.011664782#
Manova5b.nb$univariate$`effect size`[1,]$pes$theta.hat#
#              Y1           Y2           Y3          Y4#
# A   0.006839056 0.0090068647 0.0068655153 0.008035316#
# C   0.001130000 0.0004841675 0.0002251498 0.001817605#
# B   0.007307324 0.0126929884 0.0051911212 0.002098984#
# A:B 0.070283901 0.0962438421 0.0774751267 0.063375851#
# C:B 0.004308058 0.0033850071 0.0195628580 0.011664782#
Manova4b$univariate$pes#
#              Y1           Y2           Y3          Y4#
# A   0.006839056 0.0090068419 0.0068654180 0.008035246#
# C   0.001130000 0.0004841883 0.0002251525 0.001817634#
# B   0.007307324 0.0126930093 0.0051911482 0.002099032#
# A:B 0.070283901 0.0962438150 0.0774748183 0.063375355#
# C:B 0.004308058 0.0033850273 0.0195630311 0.011664875#
# if pes is right then must be calculating dfe correctly#
# model <- Y ~ A + B + C + A*B*C#
# Manova3 <- MANOVA.f(Y, A=A, B=B, C=C, model, TYPE = "III", TEST="all", ANOVA=TRUE, ANOVA.effect.size="all", show.power=TRUE, alpha=0.05)#
formula <- Y ~ A + B + C + A*B*C#
Manova3 <- MANOVA(formula, longdata, TYPE="III", TEST="all")#
Manova3$multivariate$tests$Pillai#
#         test.stat         F df  dfe         p          es#
# A     0.031565874 0.4109690 24 1240 0.9949033 0.007891469#
# B     0.036539759 0.7144846 16 1240 0.7813194 0.009134940#
# C     0.007173599 0.5545519  4  307 0.6958421 0.007173599#
# A:B   0.298163370 1.0403692 96 1240 0.3789574 0.074540842#
# A:C   0.094711517 1.2530261 24 1240 0.1855365 0.023677879#
# B:C   0.049747518 0.9759965 16 1240 0.4807921 0.012436879#
# A:B:C 0.282356334 0.9810253 96 1240 0.5337190 0.070589084#
Manova3$multivariate$tests$Wilks#
#       test.stat         F df       dfe         p          es#
# A     0.9687420 0.4085394 24 1072.2051 0.9950992 0.007907794#
# B     0.9638229 0.7117807 16  938.5381 0.7838786 0.009169637#
# C     0.9928264 0.5545519  4  307.0000 0.6958421 0.007173599#
# A:B   0.7325609 1.0374998 96 1218.6942 0.3861568 0.074852613#
# A:C   0.9077732 1.2564732 24 1072.2051 0.1833348 0.023899932#
# B:C   0.9509327 0.9740160 16  938.5381 0.4832653 0.012499227#
# A:B:C 0.7455292 0.9768058 96 1218.6942 0.5450587 0.070785112#
Manova3$multivariate$tests$Hotelling#
#         test.stat         F df  dfe         p          es#
# A     0.031949883 0.4066954 24 1222 0.9952893 0.007924177#
# B     0.037159584 0.7095158 16 1222 0.7864510 0.009204388#
# C     0.007225432 0.5545519  4  307 0.6958421 0.007173599#
# A:B   0.325099221 1.0345605 96 1222 0.3934697 0.075165725#
# A:C   0.098882728 1.2586947 24 1222 0.1811677 0.024124312#
# B:C   0.050886164 0.9716077 16 1222 0.4857890 0.012561736#
# A:B:C 0.305617414 0.9725638 96 1222 0.5564549 0.070981089#
# export data for SPSS#
# data2 <- cbind(A=A, B=B, C=C, Y);#
# write.table(data2, file = "data2.csv",  sep = ",", row.names=FALSE)#
# Multivariate Testsa						#
# 		Effect			Value		F		Hypothesis df	Error df	Sig.#
# Intercept	Pillai's Trace		.988		6273.904b	4.000			307.000	.000#
# 		Wilks' Lambda		.012		6273.904b	4.000			307.000	.000#
# 		Hotelling's Trace		81.745	6273.904b	4.000			307.000	.000#
# 		Roy's Largest Root	81.745	6273.904b	4.000			307.000	.000#
# A		Pillai's Trace		.032		.411		24.000		1240.000	.995#
# 		Wilks' Lambda		.969		.409		24.000		1072.205	.995#
# 		Hotelling's Trace		.032		.407		24.000		1222.000	.995#
# 		Roy's Largest Root	.018		.913c		6.000			310.000	.486#
# B		Pillai's Trace		.037		.714		16.000		1240.000	.781#
# 		Wilks' Lambda		.964		.712		16.000		938.538	.784#
# 		Hotelling's Trace		.037		.710		16.000		1222.000	.786#
# 		Roy's Largest Root	.021		1.644c	4.000			310.000	.163#
# C		Pillai's Trace		.007		.555b		4.000			307.000	.696#
# 		Wilks' Lambda		.993		.555b		4.000			307.000	.696#
# 		Hotelling's Trace		.007		.555b		4.000			307.000	.696#
# 		Roy's Largest Root	.007		.555b		4.000			307.000	.696#
# A * B	Pillai's Trace		.298		1.040		96.000		1240.000	.379#
# 		Wilks' Lambda		.733		1.037		96.000		1218.694	.386#
# 		Hotelling's Trace		.325		1.035		96.000		1222.000	.393#
# 		Roy's Largest Root	.123		1.595c	24.000		310.000	.040#
# A * C	Pillai's Trace		.095		1.253		24.000		1240.000	.186#
# 		Wilks' Lambda		.908		1.256		24.000		1072.205	.183#
# 		Hotelling's Trace		.099		1.259		24.000		1222.000	.181#
# 		Roy's Largest Root	.061		3.128c	6.000			310.000	.005#
# B * C	Pillai's Trace		.050		.976		16.000		1240.000	.481#
# 		Wilks' Lambda		.951		.974		16.000		938.538	.483#
# 		Hotelling's Trace		.051		.972		16.000		1222.000	.486#
# 		Roy's Largest Root	.029		2.273c	4.000			310.000	.061#
# A * B * C	Pillai's Trace		.282		.981		96.000		1240.000	.534#
# 		Wilks' Lambda		.746		.977		96.000		1218.694	.545#
# 		Hotelling's Trace		.306		.973		96.000		1222.000	.556#
# 		Roy's Largest Root	.106		1.369c	24.000		310.000	.119#
# a Design: Intercept + A + B + C + A * B + A * C + B * C + A * B * C						#
# b Exact statistic						#
# c The statistic is an upper bound on F that yields a lower bound on the significance level.						#
# model <- Y ~ A; MANOVA.f(Y, model, TYPE = "II", TEST="Wilks", ANOVA=TRUE, ANOVA.effect.size="os", show.power=FALSE, alpha=0.05)#
N.tests <- length(Manova2$univariate$F[,1])#
effect.size.types <- c("es","pes","eps","peps","os","pos", "cf", "cf.pop")#
N.eff <- length( effect.size.types )#
N <- dim(Y)[1]#
df <- Manova2$univariate$`sum of squares`[1:N.tests,1]#
dfe <- Manova2$univariate$`sum of squares`[N.tests+1,1]	#
eff.sizes <- lapply(1:N.eff, function(iii){#
	effect.size.type <- effect.size.types[iii]#
	sapply(1:m, function(ii){#
		F <- Manova2$univariate$F[,ii]#
		SS <- Manova2$univariate$`sum of squares`[1:N.tests,ii+1]#
		SSe <- Manova2$univariate$`sum of squares`[N.tests+1,ii+1]#
		effect.size.calculator(F, df, dfe, N=N, effect.size.type=effect.size.type)#
	})#
})#
names(eff.sizes) <- effect.size.types#
eff.sizes#
# $es#
#              [,1]         [,2]         [,3]        [,4]#
# A     0.006283533 0.0080524881 0.0062002068 0.007432117#
# B     0.007042220 0.0132026394 0.0050956422 0.001461756#
# C     0.001032278 0.0004291737 0.0002019809 0.001670688#
# A:B   0.069687809 0.0901662846 0.0744193355 0.060691041#
# A:C   0.018924152 0.0378119113 0.0098504450 0.023056019#
# B:C   0.003465747 0.0021629273 0.0171888713 0.011244960#
# A:B:C 0.056427269 0.0757133332 0.0452942247 0.055019573#
# $pes#
#              [,1]        [,2]         [,3]        [,4]#
# A     0.007450059 0.010316908 0.0073120001 0.008776129#
# B     0.008342092 0.016804437 0.0060172081 0.001738354#
# C     0.001231587 0.000555284 0.0002398962 0.001986326#
# A:B   0.076848151 0.104525165 0.0812288624 0.067425883#
# A:C   0.022106075 0.046665635 0.0115669892 0.026732241#
# B:C   0.004122931 0.002792228 0.0200117681 0.013218964#
# A:B:C 0.063148530 0.089266214 0.0510620096 0.061512637#
# $eps#
#               [,1]         [,2]         [,3]         [,4]#
# A     -0.009919119 -0.006898375 -0.010091715 -0.008814796#
# B     -0.003759547  0.003235398 -0.005765639 -0.009369519#
# C     -0.001668164 -0.002062637 -0.002513339 -0.001037131#
# A:B    0.004877204  0.030362834  0.009251648 -0.004296612#
# A:C    0.002721500  0.022861049 -0.006441477  0.006809106#
# B:C   -0.007336021 -0.007804315  0.006327590  0.000413685#
# A:B:C -0.008383337  0.015909882 -0.019873463 -0.009968079#
# $peps#
#               [,1]         [,2]         [,3]          [,4]#
# A     -0.011760585 -0.008838249 -0.011901316 -0.0104088488#
# B     -0.004453494  0.004118043 -0.006808376 -0.0111424419#
# C     -0.001990247 -0.002668731 -0.002985136 -0.0012330727#
# A:B    0.005378331  0.035198081  0.010098194 -0.0047734037#
# A:C    0.003179096  0.028214002 -0.007563972  0.0078948004#
# B:C   -0.008727096 -0.010074969  0.007366759  0.0004863057#
# A:B:C -0.009381907  0.018757792 -0.022404157 -0.0111444489#
# $os#
#               [,1]         [,2]         [,3]          [,4]#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# $pos#
#               [,1]         [,2]         [,3]         [,4]#
# A     -0.009760522 -0.007338778 -0.009877086 -0.008640632#
# B     -0.003677148  0.003405239 -0.005619224 -0.009189392#
# C     -0.001628272 -0.002183088 -0.002441775 -0.001008947#
# A:B    0.004730349  0.031069643  0.008886644 -0.004193148#
# A:C    0.002645085  0.023574191 -0.006282037  0.006573891#
# B:C   -0.007200423 -0.008310564  0.006095068  0.000401876#
# A:B:C -0.008236848  0.016524634 -0.019638813 -0.009782187#
# $cf#
#             [,1]       [,2]       [,3]       [,4]#
# A     0.08663705 0.10210022 0.08582458 0.09409480#
# B     0.09171841 0.13073505 0.07780510 0.04172985#
# C     0.03511560 0.02357101 0.01549044 0.04461255#
# A:B   0.28852280 0.34165182 0.29733875 0.26888814#
# A:C   0.15035225 0.22124627 0.10817740 0.16573015#
# B:C   0.06434283 0.05291546 0.14290002 0.11574129#
# A:B:C 0.25962484 0.31307460 0.23196905 0.25601650#
# $cf.pop#
#             [,1]       [,2]       [,3]       [,4]#
# A     0.00000000 0.00000000 0.00000000 0.00000000#
# B     0.00000000 0.05845404 0.00000000 0.00000000#
# C     0.00000000 0.00000000 0.00000000 0.00000000#
# A:B   0.06894078 0.17906959 0.09469068 0.00000000#
# A:C   0.05149855 0.15538131 0.00000000 0.08134736#
# B:C   0.00000000 0.00000000 0.07830993 0.02005087#
# A:B:C 0.00000000 0.12962363 0.00000000 0.00000000#
Manova2$univariate$effect.sizes#
# $es#
#                Y1           Y2           Y3          Y4#
# A     0.006283533 0.0080524881 0.0062002068 0.007432117#
# B     0.007042220 0.0132026394 0.0050956422 0.001461756#
# C     0.001032278 0.0004291737 0.0002019809 0.001670688#
# A:B   0.069687809 0.0901662846 0.0744193355 0.060691041#
# A:C   0.018924152 0.0378119113 0.0098504450 0.023056019#
# B:C   0.003465747 0.0021629273 0.0171888713 0.011244960#
# A:B:C 0.056427269 0.0757133332 0.0452942247 0.055019573#
# $pes#
#                Y1          Y2           Y3          Y4#
# A     0.007450059 0.010316908 0.0073120001 0.008776129#
# B     0.008342092 0.016804437 0.0060172081 0.001738354#
# C     0.001231587 0.000555284 0.0002398962 0.001986326#
# A:B   0.076848151 0.104525165 0.0812288624 0.067425883#
# A:C   0.022106075 0.046665635 0.0115669892 0.026732241#
# B:C   0.004122931 0.002792228 0.0200117681 0.013218964#
# A:B:C 0.063148530 0.089266214 0.0510620096 0.061512637#
# $eps#
#                 Y1           Y2           Y3           Y4       #
# A     -0.009919119 -0.006898375 -0.010091715 -0.008814796#
# B     -0.003759547  0.003235398 -0.005765639 -0.009369519#
# C     -0.001668164 -0.002062637 -0.002513339 -0.001037131#
# A:B    0.004877204  0.030362834  0.009251648 -0.004296612#
# A:C    0.002721500  0.022861049 -0.006441477  0.006809106#
# B:C   -0.007336021 -0.007804315  0.006327590  0.000413685#
# A:B:C -0.008383337  0.015909882 -0.019873463 -0.009968079#
# $peps#
#                 Y1           Y2           Y3            Y4#
# A     -0.011760585 -0.008838249 -0.011901316 -0.0104088488#
# B     -0.004453494  0.004118043 -0.006808376 -0.0111424419#
# C     -0.001990247 -0.002668731 -0.002985136 -0.0012330727#
# A:B    0.005378331  0.035198081  0.010098194 -0.0047734037#
# A:C    0.003179096  0.028214002 -0.007563972  0.0078948004#
# B:C   -0.008727096 -0.010074969  0.007366759  0.0004863057#
# A:B:C -0.009381907  0.018757792 -0.022404157 -0.0111444489#
# $os#
#                 Y1           Y2           Y3            Y4#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# $pos#
#                 Y1           Y2           Y3           Y4#
# A     -0.009760522 -0.007338778 -0.009877086 -0.008640632#
# B     -0.003677148  0.003405239 -0.005619224 -0.009189392#
# C     -0.001628272 -0.002183088 -0.002441775 -0.001008947#
# A:B    0.004730349  0.031069643  0.008886644 -0.004193148#
# A:C    0.002645085  0.023574191 -0.006282037  0.006573891#
# B:C   -0.007200423 -0.008310564  0.006095068  0.000401876#
# A:B:C -0.008236848  0.016524634 -0.019638813 -0.009782187#
# $cf#
#               Y1         Y2         Y3         Y4#
# A     0.08663705 0.10210022 0.08582458 0.09409480#
# B     0.09171841 0.13073505 0.07780510 0.04172985#
# C     0.03511560 0.02357101 0.01549044 0.04461255#
# A:B   0.28852280 0.34165182 0.29733875 0.26888814#
# A:C   0.15035225 0.22124627 0.10817740 0.16573015#
# B:C   0.06434283 0.05291546 0.14290002 0.11574129#
# A:B:C 0.25962484 0.31307460 0.23196905 0.25601650#
# $cf.pop#
#               Y1         Y2         Y3         Y4#
# A     0.00000000 0.00000000 0.00000000 0.00000000#
# B     0.00000000 0.05845404 0.00000000 0.00000000#
# C     0.00000000 0.00000000 0.00000000 0.00000000#
# A:B   0.06894078 0.17906959 0.09469068 0.00000000#
# A:C   0.05149855 0.15538131 0.00000000 0.08134736#
# B:C   0.00000000 0.00000000 0.07830993 0.02005087#
# A:B:C 0.00000000 0.12962363 0.00000000 0.00000000#
F.values <- lapply(1:N.eff, function(iii){#
	effect.size.type <- effect.size.types[iii]#
	effect.size <- Manova2$univariate$effect.sizes[[effect.size.type]]#
	sapply(1:m, function(ii){#
		F.effect.size.calculator(effect.size=effect.size[,ii], df=df, dfe=dfe, N=N, effect.size.type=effect.size.type)#
	})#
})#
names(F.values) <- effect.size.types#
F.values$es#
#            [,1]      [,2]       [,3]      [,4]#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
Manova2$univariate$F#
#              Y1        Y2         Y3        Y4#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
Manova1$multivariate.tests$A$SSPH#
#          [,1]      [,2]      [,3]      [,4]#
# [1,] 933.7091  643.8352  680.0428  473.1853#
# [2,] 643.8352 1155.4145 1047.4997  667.8090#
# [3,] 680.0428 1047.4997 1173.5965  840.8618#
# [4,] 473.1853  667.8090  840.8618 1085.7157#
Manova2$multivariate$SSPH$A#
#          Y1        Y2        Y3        Y4#
# Y1 933.7091  643.8352  680.0428  473.1853#
# Y2 643.8352 1155.4145 1047.4997  667.8090#
# Y3 680.0428 1047.4997 1173.5965  840.8618#
# Y4 473.1853  667.8090  840.8618 1085.7157#
Manova1$multivariate.tests$B$SSPH#
#           [,1]      [,2]       [,3]       [,4]#
# [1,] 1046.4472  716.6249 -511.81625 -119.49546#
# [2,]  716.6249 1894.3932  529.21761 -336.08074#
# [3,] -511.8163  529.2176  964.53783    3.10417#
# [4,] -119.4955 -336.0807    3.10417  213.54682#
Manova2$multivariate$SSPH$B#
#           Y1        Y2         Y3         Y4#
# Y1 1046.4472  716.6249 -511.81625 -119.49546#
# Y2  716.6249 1894.3932  529.21761 -336.08074#
# Y3 -511.8163  529.2176  964.53783    3.10417#
# Y4 -119.4955 -336.0807    3.10417  213.54682#
Manova1$multivariate.tests$C$SSPH#
#            [,1]      [,2]      [,3]      [,4]#
# [1,]  153.39258 -97.19243  76.58072 -193.4894#
# [2,]  -97.19243  61.58295 -48.52299  122.5985#
# [3,]   76.58072 -48.52299  38.23266  -96.5989#
# [4,] -193.48935 122.59850 -96.59890  244.0674#
Manova2$multivariate$SSPH$C#
#            Y1        Y2        Y3        Y4#
# Y1  153.39258 -97.19243  76.58072 -193.4894#
# Y2  -97.19243  61.58295 -48.52299  122.5985#
# Y3   76.58072 -48.52299  38.23266  -96.5989#
# Y4 -193.48935 122.59850 -96.59890  244.0674#
Manova1$multivariate.tests$'A:B'$SSPH#
#           [,1]      [,2]      [,3]     [,4]#
# [1,] 10355.344  6068.672  3992.285 3917.855#
# [2,]  6068.672 12937.569  7267.808 4557.909#
# [3,]  3992.285  7267.808 14086.491 7214.207#
# [4,]  3917.855  4557.909  7214.207 8866.009#
Manova2$multivariate$SSPH$'A:B'#
#           Y1        Y2        Y3       Y4#
# Y1 10355.344  6068.672  3992.285 3917.855#
# Y2  6068.672 12937.569  7267.808 4557.909#
# Y3  3992.285  7267.808 14086.491 7214.207#
# Y4  3917.855  4557.909  7214.207 8866.009#
Manova1$multivariate.tests$'A:C'$SSPH#
#           [,1]     [,2]      [,3]      [,4]#
# [1,] 2812.0570 2875.919  697.4654  472.3167#
# [2,] 2875.9188 5425.460 1447.2806 -423.3800#
# [3,]  697.4654 1447.281 1864.5341 1627.5914#
# [4,]  472.3167 -423.380 1627.5914 3368.1620#
Manova2$multivariate$SSPH$'A:C'#
#           Y1       Y2        Y3        Y4#
# Y1 2812.0570 2875.919  697.4654  472.3167#
# Y2 2875.9188 5425.460 1447.2806 -423.3800#
# Y3  697.4654 1447.281 1864.5341 1627.5914#
# Y4  472.3167 -423.380 1627.5914 3368.1620#
Manova1$multivariate.tests$'B:C'$SSPH#
#            [,1]       [,2]       [,3]      [,4]#
# [1,]  514.99679  -28.63097 -374.31638 -585.7867#
# [2,]  -28.63097  310.35277  -29.83564 -235.4005#
# [3,] -374.31638  -29.83564 3253.64728  548.5185#
# [4,] -585.78670 -235.40049  548.51845 1642.7390#
Manova2$multivariate$SSPH$'B:C'#
#            Y1         Y2         Y3        Y4#
# Y1  514.99679  -28.63097 -374.31638 -585.7867#
# Y2  -28.63097  310.35277  -29.83564 -235.4005#
# Y3 -374.31638  -29.83564 3253.64728  548.5185#
# Y4 -585.78670 -235.40049  548.51845 1642.7390#
Manova1$multivariate.tests$'A:B:C'$SSPH#
#          [,1]      [,2]     [,3]     [,4]#
# [1,] 8384.878  3737.000 1225.204 1088.891#
# [2,] 3737.000 10863.807 4190.763 2090.254#
# [3,] 1225.204  4190.763 8573.550 2080.343#
Manova2$multivariate$SSPH$'A:B:C'#
#          Y1        Y2       Y3       Y4#
# Y1 8384.878  3737.000 1225.204 1088.891#
# Y2 3737.000 10863.807 4190.763 2090.254#
# Y3 1225.204  4190.763 8573.550 2080.343#
# Y4 1088.891  2090.254 2080.343 8037.596#
Manova1$multivariate.tests$'A:B:C'$SSPE#
#            [,1]      [,2]      [,3]       [,4]#
# [1,] 124395.375  48964.95  20321.15   9174.277#
# [2,]  48964.952 110837.18  59000.44  26435.177#
# [3,]  20321.147  59000.44 159331.51  65634.985#
# [4,]   9174.277  26435.18  65634.99 122627.688#
Manova2$multivariate$SSPE#
#            Y1        Y2        Y3         Y4#
# Y1 124395.375  48964.95  20321.15   9174.277#
# Y2  48964.952 110837.18  59000.44  26435.177#
# Y3  20321.147  59000.44 159331.51  65634.985#
# Y4   9174.277  26435.18  65634.99 122627.688#
Manova1$multivariate.tests$'A:B:C'#
# Sum of squares and products for the hypothesis:#
#          [,1]      [,2]     [,3]     [,4]#
# [1,] 8384.878  3737.000 1225.204 1088.891#
# [2,] 3737.000 10863.807 4190.763 2090.254#
# [3,] 1225.204  4190.763 8573.550 2080.343#
# [4,] 1088.891  2090.254 2080.343 8037.596#
# #
# Sum of squares and products for error:#
#            [,1]      [,2]      [,3]       [,4]#
# [1,] 124395.375  48964.95  20321.15   9174.277#
# [2,]  48964.952 110837.18  59000.44  26435.177#
# [3,]  20321.147  59000.44 159331.51  65634.985#
# [4,]   9174.277  26435.18  65634.99 122627.688#
# #
# Multivariate Tests: A:B:C#
#                  Df test stat  approx F num Df   den Df  Pr(>F)#
# Pillai           24 0.2823563 0.9810253     96 1240.000 0.53372#
# Wilks            24 0.7455292 0.9768058     96 1218.694 0.54506#
# Hotelling-Lawley 24 0.3056174 0.9725638     96 1222.000 0.55645#
# Roy              24 0.1059790 1.3688958     24  310.000 0.11930#
Manova2$multivariate$Wilks#
#       test.stat         F df       dfe         p          es#
# A     0.9749528 0.3260270 24 1072.2051 0.9991978 0.006321495#
# B     0.9652822 0.6823864 16  938.5381 0.8134232 0.008794802#
# C     0.9927088 0.5637078  4  307.0000 0.6891757 0.007291175#
# A:B   0.7331071 1.0349161 96 1218.6942 0.3925947 0.074680195#
# A:C   0.9053300 1.2919714 24 1072.2051 0.1572833 0.024557383#
# B:C   0.9488768 1.0162763 16  938.5381 0.4362680 0.013033389#
# A:B:C 0.7455292 0.9768058 96 1218.6942 0.5450587 0.070785112#
# car seems to be wrong for the calculation of some F values#
# at a guess it is taking the preceding df for wrong values#
# I need to check this further#
# but I am correct by Anova#
fitIV <- lm(Y ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIV, type="II")#
# summary(Manova.test, univariate=TRUE)#
summary(Manova.test, univariate=TRUE)[[8]]#
Manova2$univariate$`sum of squares`#
Manova2$univariate$F#
Manova2$univariate$`Pr(>F)`#
summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,2:5]#
summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,1]#
# car error#
# this gives the correct F values from car numbers#
MS <- summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,2:5] / #
matrix(rep(summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,1],each=4),byrow=TRUE, ncol=4)#
MSe <- summary(Manova.test, univariate=TRUE)[[8]][[1]][8,2:5] / #
summary(Manova.test, univariate=TRUE)[[8]][[1]][8,1] #
MS / matrix(rep(MSe, each=7), ncol=4)#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
Manova2$univariate$F#
#              Y1        Y2         Y3        Y4#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
# using ANOVA to confirm#
sapply(1:m, function(iii) Anova(lm(Y[,iii] ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum)), type="II")[1:7,"F value"] )#
#           [,1]      [,2]       [,3]      [,4]#
# [1,] 0.3878089 0.5385969 0.38056940 0.4574480#
# [2,] 0.6519507 1.3246031 0.46915664 0.1349570#
# [3,] 0.3822626 0.1722337 0.07438568 0.6169867#
# [4,] 1.0752532 1.5077104 1.14196680 0.9338857#
# [5,] 1.1679663 2.5290789 0.60462142 1.4191015#
# [6,] 0.3208500 0.2170036 1.58258230 1.0381936#
# [7,] 0.8706487 1.2660362 0.69504116 0.8466158#
lapply(1:m, function(iii) Anova(lm(Y[,iii] ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum)), type="II") )#
# could just do 4 ANOVAs #
# if Y is simply one column #
formula <- Y ~ A + B + C + A*B*C#
sapply(1: dim(Y)[2], function(ii) MANOVA(formula, longdata[,c(1:3,ii+3)])$ANOVA[,"p"] )#
           [,1]       [,2]      [,3]      [,4]#
A     0.8866611 0.77875718 0.8912229 0.8394840#
B     0.6258928 0.26064757 0.7583703 0.9693790#
C     0.5368488 0.67842133 0.7852367 0.4327692#
A:B   0.3708548 0.06241955 0.2960560 0.5555078#
A:C   0.3232311 0.02097027 0.7266195 0.2067099#
B:C   0.8639366 0.92888217 0.1787353 0.3875895#
A:B:C 0.6428363 0.18475070 0.8563287 0.6755199#
Manova2$univariate$`Pr(>F)`#
             Y1         Y2        Y3        Y4#
A     0.8866611 0.77875718 0.8912229 0.8394840#
B     0.6258928 0.26064757 0.7583703 0.9693790#
C     0.5368488 0.67842133 0.7852367 0.4327692#
A:B   0.3708548 0.06241955 0.2960560 0.5555078#
A:C   0.3232311 0.02097027 0.7266195 0.2067099#
B:C   0.8639366 0.92888217 0.1787353 0.3875895#
A:B:C 0.6428363 0.18475070 0.8563287 0.6755199#
formula <- Y ~ A + B + C#
Manova2 <- MANOVA(formula, longdata, TEST="all")#
Manova2$multivariate$tests$Pillai#
   test.stat         F df  dfe         p          es#
A 0.02181492 0.3363296 24 1472 0.9989738 0.005453729#
B 0.02742761 0.6351905 16 1472 0.8572654 0.006856903#
C 0.00644906 0.5922965  4  365 0.6684200 0.006449060#
Manova2$multivariate$tests$Wilks#
  test.stat         F df      dfe         p          es#
A 0.9783289 0.3345706 24 1274.543 0.9990118 0.005462361#
B 0.9727797 0.6327857 16 1115.731 0.8591075 0.006875672#
C 0.9935509 0.5922965  4  365.000 0.6684200 0.006449060#
Manova2$univariate$`Pr(>F)`#
# Type II/III sum of squares#
library(car)#
fitII <- lm(Y ~ A+B+C)#
Manova.test <- Anova(fitII, type="II")#
summary(Manova.test, univariate=TRUE)#
############################
rm( list=ls(all=TRUE ) )#
library( ANOVA.boot )#
model <- Y ~ A + B + C + A*B*C#
n.A <- 5#
n.B <- 3#
n.C <- 2#
n <- 4 	# sample size in each group#
N.var <- 3#
mu.m <- c(50, 100, 150)#
sd.m <-  c(5, 10, 15)#
set.seed(42)#
rel.A <- matrix( rep(1, n.A*N.var), ncol=n.A )#
rel.B <- matrix( rep(1, n.B*N.var), ncol=n.B )#
rel.C <- matrix( rep(1, n.C*N.var), ncol=n.C )#
# rel.A[3, 2]=1.1; rel.B[3, 3]=1.1; rel.C[3, 2]=1.1#
rel.amplitudes <- list(A=rel.A, B=rel.B, C=rel.C)#
p = 0.3#
levs <- c(A=n.A, B=n.B, C=n.C)#
groups <-  names(levs)#
n.groups <- length(groups)#
# set up nesting#
rep.each <- c(1, sapply(1:(n.groups-1), function(ii) prod( levs[1:ii] ) ) )#
rep.times <- c( sapply(2:n.groups, function(ii) prod( levs[ii:n.groups] ) ), 1)#
factors <- lapply(1:n.groups, function(ii){#
	rep( rep(seq_len(levs[ii]), each=rep.each[ii]), times = rep.times[ii] ) #
})#
names(factors) <- groups #
scales <- factors#
factors1 <- factors#
factors <- lapply(1:n.groups, function(iii) rep(factors[[iii]], each=n) )#
factors <- lapply(factors, factor)#
for(ii in (1:n.groups) ){ assign(groups[ii], factors[[ii]]) }#
scales <- lapply(1:N.var, function(i){#
	scales.tmp <- scales#
	for(ii in (1:n.groups) ) {#
		for( iii in (1:levs[ii]) ) { scales.tmp[[ii]] <- replace(scales.tmp[[ii]], scales.tmp[[ii]]==iii, rel.amplitudes[[ii]][i,iii]); scales.tmp[[ii]] }#
	}#
	scales.tmp#
})#
scales <- lapply( 1:N.var, function(iii) do.call(cbind, scales[[iii]]) )#
scales <- sapply( 1:N.var, function(iii) apply(scales[[iii]] ,1,prod) )#
g <- interaction(A,B,C)#
# scales is total no of groups ( prod(levs) ) by N.var matrix that specifies average amplitude to simulate#
N <- prod(levs)		# dim(scales)[1]#
mu.m.scales <- scales * matrix( rep(mu.m, N), byrow=TRUE, ncol=N.var )#
N <- n.A*n.B*n.C#
muij <- mu.m.scales#
sdij <- matrix( rep(sd.m, each=N), ncol=N.var)#
names(factors) <- c("A","B","C")#
# Y <- muij[rep(1:N, each=n), ]  #
TYPE = "II"#
TEST="all"#
ANOVA=TRUE#
ANOVA.effect.size="os"#
show.power=FALSE#
alpha=0.05#
ar=FALSE#
longdata <- list(#
			mu=cbind(do.call(cbind, factors1), muij), #
			sd=cbind(do.call(cbind, factors1), sdij)#
		)#
longdata <- lapply(1:length(longdata), function(iii){#
		colnames(longdata[[iii]]) <- c("A","B","C", "Y1","Y2","Y3") #
		longdata[[iii]]#
	})#
names(longdata) <- c("mu", "sd")#
rm( list = ls()[!(ls() %in% c('model','muij','sdij','factors', 'longdata', 'n','p','ar','TYPE','TEST','ANOVA','ANOVA.effect.size','show.power','alpha'))] )#
# the wrapper for this is below#
expected <- expected.MANOVA(model=model, muij=muij, sdij=sdij, factors=factors, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha)#
expected#
# $multivariate#
# $multivariate$tests#
# $multivariate$tests$Pillai#
#        test.stat         F df dfe         p         es#
# A     0.12765957 0.3333333 12  90 0.9810217 0.04255319#
# B     0.06521739 0.3258427  6  58 0.9207795 0.03260870#
# C     0.03296703 0.3181818  3  28 0.8121134 0.03296703#
# A:B   0.24489796 0.3333333 24  90 0.9983744 0.08163265#
# A:C   0.12765957 0.3333333 12  90 0.9810217 0.04255319#
# B:C   0.06521739 0.3258427  6  58 0.9207795 0.03260870#
# A:B:C 0.24489796 0.3333333 24  90 0.9983744 0.08163265#
# #
# $multivariate$tests$Wilks#
#       test.stat         F df      dfe         p         es#
# A     0.8776957 0.3132529 12 74.37254 0.9850227 0.04255319#
# B     0.9361901 0.3128332  6 56.00000 0.9276793 0.03243083#
# C     0.9673939 0.3145807  3 28.00000 0.8146843 0.03260608#
# A:B   0.7745497 0.3138801 24 81.80974 0.9989357 0.08163265#
# A:C   0.8776957 0.3132529 12 74.37254 0.9850227 0.04255319#
# B:C   0.9361901 0.3128332  6 56.00000 0.9276793 0.03243083#
# A:B:C 0.7745497 0.3138801 24 81.80974 0.9989357 0.08163265#
# #
# $multivariate$tests$Hotelling#
#        test.stat         F df dfe         p         es#
# A     0.13333333 0.2962963 12  80 0.9883685 0.04255319#
# B     0.06666667 0.3000000  6  54 0.9342081 0.03225806#
# C     0.03333333 0.3111111  3  28 0.8171615 0.03225806#
# A:B   0.26666667 0.2962963 24  80 0.9993230 0.08163265#
# A:C   0.13333333 0.2962963 12  80 0.9883685 0.04255319#
# B:C   0.06666667 0.3000000  6  54 0.9342081 0.03225806#
# A:B:C 0.26666667 0.2962963 24  80 0.9993230 0.08163265#
# #
# $multivariate$tests$`Roy's`#
#        test.stat         F df dfe         p         es#
# A     0.04444444 0.3333333  4  30 0.8533215 0.04255319#
# B     0.02222222 0.2148148  3  29 0.8853142 0.02173913#
# C     0.01111111 0.1037037  3  28 0.9572148 0.01098901#
# A:B   0.08888889 0.3333333  8  30 0.9461661 0.08163265#
# A:C   0.04444444 0.3333333  4  30 0.8533215 0.04255319#
# B:C   0.02222222 0.2148148  3  29 0.8853142 0.02173913#
# A:B:C 0.08888889 0.3333333  8  30 0.9461661 0.08163265#
# #
# #
# $multivariate$effect.sizes#
#           m.es.V  m.es.V.adj     m.es.W  m.es.W.adj     m.es.H  m.es.H.adj     m.es.R   m.es.R.adj       m.os      m.os.adj#
# A     0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# B     0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# C     0.03296703 0.007957560 0.03260608 0.007587277 0.03225806 0.007230256 0.01098901 -0.014588859 0.02420936 -0.0028959387#
# A:B   0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
# A:C   0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# B:C   0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# A:B:C 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
# #
# $multivariate$SSPH#
# $multivariate$SSPH$A#
#          [,1]     [,2] [,3]#
# [1,] 33.33333  20.0000   30#
# [2,] 20.00000 133.3333   60#
# [3,] 30.00000  60.0000  300#
# #
# $multivariate$SSPH$B#
#          [,1]     [,2] [,3]#
# [1,] 16.66667 10.00000   15#
# [2,] 10.00000 66.66667   30#
# [3,] 15.00000 30.00000  150#
# #
# $multivariate$SSPH$C#
#          [,1]     [,2] [,3]#
# [1,] 8.333333  5.00000  7.5#
# [2,] 5.000000 33.33333 15.0#
# [3,] 7.500000 15.00000 75.0#
# #
# $multivariate$SSPH$`A:B`#
#          [,1]     [,2] [,3]#
# [1,] 66.66667  40.0000   60#
# [2,] 40.00000 266.6667  120#
# [3,] 60.00000 120.0000  600#
# #
# $multivariate$SSPH$`A:C`#
#          [,1]     [,2] [,3]#
# [1,] 33.33333  20.0000   30#
# [2,] 20.00000 133.3333   60#
# [3,] 30.00000  60.0000  300#
# #
# $multivariate$SSPH$`B:C`#
#          [,1]     [,2] [,3]#
# [1,] 16.66667 10.00000   15#
# [2,] 10.00000 66.66667   30#
# [3,] 15.00000 30.00000  150#
# #
# $multivariate$SSPH$`A:B:C`#
#          [,1]     [,2] [,3]#
# [1,] 66.66667  40.0000   60#
# [2,] 40.00000 266.6667  120#
# [3,] 60.00000 120.0000  600#
# #
# #
# $multivariate$SSPE#
#      [,1] [,2] [,3]#
# [1,]  750  450  675#
# [2,]  450 3000 1350#
# [3,]  675 1350 6750#
# #
# #
# $univariate#
# $univariate$`sum of squares`#
#       df                           #
# A      4  33.333333  133.33333  300#
# B      2  16.666667   66.66667  150#
# C      1   8.333333   33.33333   75#
# A:B    8  66.666667  266.66667  600#
# A:C    4  33.333333  133.33333  300#
# B:C    2  16.666667   66.66667  150#
# A:B:C  8  66.666667  266.66667  600#
# error 90 750.000000 3000.00000 6750#
# #
# $univariate$F#
#       [,1] [,2] [,3]#
# A        1    1    1#
# B        1    1    1#
# C        1    1    1#
# A:B      1    1    1#
# A:C      1    1    1#
# B:C      1    1    1#
# A:B:C    1    1    1#
# #
# $univariate$`Pr(>F)`#
#            [,1]      [,2]      [,3]#
# A     0.4118909 0.4118909 0.4118909#
# B     0.3719296 0.3719296 0.3719296#
# C     0.3199916 0.3199916 0.3199916#
# A:B   0.4417604 0.4417604 0.4417604#
# A:C   0.4118909 0.4118909 0.4118909#
# B:C   0.3719296 0.3719296 0.3719296#
# A:B:C 0.4417604 0.4417604 0.4417604#
# #
# $univariate$os#
#       [,1] [,2] [,3]#
# A        0    0    0#
# B        0    0    0#
# C        0    0    0#
# A:B      0    0    0#
# A:C      0    0    0#
# B:C      0    0    0#
# A:B:C    0    0    0#
formula <- Y ~ A + B + C + A*B*C#
rm( list = ls()[!(ls() %in% c('formula','muij', 'factors', 'longdata','n','p','ar','TYPE','TEST','ANOVA','ANOVA.effect.size','show.power','alpha'))] )#
expected2 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha)
expected2$multivariate$effect.sizes
longdata.simple <- list(mu=longdata$mu[, -c(5,6)],sd=longdata$sd[, -c(5,6)])
ptm <- proc.time()#
out.simple <- sMANOVA(formula=formula, longdata=longdata.simple, n=n, cov.mat=cov.mat, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
				dist=dist, alpha=alpha, p.adjust.method=p.adjust.method, replacement=replacement, return.average=return.average, #
				raw.return=raw.return, return.p=return.p, return.perms=FALSE, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)#
proc.time() - ptm#
out.simple$univariate$`effect size`[1,]$os
expected2$multivariate$effect.sizes#
#          m.es.V m.es.V.adj    m.es.W m.es.W.adj    m.es.H m.es.H.adj    m.es.R m.es.R.adj      m.os   m.os.adj#
# A     0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B     0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# C     0.0329670  0.0079576 0.0326061  0.0075873 0.0322581  0.0072303 0.0109890 -0.0145889 0.0242094 -0.0028959#
# A:B   0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# A:C   0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B:C   0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# A:B:C 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# if SERLIN=TRUE  then effect.size tables are identical#
expected2.adj <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
	show.power=show.power, power.settings = list(ncp.method1 = "OS", ncp.method2 = "pop", Serlin = TRUE), alpha=alpha)#
expected2.adj$multivariate$effect.sizes#
#          m.es.V m.es.V.adj    m.es.W m.es.W.adj    m.es.H m.es.H.adj    m.es.R m.es.R.adj      m.os   m.os.adj#
# A     0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B     0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# C     0.0329670  0.0079576 0.0326061  0.0075873 0.0322581  0.0072303 0.0109890 -0.0145889 0.0242094 -0.0028959#
# A:B   0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# A:C   0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B:C   0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# A:B:C 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# However, expected2$multivariate$tests$Pillai etc returns unajdusted if FALSE and  expected2.adj$multivariate$tests$Pillai returns adjusted if SERLIN=TRUE#
sapply(1:length(expected2$multivariate$tests), function(ii) expected2$multivariate$tests[[ii]][,"es"] )#
           [,1]      [,2]      [,3]      [,4]#
A     0.0425532 0.0425532 0.0425532 0.0425532#
B     0.0326087 0.0324308 0.0322581 0.0217391#
C     0.0329670 0.0326061 0.0322581 0.0109890#
A:B   0.0816327 0.0816327 0.0816327 0.0816327#
A:C   0.0425532 0.0425532 0.0425532 0.0425532#
B:C   0.0326087 0.0324308 0.0322581 0.0217391#
A:B:C 0.0816327 0.0816327 0.0816327 0.0816327#
sapply(1:length(expected2.adj$multivariate$tests), function(ii) expected2.adj$multivariate$tests[[ii]][,"es"] )#
           [,1]      [,2]      [,3]       [,4]#
A     0.0092507 0.0092507 0.0092507  0.0092507#
B     0.0075900 0.0074075 0.0072303 -0.0035607#
C     0.0079576 0.0075873 0.0072303 -0.0145889#
A:B   0.0154440 0.0154440 0.0154440  0.0154440#
A:C   0.0092507 0.0092507 0.0092507  0.0092507#
B:C   0.0075900 0.0074075 0.0072303 -0.0035607#
A:B:C 0.0154440 0.0154440 0.0154440  0.0154440#
longdata <- lapply(1:length(longdata), function(iii){#
		colnames(longdata[[iii]]) <- c("size","car","city", "Y1","Y2","Y3") #
		longdata[[iii]]#
	})#
names(longdata) <- c("mu", "sd")#
formula <- Y ~ size*car*city#
expected3 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha)#
expected3$multivariate$effect.sizes#
#                   m.es.V  m.es.V.adj     m.es.W  m.es.W.adj     m.es.H  m.es.H.adj     m.es.R   m.es.R.adj       m.os      m.os.adj#
# size          0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# car           0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# city          0.03296703 0.007957560 0.03260608 0.007587277 0.03225806 0.007230256 0.01098901 -0.014588859 0.02420936 -0.0028959387#
# size:car      0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
# size:city     0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# car:city      0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# size:car:city 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
power.settings <- list(ncp.method1="MP", ncp.method2="F value", Serlin=TRUE)#
expected4 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, power.settings=power.settings, alpha=alpha)#
expected4$multivariate$tests$Wilks#
#               test.stat         F df      dfe         p          es ncp Power#
# size          0.8776957 0.9818783 12 233.1176 0.4668818 0.009250694   0  0.05#
# car           0.9361901 0.9831899  6 176.0000 0.4381451 0.007407486   0  0.05#
# city          0.9673939 0.9886822  3  88.0000 0.4019752 0.007587277   0  0.05#
# size:car      0.7745497 0.9815373 24 255.8280 0.4911317 0.015444015   0  0.05#
# size:city     0.8776957 0.9818783 12 233.1176 0.4668818 0.009250694   0  0.05#
# car:city      0.9361901 0.9831899  6 176.0000 0.4381451 0.007407486   0  0.05#
# size:car:city 0.7745497 0.9815373 24 255.8280 0.4911317 0.015444015   0  0.05#
power.settings.GPower <- list(ncp.method1="OS", ncp.method2="pop", Serlin=FALSE)#
expected5 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, power.settings=power.settings.GPower, alpha=alpha)#
expected5$multivariate$tests$Wilks#
#               test.stat         F df      dfe         p         es ncp Power#
# size          0.8776957 0.9818783 12 233.1176 0.4668818 0.04255319   0  0.05#
# car           0.9361901 0.9831899  6 176.0000 0.4381451 0.03243083   0  0.05#
# city          0.9673939 0.9886822  3  88.0000 0.4019752 0.03260608   0  0.05#
# size:car      0.7745497 0.9815373 24 255.8280 0.4911317 0.08163265   0  0.05#
# size:city     0.8776957 0.9818783 12 233.1176 0.4668818 0.04255319   0  0.05#
# car:city      0.9361901 0.9831899  6 176.0000 0.4381451 0.03243083   0  0.05#
# size:car:city 0.7745497 0.9815373 24 255.8280 0.4911317 0.08163265   0  0.05#
# G*Power calculate required values#
Wilks <- expected5$multivariate$tests$Wilks[,"test.stat"]#
model <- formula#
levs <- sapply(1:length(factors), function(ii) length(unique(factors[[ii]])))#
N <- n*prod(levs)#
k <- prod(levs)#
info <- terms(model)#
terms <- attr(info, "term.labels")#
n.terms <- length(terms)#
fac <- attr(info, "factors") #
mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
mat[mat == 0] = 1#
q <- apply(mat, 2, prod)#
m <- dim(muij)[2]#
p <- m#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- ANOVA.boot:::model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
Wilks.con <- ANOVA.boot:::Wilks.constants(N, k, p, q)#
# b <- sapply(q, max, p)#
s <- Wilks.con$s#
b <- Wilks.con$b#
# b for Serlin is different to b in ANOVA.boot:::Wilks.constants#
b.serlin <- sapply(q, max, p)#
Serlin.adj <- (N - 1)/(N - b.serlin - 1)#
df1 <- Wilks.con$df1#
df2 <- Wilks.con$df2#
es <- 1 - Wilks^(1/s) # not adjusted#
es#
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.04255319    0.03243083    0.03260608    0.08163265    0.04255319    0.03243083    0.08163265#
expected5$multivariate$effect.sizes[,"m.es.W"]#
#         size           car          city      size:car     size:city      car:city size:car:city #
#    0.04255319    0.03243083    0.03260608    0.08163265    0.04255319    0.03243083    0.08163265 #
es.adj <- 1 - (1 - es) * Serlin.adj#
es.adj#
#          size           car          city      size:car     size:city      car:city size:car:city #
#   0.009250694   0.007407486   0.007587277   0.015444015   0.009250694   0.007407486   0.015444015#
expected5$multivariate$effect.sizes[,"m.es.W.adj"]#
#          size           car          city      size:car     size:city      car:city size:car:city #
#   0.009250694   0.007407486   0.007587277   0.015444015   0.009250694   0.007407486   0.015444015#
# G*Power disagrees BUT I AM RECOMMENDING THE SERLIN ADJUSTED VALUES:#
# The approach of Muller and Peterson (1984) has found#
# widespread use; for instance, it has been adopted in the#
# SPSS software package. We nevertheless recommend the#
# approach of OBrien and Shieh (1999) because it has a#
# number of advantages: (1) Unlike the method of Muller#
# and Peterson, it provides the exact noncentral F distribution#
# whenever the hypothesis involves at most s = 1#
# positive eigenvalues; (2) its approximations for s > 1#
# eigenvalues are almost always more accurate than those#
# of Muller and Petersons method (which systematically#
# underestimates power); and (3) it provides a simpler form#
# of the noncentrality parameterthat is, lambda* N, where#
# lambda* is not a function of the total sample size.#
# what G*Power calls fsqr(U):#
fsqr.U <- (1 - (1 - es)^(s/b) )/(1 - es)^(s/b)#
# no. of eigenvalues : s#
# response variables : p #
# predictors 	   : q + 1 # ?#
# eg for size#
effect <- "size"#
Wilks[[effect]]#
# [1] 0.8776957#
q[[effect]]#
# [1] 4#
p#
# [1] 3#
fsqr.U[[effect]]#
# [1] 0.05054332#
# Post hoc: Compute achieved power - given alpha, sample size, and effect size #
# F tests - MANOVA: Special effects and interactions#
# Options:	Wilks U, Muller-Peterson Algorithm#
# Analysis:	Post hoc: Compute achieved power #
# Input:	Effect size f²(U)	=	0.0550655#
# 	a err prob					=	0.05#
# 	Total sample size				=	120#
# 	Number of groups				=	30#
# 	Number of predictors			=	4#
# 	Response variables			=	3#
# Output:	Noncentrality parameter ?	=	12.8367382#
# 	Critical F					=	1.7938771#
# 	Numerator df				=	12.0000000#
# 	Denominator df				=	233.1176#
# 	Power (1-ß err prob)			=	0.6136963#
# 	Wilks U					=	0.8677776#
expected5$multivariate$tests$Wilks[effect, "Power"]#
# [1] 0.7366695#
# agreement is ok (G*Power ends up with a different Wilks U which is odd#
# my default performs better for NULL#
expected4$multivariate$tests$Wilks[effect, "Power"]#
# [1] 0.05#
# Pillai#
Pillai <- expected5$multivariate$tests$Pillai[,"test.stat"] #
Pillai.con <- ANOVA.boot:::Pillai.constants(N, k, p, q)#
# #
s <- Pillai.con$s#
t <- Pillai.con$t#
u <- Pillai.con$u#
# b for Serlin is different to b in ANOVA.boot:::Wilks.constants#
b.serlin <- sapply(q, max, p)#
Serlin.adj <- (N - 1)/(N - b.serlin - 1)#
df1 <- Pillai.con$df1#
df2 <- Pillai.con$df2#
es = Pillai/s#
fsqr.V <- es/(1 - es)#
# IBM pg 548#
# The number of nonzero eigenvalues, s, is equal to min(p, n.h)#
n.h <-  q#
s <-  sapply(n.h, min, p)#
# n.e is degrees of freedom for error SCCP#
n.e <- N - k#
# b is max(p, n.h)#
b <- sapply(n.h, max, p)#
df1#
b * s#
df2#
s * (n.e - p + s) #
( n.e - p + s ) / b * Pillai / (s - Pillai)  # nb mistake ?? in IBM - s#
Pillai#
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.12765957    0.06521739    0.03296703    0.24489796    0.12765957    0.06521739    0.24489796 #
# predictors#
q#
fsqr.V #
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.04444444    0.03370787    0.03409091    0.08888889    0.04444444    0.03370787    0.08888889#
# G*Power#
#    0.04444444 	 0.03370786	   0.03409091    0.08888889	 0.04444444	   0.03370786   0.08888889#
Hotelling <- expected5$multivariate$tests$Hotelling[,"test.stat"] #
es <- expected5$multivariate$tests$Hotelling[,"es"]#
es/(1 - es)#
Hotelling.con <- ANOVA.boot:::Hotelling.constants(N, k, p, q)#
s <- Hotelling.con$s#
t <- Hotelling.con$t#
u <- Hotelling.con$u#
df1 <- Hotelling.con$df1#
df2 <- Hotelling.con$df2
cov.mat
CI=0.95#
subset.names=c("MANOVA.effect.size", "ANOVA.effect.size")#
replacement = TRUE#
raw.return=FALSE#
Nreps=1e3 # Nreps=1e5#
N.dist=1e5#
dist="Normal"#
H0=FALSE#
return.average=TRUE#
p.adjust.method="Sidak-Holm"#
CI=0.95#
method.CI="perc"#
return.p=FALSE#
return.perms=TRUE#
TEST="Pillai"#
seed=42#
cov.mat=NULL#
# ptm <- proc.time()#
# MANOVA.sim.H1.2 <- MANOVA.MC(model=model, A=A, B=B, C=C, muij=muij, n=n, cov.mat=NULL, sdij=sdij, p=p, ar=ar, TYPE=TYPE, TEST=TEST, H0=H0, ANOVA=ANOVA, #
# 				ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha, p.adjust.method=p.adjust.method, factors=factors,#
# 				replacement=TRUE, return.average=TRUE, raw.return=raw.return, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps)#
# #
# proc.time() - ptm#
# #
rm( list = ls()[!(ls() %in% c('formula','longdata','muij', 'factors', 'n', 'cov.mat', 'p','ar','TYPE','TEST','ANOVA','ANOVA.effect.size','dist','show.power','alpha',#
				'p.adjust.method', 'replacement', 'return.average', 'raw.return', 'return.p', 'return.perms', 'CI', #
				'method.CI', 'N.dist', 'Nreps', 'seed'))] )#
p=0.3#
ptm <- proc.time()#
out <- sMANOVA(formula=formula, longdata=longdata, n=n, cov.mat=cov.mat, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
				dist=dist, alpha=alpha, p.adjust.method=p.adjust.method, replacement=replacement, return.average=return.average, #
				raw.return=raw.return, return.p=return.p, return.perms=FALSE, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)#
proc.time() - ptm#
#    user  system elapsed #
#  664.58    2.80  670.78#
out$multivariate$`p(F>Fcrit)`[1,]$uncorrected#
#          size           car          city      size:car     size:city      car:city size:car:city #
#         0.042         0.050         0.055         0.057         0.035         0.053         0.055 #
out$univariate$`p(F>Fcrit)`[1,]$uncorrected#
#                  [,1]    [,2]    [,3]#
# size          0.05162 0.04987 0.04980#
# car           0.05076 0.04998 0.04982#
# city          0.05114 0.04982 0.05075#
# size:car      0.05067 0.04912 0.05039#
# size:city     0.05069 0.04976 0.04969#
# car:city      0.04901 0.05032 0.05084#
# size:car:city 0.04959 0.05020 0.04956#
out$univariate$`p(F>Fcrit)`[1,]$`pr (Sidak-Holm)`#
#                  [,1]    [,2]    [,3]#
# size          0.00772 0.00734 0.00727#
# car           0.00780 0.00703 0.00744#
# city          0.00747 0.00786 0.00747#
# size:car      0.00777 0.00684 0.00724#
# size:city     0.00773 0.00780 0.00724#
# car:city      0.00757 0.00781 0.00782#
# size:car:city 0.00735 0.00721 0.00781#
out$univariate$`effect size`[1,]$os$theta.hat#
out.e <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha)
###################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
# example starts here#
rm( list=ls(all=TRUE ) )#
library( ANOVA.boot )#
n.A <- 7#
n.B <- 5#
n.C <- 2#
set.seed(42)#
N <- lapply(1:n.C, function(iii){#
		matrix( sample(4:7,n.A*n.B,replace=T),  ncol = n.B )  	# N for n.A*n.B groups#
	})#
A <- lapply(1:n.C, function(iii){#
		do.call(c, sapply(1:n.B, function(ii) rep(seq_len(n.A), N[[iii]][,ii])) )#
	})#
A <- do.call(c, A)#
A <- as.factor(A)#
B <- lapply(1:n.C, function(iii){#
		rep(seq_len(n.B), apply(N[[iii]],2,sum))#
	})#
B <- do.call(c, B)#
B <- as.factor(B)#
C <- lapply(1:n.C, function(iii){#
	rep(iii, sum(N[[iii]]))#
	})#
C <- do.call(c, C)#
C <- as.factor(C)#
m <- 4#
set.seed(42)#
mu.m <- rnorm(n=m, mean=100, sd=20)#
p=0.3#
sd.m <- rnorm(m,20,1)#
cov.mat <- cov.mat.rm(sd.m, p=p, ar=TRUE) #
cholesky <- chol(cov.mat)#
Y <- matrix( rnorm(m*length(C), mean = 0, sd = 1), ncol = m )#
Y <- t( t(cholesky) %*% t(Y) ) + matrix(rep(mu.m, each = length(C)), byrow=FALSE, ncol = m)#
manRes1 <- manova(Y ~ A*B*C)#
summary(manRes1, test="Pillai")#
#            Df   Pillai approx F num Df den Df Pr(>F)#
# A           6 0.026636  0.34636     24   1240 0.9987#
# B           4 0.033596  0.65644     16   1240 0.8382#
# C           1 0.007526  0.58198      4    307 0.6759#
# A:B        24 0.308929  1.08108     96   1240 0.2848#
# A:C         6 0.098785  1.30829     24   1240 0.1458#
# B:C         4 0.051904  1.01887     16   1240 0.4331#
# A:B:C      24 0.282356  0.98103     96   1240 0.5337#
# Residuals 310                            #
# Type II/III sum of squares#
library(car)#
fitIII <- lm(Y ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIII, type="III")#
summary(Manova.test, univariate=FALSE)#
# Type III MANOVA Tests:#
# #
# Sum of squares and products for error:#
#            [,1]      [,2]      [,3]       [,4]#
# [1,] 124395.375  48966.04  20322.15   9174.845#
# [2,]  48966.039 110837.15  59001.39  26436.030#
# [3,]  20322.145  59001.39 159331.30  65636.216#
# [4,]   9174.845  26436.03  65636.22 122627.817#
# #
# ------------------------------------------#
#  #
# Term: (Intercept) #
# #
# Sum of squares and products for the hypothesis:#
#         [,1]    [,2]    [,3]    [,4]#
# [1,] 5835590 4007364 4901976 5170189#
# [2,] 4007364 2751901 3366241 3550425#
# [3,] 4901976 3366241 4117727 4343030#
# [4,] 5170189 3550425 4343030 4580659#
# #
# Multivariate Tests: (Intercept)#
#                  Df test stat approx F num Df den Df     Pr(>F)    #
# Pillai            1   0.98791 6273.904      4    307 < 2.22e-16 ***#
# Wilks             1   0.01209 6273.904      4    307 < 2.22e-16 ***#
# Hotelling-Lawley  1  81.74468 6273.904      4    307 < 2.22e-16 ***#
# Roy               1  81.74468 6273.904      4    307 < 2.22e-16 ***#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: A #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]      [,2]     [,3]      [,4]#
# [1,] 1263.0952  836.8615  827.166  772.7159#
# [2,]  836.8615 1361.4855 1133.547  938.2805#
# [3,]  827.1660 1133.5467 1338.470 1037.5614#
# [4,]  772.7159  938.2805 1037.561 1379.2690#
# #
# Multivariate Tests: A#
#                  Df test stat  approx F num Df   den Df  Pr(>F)#
# Pillai            6 0.0315659 0.4109690     24 1240.000 0.99490#
# Wilks             6 0.9687420 0.4085394     24 1072.205 0.99510#
# Hotelling-Lawley  6 0.0319499 0.4066954     24 1222.000 0.99529#
# Roy               6 0.0176754 0.9132276      6  310.000 0.48552#
# #
# ------------------------------------------#
#  #
# Term: B #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]      [,2]       [,3]       [,4]#
# [1,] 1143.2470  600.1166 -499.83313 -192.57841#
# [2,]  600.1166 1909.9466  653.46008 -358.39974#
# [3,] -499.8331  653.4601  798.65657  -90.86706#
# [4,] -192.5784 -358.3997  -90.86706  322.96264#
# #
# Multivariate Tests: B#
#                  Df test stat  approx F num Df    den Df  Pr(>F)#
# Pillai            4 0.0365398 0.7144846     16 1240.0000 0.78132#
# Wilks             4 0.9638229 0.7117807     16  938.5381 0.78388#
# Hotelling-Lawley  4 0.0371596 0.7095158     16 1222.0000 0.78645#
# Roy               4 0.0212065 1.6435013      4  310.0000 0.16315#
# #
# ------------------------------------------#
#  #
# Term: C #
# #
# Sum of squares and products for the hypothesis:#
#            [,1]      [,2]      [,3]       [,4]#
# [1,]  225.92548 -99.20121  96.67981 -207.94045#
# [2,]  -99.20121  43.55808 -42.45097   91.30420#
# [3,]   96.67981 -42.45097  41.37199  -88.98352#
# [4,] -207.94045  91.30420 -88.98352  191.38713#
# #
# Multivariate Tests: C#
#                  Df test stat  approx F num Df den Df  Pr(>F)#
# Pillai            1 0.0071736 0.5545519      4    307 0.69584#
# Wilks             1 0.9928264 0.5545519      4    307 0.69584#
# Hotelling-Lawley  1 0.0072254 0.5545519      4    307 0.69584#
# Roy               1 0.0072254 0.5545519      4    307 0.69584#
# #
# ------------------------------------------#
#  #
# Term: A:B #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]      [,2]      [,3]     [,4]#
# [1,] 11437.732  6877.305  4254.569 4219.432#
# [2,]  6877.305 12560.970  7233.591 4448.628#
# [3,]  4254.569  7233.591 14213.952 7174.512#
# [4,]  4219.432  4448.628  7174.512 8913.720#
# #
# Multivariate Tests: A:B#
#                  Df test stat approx F num Df   den Df   Pr(>F)  #
# Pillai           24 0.2981634 1.040369     96 1240.000 0.378957  #
# Wilks            24 0.7325609 1.037500     96 1218.694 0.386157  #
# Hotelling-Lawley 24 0.3250992 1.034560     96 1222.000 0.393470  #
# Roy              24 0.1234838 1.594999     24  310.000 0.040323 *#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: A:C #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]     [,2]     [,3]      [,4]#
# [1,] 2539.4311 2763.629  756.759  132.8004#
# [2,] 2763.6286 5370.723 1769.431 -719.1470#
# [3,]  756.7590 1769.431 2000.361 1476.4236#
# [4,]  132.8004 -719.147 1476.424 3334.1801#
# #
# Multivariate Tests: A:C#
#                  Df test stat approx F num Df   den Df    Pr(>F)   #
# Pillai            6 0.0947115 1.253026     24 1240.000 0.1855365   #
# Wilks             6 0.9077732 1.256473     24 1072.205 0.1833348   #
# Hotelling-Lawley  6 0.0988827 1.258695     24 1222.000 0.1811677   #
# Roy               6 0.0605502 3.128426      6  310.000 0.0054343 **#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: B:C #
# #
# Sum of squares and products for the hypothesis:#
#            [,1]       [,2]      [,3]      [,4]#
# [1,]  398.31372   10.30311 -307.0137 -659.1746#
# [2,]   10.30311  280.70782 -230.5529 -222.1600#
# [3,] -307.01375 -230.55287 2839.0028  375.8311#
# [4,] -659.17457 -222.15995  375.8311 1686.1707#
# #
# Multivariate Tests: B:C#
#                  Df test stat  approx F num Df    den Df   Pr(>F)  #
# Pillai            4 0.0497475 0.9759965     16 1240.0000 0.480792  #
# Wilks             4 0.9509327 0.9740160     16  938.5381 0.483265  #
# Hotelling-Lawley  4 0.0508862 0.9716077     16 1222.0000 0.485789  #
# Roy               4 0.0293228 2.2725148      4  310.0000 0.061397 .#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: A:B:C #
# #
# Sum of squares and products for the hypothesis:#
#          [,1]      [,2]     [,3]     [,4]#
# [1,] 8384.878  3737.071 1225.276 1088.927#
# [2,] 3737.071 10863.782 4190.858 2090.329#
# [3,] 1225.276  4190.858 8573.560 2080.437#
# [4,] 1088.927  2090.329 2080.437 8037.573#
# #
# Multivariate Tests: A:B:C#
#                  Df test stat  approx F num Df   den Df  Pr(>F)#
# Pillai           24 0.2823563 0.9810253     96 1240.000 0.53372#
# Wilks            24 0.7455292 0.9768058     96 1218.694 0.54506#
# Hotelling-Lawley 24 0.3056174 0.9725638     96 1222.000 0.55645#
# Roy              24 0.1059790 1.3688958     24  310.000 0.11930#
Manova.CAR <- summary(Manova.test, univariate=TRUE)#
Manova.CAR$univariate.tests#
"univariate.tests"#
Manova.test <- Anova(fitIII, type="II")#
Manova1 <- summary(Manova.test,univariate=TRUE)#
# summary(Manova.test, univariate=TRUE)#
Manova1#
####################################################################################################
####################################################################################################
# model <- Y ~ A + B + C + A*B*C#
# Manova2 <- MANOVA.f(Y, A=A, B=B, C=C, model, TYPE = "II", TEST="Wilks", ANOVA=TRUE, ANOVA.effect.size="all", show.power=FALSE, alpha=0.05)#
longdata <- cbind(A=A, B=B, C=C, Y)#
colnames(longdata)[4:7] = c("Y1","Y2","Y3","Y4")#
formula <- Y ~ A + B + C + A*B*C#
colnames(longdata)[4:7] = c("Y1","Y2","Y3","Y4")#
Manova2 <- MANOVA(formula, longdata, ANOVA.effect.size = "all")#
Manova2$univariate$`sum of squares`#
#        df          Y1           Y2           Y3          Y4#
# A       6    933.7091   1155.41702   1173.61195   1085.7261#
# B       4   1046.4472   1894.39016    964.53340    213.5417#
# C       1    153.3926     61.58029     38.23215    244.0636#
# A:B    24  10355.3436  12937.57388  14086.53354   8866.0929#
# A:C     6   2812.0570   5425.46916   1864.55069   3368.1547#
# B:C     4    514.9968    310.34917   3253.61159   1642.7279#
# A:B:C  24   8384.8777  10863.78180   8573.55970   8037.5727#
# error 310 124395.3754 110837.15424 159331.30254 122627.8166#
longdata1 <- longdata#
colnames(longdata1)[1:3] <- c("behaviour","drug","genotype")#
colnames(longdata)[4:7] = c("Y1","Y2","Y3","Y4")#
formula <- Y ~ behaviour + drug + genotype + behaviour*drug*genotype#
Manova2a <- MANOVA(formula, longdata1)#
Manova2a$univariate$`sum of squares`#
longdata2b <- longdata1[,-c(1,2)]#
formula <- Y ~ genotype#
Manova2b <- MANOVA(formula, longdata2b)#
Manova2b$univariate$`sum of squares`#
library(car)#
fit2b<- lm(Y ~ C, contrasts=list(C=contr.sum))#
Manova.test <- Anova(fit2b, type="II")#
summary(Manova.test, univariate=TRUE)#
library(car)#
fitIII <- lm(Y ~ A+B+C + A*B, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIII, type="II")#
summary(Manova.test, univariate=TRUE)#
formula <- Y ~ A + B + C + A*B#
MANOVA(formula, longdata)#
#MANOVA effect sizes#
Manova2$multivariate$Wilks[,"es"]#
#           A           B           C         A:B         A:C         B:C       A:B:C #
# 0.006321495 0.008794802 0.007291175 0.074680195 0.024557383 0.013033389 0.070785112 #
Manova2$multivariate$effect.sizes#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
# #
# Manova2$multivariate$Wilks is uncorrected Serlin adjusted value#
# if want adjusted then look at Manova2$multivariate$effect.sizes[,"m.es.W.adj"]#
# s <- min(p, q); b <- max(p, q); Serlin.adj <- (N - 1)/(N - b - 1)#
###here#
formula <- Y ~ A + B + C + A*B*C#
Manova2.pb <- pbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
Manova2.pb$univariate$`effect size`[1,]$os#
# $theta.hat#
#                 Y1           Y2           Y3            Y4#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# #
# $bias#
#                Y1          Y2          Y3          Y4#
# A     0.014772482 0.013342034 0.014824378 0.015067111#
# B     0.009961165 0.008050724 0.009890840 0.010353595#
# C     0.002421019 0.002567925 0.002638935 0.002388236#
# A:B   0.056212677 0.045746691 0.053022062 0.055911715#
# A:C   0.012731700 0.009988656 0.014456416 0.013264747#
# B:C   0.010587970 0.009798597 0.007542787 0.009288149#
# A:B:C 0.057281073 0.048840608 0.056172695 0.058488772#
# #
# $se#
#                Y1          Y2          Y3          Y4#
# A     0.010513217 0.010743731 0.010757265 0.011112646#
# B     0.009637489 0.011124648 0.009180885 0.007369940#
# C     0.003963100 0.003415133 0.003475131 0.004810767#
# A:B   0.030098152 0.028058980 0.029255532 0.026209907#
# A:C   0.014525642 0.017676126 0.011776628 0.015121872#
# B:C   0.008776768 0.007361134 0.012778618 0.011673016#
# A:B:C 0.028325518 0.026322791 0.025015462 0.028084117#
# #
# $ci.lower#
#                 Y1           Y2           Y3          Y4#
# A     -0.024696372 -0.022652481 -0.025044769 -0.02483533#
# B     -0.016994122 -0.012701506 -0.017794683 -0.01851385#
# C     -0.004818983 -0.004803210 -0.005036759 -0.00473971#
# A:B   -0.050630879 -0.020748916 -0.042800196 -0.05018757#
# A:C   -0.018115924 -0.005741267 -0.022969925 -0.01656434#
# B:C   -0.018519275 -0.017098843 -0.013128393 -0.01599380#
# A:B:C -0.056155219 -0.030271445 -0.064343787 -0.05897510#
# #
# $ci.upper#
#                Y1          Y2          Y3         Y4#
# A     0.013339990 0.019495642 0.016886659 0.01582727#
# B     0.017768444 0.028120516 0.017824680 0.00932972#
# C     0.009180808 0.007472613 0.007192856 0.01060378#
# A:B   0.067717057 0.089475243 0.067995770 0.05160527#
# A:C   0.035648844 0.064471943 0.020926782 0.04190924#
# B:C   0.015859537 0.011089414 0.037268291 0.02875325#
# A:B:C 0.052278417 0.067811424 0.034426745 0.05062527#
# no effect sizes#
# Manova2.pb$multivariate$permutations[1,]#
# MANOVA effect sizes  bootstrapshould match original MANOVA#
Manova2.pb$multivariate$`effect size`[1,]$`effect size`#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
Manova2$multivariate$effect.sizes#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
ptm <- proc.time()#
Manova2.nb <- nbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
proc.time() - ptm#
Manova2.nb$univariate$`effect size`[1,]$os#
# $theta.hat#
#                 Y1           Y2           Y3            Y4#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# #
# $os$bias#
#               Y1          Y2          Y3         Y4#
# A     0.01523289 0.013705943 0.017656208 0.01741846#
# B     0.01035114 0.008035487 0.010197354 0.01114398#
# C     0.00308148 0.002315069 0.002450947 0.00321472#
# A:B   0.06334511 0.063054040 0.065548500 0.06707082#
# A:C   0.01548741 0.017555537 0.016684918 0.01687540#
# B:C   0.01064833 0.012759570 0.014202708 0.01339203#
# A:B:C 0.06430303 0.059429123 0.062047813 0.06520411#
# #
# $os$se#
#                Y1          Y2          Y3          Y4#
# A     0.011280071 0.012547464 0.012817480 0.013948874#
# B     0.011159835 0.012928146 0.010111572 0.008776835#
# C     0.005482621 0.004019749 0.003573847 0.006078847#
# A:B   0.032706781 0.031099554 0.029921892 0.028819966#
# A:C   0.015654530 0.020349679 0.013943306 0.016488256#
# B:C   0.009641517 0.010067734 0.016533855 0.013823896#
# A:B:C 0.026921887 0.026545009 0.024761527 0.026738494#
# #
# $os$ci.lower#
#                 Y1           Y2          Y3           Y4#
# A     -0.026806541 -0.025292185 -0.02887922 -0.028608813#
# B     -0.018745710 -0.014418875 -0.01911224 -0.020145451#
# C     -0.005778235 -0.005021451 -0.00516426 -0.005876048#
# A:B   -0.053643129 -0.026481010 -0.04398363 -0.052203756#
# A:C   -0.023051018 -0.011406703 -0.02689824 -0.019702258#
# B:C   -0.019372671 -0.021254314 -0.01897810 -0.019448229#
# A:B:C -0.056794241 -0.032271489 -0.06394902 -0.058777981#
# #
# $os$ci.upper#
#               Y1          Y2          Y3         Y4#
# A     0.01728361 0.023406280 0.021511086 0.02516584#
# B     0.02508243 0.033205742 0.019901057 0.01304749#
# C     0.01532233 0.009833557 0.007841911 0.01571607#
# A:B   0.07087834 0.092985379 0.073430965 0.05852476#
# A:C   0.03619728 0.068525130 0.025736751 0.04444319#
# B:C   0.01745616 0.017493364 0.046293234 0.03316605#
# A:B:C 0.04937453 0.068219046 0.034699641 0.04906812#
# MANOVA effect sizes for non parametric bootstrap should match original MANOVA#
Manova2.nb$multivariate$`effect size`[1,]$`effect size`#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
Manova2$multivariate$effect.sizes#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
# change names#
colnames(longdata)[1:3] <- c("behaviour", "drug", "genotype")  #
formula <- Y ~ behaviour + drug + genotype + behaviour*drug*genotype#
ptm <- proc.time()#
Manova3.pb <- pbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
proc.time() - ptm#
Manova2.pb$multivariate$`effect size`[1,]#
# $`effect size`#
#                              m.es.W   m.es.W.adj        m.os     m.os.adj#
# behaviour               0.006321495 -0.009662609 0.009339923 -0.035848080#
# drug                    0.008794802 -0.001778053 0.024358789 -0.003027631#
# genotype                0.007291175 -0.003297719 0.004652742 -0.010190156#
# behaviour:drug          0.074680195  0.012123363 0.216882839 -0.189788529#
# behaviour:genotype      0.024557383  0.008866617 0.079913105  0.037944229#
# drug:genotype           0.013033389  0.002505746 0.040898330  0.013976178#
# behaviour:drug:genotype 0.070785112  0.007964950 0.203641199 -0.209906529#
# #
# $bias#
#                             m.es.W m.es.W.adj       m.os   m.os.adj#
# behaviour               0.01855975 0.01885829 0.07147885 0.07473929#
# drug                    0.01264616 0.01278105 0.04846200 0.04982234#
# genotype                0.01288362 0.01302104 0.01288491 0.01307706#
# behaviour:drug          0.06299905 0.06725814 0.19085413 0.28996435#
# behaviour:genotype      0.01855467 0.01885314 0.06736398 0.07043673#
# drug:genotype           0.01266839 0.01280352 0.04780337 0.04914522#
# behaviour:drug:genotype 0.06305946 0.06732264 0.19338485 0.29380927#
# #
# $se#
#                              m.es.W  m.es.W.adj       m.os   m.os.adj#
# behaviour               0.007391676 0.007510577 0.02760328 0.02886237#
# drug                    0.006790988 0.006863426 0.02550344 0.02621932#
# genotype                0.013092887 0.013232545 0.01309469 0.01328996#
# behaviour:drug          0.016652622 0.017778433 0.04518877 0.06865521#
# behaviour:genotype      0.009686318 0.009842130 0.03426936 0.03583252#
# drug:genotype           0.008215331 0.008302962 0.03046648 0.03132168#
# behaviour:drug:genotype 0.017460286 0.018640699 0.04825305 0.07331077#
# #
# $ci.lower#
#                                m.es.W  m.es.W.adj         m.os    m.os.adj#
# behaviour               -0.0061966183 -0.02238209 -0.038325396 -0.08568761#
# drug                    -0.0026439821 -0.01333885 -0.019370453 -0.04798436#
# genotype                -0.0097900849 -0.02056118 -0.012429900 -0.02752754#
# behaviour:drug           0.0445032549 -0.02009371  0.131179364 -0.31999767#
# behaviour:genotype       0.0081987082 -0.00775520  0.020786843 -0.02387902#
# drug:genotype           -0.0003587838 -0.01102928 -0.009714395 -0.03805726#
# behaviour:drug:genotype  0.0375649177 -0.02750112  0.107546142 -0.35590358#
# #
# $ci.upper#
#                             m.es.W  m.es.W.adj       m.os    m.os.adj#
# behaviour               0.02223283 0.006504676 0.06804201  0.02553165#
# drug                    0.02481898 0.014417053 0.08372657  0.05800662#
# genotype                0.03829755 0.028039392 0.03566429  0.02128384#
# behaviour:drug          0.11057988 0.050450073 0.31050160 -0.04755370#
# behaviour:genotype      0.04432598 0.028953209 0.14856145  0.10972390#
# drug:genotype           0.03087657 0.020539256 0.10605600  0.08096284#
# behaviour:drug:genotype 0.10643812 0.046028299 0.29806086 -0.06645491#
Manova3.pb$multivariate$`effect size`[1,]#
# $`effect size`#
#                              m.es.W   m.es.W.adj        m.os     m.os.adj#
# behaviour               0.006321495 -0.009662609 0.009339923 -0.035848080#
# drug                    0.008794802 -0.001778053 0.024358789 -0.003027631#
# genotype                0.007291175 -0.003297719 0.004652742 -0.010190156#
# behaviour:drug          0.074680195  0.012123363 0.216882839 -0.189788529#
# behaviour:genotype      0.024557383  0.008866617 0.079913105  0.037944229#
# drug:genotype           0.013033389  0.002505746 0.040898330  0.013976178#
# behaviour:drug:genotype 0.070785112  0.007964950 0.203641199 -0.209906529#
# #
# $bias#
#                             m.es.W m.es.W.adj       m.os   m.os.adj#
# behaviour               0.01855975 0.01885829 0.07147885 0.07473929#
# drug                    0.01264616 0.01278105 0.04846200 0.04982234#
# genotype                0.01288362 0.01302104 0.01288491 0.01307706#
# behaviour:drug          0.06299905 0.06725814 0.19085413 0.28996435#
# behaviour:genotype      0.01855467 0.01885314 0.06736398 0.07043673#
# drug:genotype           0.01266839 0.01280352 0.04780337 0.04914522#
# behaviour:drug:genotype 0.06305946 0.06732264 0.19338485 0.29380927#
# #
# $se#
#                              m.es.W  m.es.W.adj       m.os   m.os.adj#
# behaviour               0.007391676 0.007510577 0.02760328 0.02886237#
# drug                    0.006790988 0.006863426 0.02550344 0.02621932#
# genotype                0.013092887 0.013232545 0.01309469 0.01328996#
# behaviour:drug          0.016652622 0.017778433 0.04518877 0.06865521#
# behaviour:genotype      0.009686318 0.009842130 0.03426936 0.03583252#
# drug:genotype           0.008215331 0.008302962 0.03046648 0.03132168#
# behaviour:drug:genotype 0.017460286 0.018640699 0.04825305 0.07331077#
# #
# $ci.lower#
#                                m.es.W  m.es.W.adj         m.os    m.os.adj#
# behaviour               -0.0061966183 -0.02238209 -0.038325396 -0.08568761#
# drug                    -0.0026439821 -0.01333885 -0.019370453 -0.04798436#
# genotype                -0.0097900849 -0.02056118 -0.012429900 -0.02752754#
# behaviour:drug           0.0445032549 -0.02009371  0.131179364 -0.31999767#
# behaviour:genotype       0.0081987082 -0.00775520  0.020786843 -0.02387902#
# drug:genotype           -0.0003587838 -0.01102928 -0.009714395 -0.03805726#
# behaviour:drug:genotype  0.0375649177 -0.02750112  0.107546142 -0.35590358#
# #
# $ci.upper#
#                             m.es.W  m.es.W.adj       m.os    m.os.adj#
# behaviour               0.02223283 0.006504676 0.06804201  0.02553165#
# drug                    0.02481898 0.014417053 0.08372657  0.05800662#
# genotype                0.03829755 0.028039392 0.03566429  0.02128384#
# behaviour:drug          0.11057988 0.050450073 0.31050160 -0.04755370#
# behaviour:genotype      0.04432598 0.028953209 0.14856145  0.10972390#
# drug:genotype           0.03087657 0.020539256 0.10605600  0.08096284#
# behaviour:drug:genotype 0.10643812 0.046028299 0.29806086 -0.06645491#
ptm <- proc.time()#
Manova3.nb <- nbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
proc.time() - ptm#
Manova3.nb$univariate$`effect size`[1,]$os$theta.hat#
#                                   Y1           Y2           Y3            Y4#
# behaviour               -0.009892405 -0.006881247 -0.010064481 -0.0087910552#
# drug                    -0.003749422  0.003227373 -0.005750012 -0.0093441813#
# genotype                -0.001663671 -0.002057491 -0.002506532 -0.0010343026#
# behaviour:drug           0.004864068  0.030287309  0.009226276 -0.0042855153#
# behaviour:genotype       0.002714171  0.022804152 -0.006424137  0.0067907933#
# drug:genotype           -0.007316264 -0.007784891  0.006310624  0.0004126559#
# behaviour:drug:genotype -0.008360759  0.015870492 -0.019819763 -0.0099409477#
# check calculates df correctly #
# when weird (indirect)#
colnames(longdata)[1:3] <- c("A", "B", "C")  #
formula <- Y ~ A + C + A*B + B*C#
Manova4b <- MANOVA(formula, longdata, ANOVA.effect.size="pes")	# default current os#
fitIIb <- lm(Y ~ A + C + A*B + B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIIb, type="II")#
summary(Manova.test, univariate=TRUE)#
# pes <- F/(F + dfe/df)#
n.terms <- dim(Manova4b$univariate$`sum of squares`)[1]-1#
df <- Manova4b$univariate$`sum of squares`[1:n.terms,"df"]#
dfe <- Manova4b$univariate$`sum of squares`[n.terms+1,"df"]#
SS <- Manova4b$univariate$`sum of squares`[1:n.terms,"Y1"]#
SSe <- Manova4b$univariate$`sum of squares`[n.terms+1,"Y1"]#
F <- (SS/df) / (SSe/dfe)#
F#
#         A         C         B       A:B       C:B #
# 0.3902152 0.3846345 0.6256947 1.0709598 0.3677693#
Manova4b$univariate$F#
#            Y1        Y2         Y3        Y4#
# A   0.3902152 0.5150278 0.39173533 0.4590230#
# C   0.3846345 0.1646967 0.07656816 0.6191110#
# B   0.6256947 1.0927746 0.44354782 0.1787889#
# A:B 1.0709598 1.5086530 1.18973951 0.9585751#
# C:B 0.3677693 0.2887029 1.69602197 1.0032087#
F/(F + dfe/df)#
#           A           C           B         A:B         C:B #
# 0.006839056 0.001130000 0.007307324 0.070283901 0.004308058#
Manova4b$univariate$pes[,"Y1"]#
#           A           C           B         A:B         C:B #
# 0.006839056 0.001130000 0.007307324 0.070283901 0.004308058 #
# calculate pes by bootstrap (nb pes is test pes; bootstrap used to calculate se and ci#
Manova5b.pb <- pbMANOVA(formula, longdata, H0=FALSE, ANOVA.effect.size = "pes", Nreps=1e3)#
Manova5b.nb <- nbMANOVA(formula, longdata, H0=FALSE, ANOVA.effect.size = "pes", Nreps=1e3)#
Manova5b.pb$univariate$`effect size`[1,]$pes$theta.hat#
#              Y1           Y2           Y3          Y4#
# A   0.006839056 0.0090068647 0.0068655153 0.008035316#
# C   0.001130000 0.0004841675 0.0002251498 0.001817605#
# B   0.007307324 0.0126929884 0.0051911212 0.002098984#
# A:B 0.070283901 0.0962438421 0.0774751267 0.063375851#
# C:B 0.004308058 0.0033850071 0.0195628580 0.011664782#
Manova5b.nb$univariate$`effect size`[1,]$pes$theta.hat#
#              Y1           Y2           Y3          Y4#
# A   0.006839056 0.0090068647 0.0068655153 0.008035316#
# C   0.001130000 0.0004841675 0.0002251498 0.001817605#
# B   0.007307324 0.0126929884 0.0051911212 0.002098984#
# A:B 0.070283901 0.0962438421 0.0774751267 0.063375851#
# C:B 0.004308058 0.0033850071 0.0195628580 0.011664782#
Manova4b$univariate$pes#
#              Y1           Y2           Y3          Y4#
# A   0.006839056 0.0090068419 0.0068654180 0.008035246#
# C   0.001130000 0.0004841883 0.0002251525 0.001817634#
# B   0.007307324 0.0126930093 0.0051911482 0.002099032#
# A:B 0.070283901 0.0962438150 0.0774748183 0.063375355#
# C:B 0.004308058 0.0033850273 0.0195630311 0.011664875#
# if pes is right then must be calculating dfe correctly#
# model <- Y ~ A + B + C + A*B*C#
# Manova3 <- MANOVA.f(Y, A=A, B=B, C=C, model, TYPE = "III", TEST="all", ANOVA=TRUE, ANOVA.effect.size="all", show.power=TRUE, alpha=0.05)#
formula <- Y ~ A + B + C + A*B*C#
Manova3 <- MANOVA(formula, longdata, TYPE="III", TEST="all")#
Manova3$multivariate$tests$Pillai#
#         test.stat         F df  dfe         p          es#
# A     0.031565874 0.4109690 24 1240 0.9949033 0.007891469#
# B     0.036539759 0.7144846 16 1240 0.7813194 0.009134940#
# C     0.007173599 0.5545519  4  307 0.6958421 0.007173599#
# A:B   0.298163370 1.0403692 96 1240 0.3789574 0.074540842#
# A:C   0.094711517 1.2530261 24 1240 0.1855365 0.023677879#
# B:C   0.049747518 0.9759965 16 1240 0.4807921 0.012436879#
# A:B:C 0.282356334 0.9810253 96 1240 0.5337190 0.070589084#
Manova3$multivariate$tests$Wilks#
#       test.stat         F df       dfe         p          es#
# A     0.9687420 0.4085394 24 1072.2051 0.9950992 0.007907794#
# B     0.9638229 0.7117807 16  938.5381 0.7838786 0.009169637#
# C     0.9928264 0.5545519  4  307.0000 0.6958421 0.007173599#
# A:B   0.7325609 1.0374998 96 1218.6942 0.3861568 0.074852613#
# A:C   0.9077732 1.2564732 24 1072.2051 0.1833348 0.023899932#
# B:C   0.9509327 0.9740160 16  938.5381 0.4832653 0.012499227#
# A:B:C 0.7455292 0.9768058 96 1218.6942 0.5450587 0.070785112#
Manova3$multivariate$tests$Hotelling#
#         test.stat         F df  dfe         p          es#
# A     0.031949883 0.4066954 24 1222 0.9952893 0.007924177#
# B     0.037159584 0.7095158 16 1222 0.7864510 0.009204388#
# C     0.007225432 0.5545519  4  307 0.6958421 0.007173599#
# A:B   0.325099221 1.0345605 96 1222 0.3934697 0.075165725#
# A:C   0.098882728 1.2586947 24 1222 0.1811677 0.024124312#
# B:C   0.050886164 0.9716077 16 1222 0.4857890 0.012561736#
# A:B:C 0.305617414 0.9725638 96 1222 0.5564549 0.070981089#
# export data for SPSS#
# data2 <- cbind(A=A, B=B, C=C, Y);#
# write.table(data2, file = "data2.csv",  sep = ",", row.names=FALSE)#
# Multivariate Testsa						#
# 		Effect			Value		F		Hypothesis df	Error df	Sig.#
# Intercept	Pillai's Trace		.988		6273.904b	4.000			307.000	.000#
# 		Wilks' Lambda		.012		6273.904b	4.000			307.000	.000#
# 		Hotelling's Trace		81.745	6273.904b	4.000			307.000	.000#
# 		Roy's Largest Root	81.745	6273.904b	4.000			307.000	.000#
# A		Pillai's Trace		.032		.411		24.000		1240.000	.995#
# 		Wilks' Lambda		.969		.409		24.000		1072.205	.995#
# 		Hotelling's Trace		.032		.407		24.000		1222.000	.995#
# 		Roy's Largest Root	.018		.913c		6.000			310.000	.486#
# B		Pillai's Trace		.037		.714		16.000		1240.000	.781#
# 		Wilks' Lambda		.964		.712		16.000		938.538	.784#
# 		Hotelling's Trace		.037		.710		16.000		1222.000	.786#
# 		Roy's Largest Root	.021		1.644c	4.000			310.000	.163#
# C		Pillai's Trace		.007		.555b		4.000			307.000	.696#
# 		Wilks' Lambda		.993		.555b		4.000			307.000	.696#
# 		Hotelling's Trace		.007		.555b		4.000			307.000	.696#
# 		Roy's Largest Root	.007		.555b		4.000			307.000	.696#
# A * B	Pillai's Trace		.298		1.040		96.000		1240.000	.379#
# 		Wilks' Lambda		.733		1.037		96.000		1218.694	.386#
# 		Hotelling's Trace		.325		1.035		96.000		1222.000	.393#
# 		Roy's Largest Root	.123		1.595c	24.000		310.000	.040#
# A * C	Pillai's Trace		.095		1.253		24.000		1240.000	.186#
# 		Wilks' Lambda		.908		1.256		24.000		1072.205	.183#
# 		Hotelling's Trace		.099		1.259		24.000		1222.000	.181#
# 		Roy's Largest Root	.061		3.128c	6.000			310.000	.005#
# B * C	Pillai's Trace		.050		.976		16.000		1240.000	.481#
# 		Wilks' Lambda		.951		.974		16.000		938.538	.483#
# 		Hotelling's Trace		.051		.972		16.000		1222.000	.486#
# 		Roy's Largest Root	.029		2.273c	4.000			310.000	.061#
# A * B * C	Pillai's Trace		.282		.981		96.000		1240.000	.534#
# 		Wilks' Lambda		.746		.977		96.000		1218.694	.545#
# 		Hotelling's Trace		.306		.973		96.000		1222.000	.556#
# 		Roy's Largest Root	.106		1.369c	24.000		310.000	.119#
# a Design: Intercept + A + B + C + A * B + A * C + B * C + A * B * C						#
# b Exact statistic						#
# c The statistic is an upper bound on F that yields a lower bound on the significance level.						#
# model <- Y ~ A; MANOVA.f(Y, model, TYPE = "II", TEST="Wilks", ANOVA=TRUE, ANOVA.effect.size="os", show.power=FALSE, alpha=0.05)#
N.tests <- length(Manova2$univariate$F[,1])#
effect.size.types <- c("es","pes","eps","peps","os","pos", "cf", "cf.pop")#
N.eff <- length( effect.size.types )#
N <- dim(Y)[1]#
df <- Manova2$univariate$`sum of squares`[1:N.tests,1]#
dfe <- Manova2$univariate$`sum of squares`[N.tests+1,1]	#
eff.sizes <- lapply(1:N.eff, function(iii){#
	effect.size.type <- effect.size.types[iii]#
	sapply(1:m, function(ii){#
		F <- Manova2$univariate$F[,ii]#
		SS <- Manova2$univariate$`sum of squares`[1:N.tests,ii+1]#
		SSe <- Manova2$univariate$`sum of squares`[N.tests+1,ii+1]#
		effect.size.calculator(F, df, dfe, N=N, effect.size.type=effect.size.type)#
	})#
})#
names(eff.sizes) <- effect.size.types#
eff.sizes#
# $es#
#              [,1]         [,2]         [,3]        [,4]#
# A     0.006283533 0.0080524881 0.0062002068 0.007432117#
# B     0.007042220 0.0132026394 0.0050956422 0.001461756#
# C     0.001032278 0.0004291737 0.0002019809 0.001670688#
# A:B   0.069687809 0.0901662846 0.0744193355 0.060691041#
# A:C   0.018924152 0.0378119113 0.0098504450 0.023056019#
# B:C   0.003465747 0.0021629273 0.0171888713 0.011244960#
# A:B:C 0.056427269 0.0757133332 0.0452942247 0.055019573#
# $pes#
#              [,1]        [,2]         [,3]        [,4]#
# A     0.007450059 0.010316908 0.0073120001 0.008776129#
# B     0.008342092 0.016804437 0.0060172081 0.001738354#
# C     0.001231587 0.000555284 0.0002398962 0.001986326#
# A:B   0.076848151 0.104525165 0.0812288624 0.067425883#
# A:C   0.022106075 0.046665635 0.0115669892 0.026732241#
# B:C   0.004122931 0.002792228 0.0200117681 0.013218964#
# A:B:C 0.063148530 0.089266214 0.0510620096 0.061512637#
# $eps#
#               [,1]         [,2]         [,3]         [,4]#
# A     -0.009919119 -0.006898375 -0.010091715 -0.008814796#
# B     -0.003759547  0.003235398 -0.005765639 -0.009369519#
# C     -0.001668164 -0.002062637 -0.002513339 -0.001037131#
# A:B    0.004877204  0.030362834  0.009251648 -0.004296612#
# A:C    0.002721500  0.022861049 -0.006441477  0.006809106#
# B:C   -0.007336021 -0.007804315  0.006327590  0.000413685#
# A:B:C -0.008383337  0.015909882 -0.019873463 -0.009968079#
# $peps#
#               [,1]         [,2]         [,3]          [,4]#
# A     -0.011760585 -0.008838249 -0.011901316 -0.0104088488#
# B     -0.004453494  0.004118043 -0.006808376 -0.0111424419#
# C     -0.001990247 -0.002668731 -0.002985136 -0.0012330727#
# A:B    0.005378331  0.035198081  0.010098194 -0.0047734037#
# A:C    0.003179096  0.028214002 -0.007563972  0.0078948004#
# B:C   -0.008727096 -0.010074969  0.007366759  0.0004863057#
# A:B:C -0.009381907  0.018757792 -0.022404157 -0.0111444489#
# $os#
#               [,1]         [,2]         [,3]          [,4]#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# $pos#
#               [,1]         [,2]         [,3]         [,4]#
# A     -0.009760522 -0.007338778 -0.009877086 -0.008640632#
# B     -0.003677148  0.003405239 -0.005619224 -0.009189392#
# C     -0.001628272 -0.002183088 -0.002441775 -0.001008947#
# A:B    0.004730349  0.031069643  0.008886644 -0.004193148#
# A:C    0.002645085  0.023574191 -0.006282037  0.006573891#
# B:C   -0.007200423 -0.008310564  0.006095068  0.000401876#
# A:B:C -0.008236848  0.016524634 -0.019638813 -0.009782187#
# $cf#
#             [,1]       [,2]       [,3]       [,4]#
# A     0.08663705 0.10210022 0.08582458 0.09409480#
# B     0.09171841 0.13073505 0.07780510 0.04172985#
# C     0.03511560 0.02357101 0.01549044 0.04461255#
# A:B   0.28852280 0.34165182 0.29733875 0.26888814#
# A:C   0.15035225 0.22124627 0.10817740 0.16573015#
# B:C   0.06434283 0.05291546 0.14290002 0.11574129#
# A:B:C 0.25962484 0.31307460 0.23196905 0.25601650#
# $cf.pop#
#             [,1]       [,2]       [,3]       [,4]#
# A     0.00000000 0.00000000 0.00000000 0.00000000#
# B     0.00000000 0.05845404 0.00000000 0.00000000#
# C     0.00000000 0.00000000 0.00000000 0.00000000#
# A:B   0.06894078 0.17906959 0.09469068 0.00000000#
# A:C   0.05149855 0.15538131 0.00000000 0.08134736#
# B:C   0.00000000 0.00000000 0.07830993 0.02005087#
# A:B:C 0.00000000 0.12962363 0.00000000 0.00000000#
Manova2$univariate$effect.sizes#
# $es#
#                Y1           Y2           Y3          Y4#
# A     0.006283533 0.0080524881 0.0062002068 0.007432117#
# B     0.007042220 0.0132026394 0.0050956422 0.001461756#
# C     0.001032278 0.0004291737 0.0002019809 0.001670688#
# A:B   0.069687809 0.0901662846 0.0744193355 0.060691041#
# A:C   0.018924152 0.0378119113 0.0098504450 0.023056019#
# B:C   0.003465747 0.0021629273 0.0171888713 0.011244960#
# A:B:C 0.056427269 0.0757133332 0.0452942247 0.055019573#
# $pes#
#                Y1          Y2           Y3          Y4#
# A     0.007450059 0.010316908 0.0073120001 0.008776129#
# B     0.008342092 0.016804437 0.0060172081 0.001738354#
# C     0.001231587 0.000555284 0.0002398962 0.001986326#
# A:B   0.076848151 0.104525165 0.0812288624 0.067425883#
# A:C   0.022106075 0.046665635 0.0115669892 0.026732241#
# B:C   0.004122931 0.002792228 0.0200117681 0.013218964#
# A:B:C 0.063148530 0.089266214 0.0510620096 0.061512637#
# $eps#
#                 Y1           Y2           Y3           Y4       #
# A     -0.009919119 -0.006898375 -0.010091715 -0.008814796#
# B     -0.003759547  0.003235398 -0.005765639 -0.009369519#
# C     -0.001668164 -0.002062637 -0.002513339 -0.001037131#
# A:B    0.004877204  0.030362834  0.009251648 -0.004296612#
# A:C    0.002721500  0.022861049 -0.006441477  0.006809106#
# B:C   -0.007336021 -0.007804315  0.006327590  0.000413685#
# A:B:C -0.008383337  0.015909882 -0.019873463 -0.009968079#
# $peps#
#                 Y1           Y2           Y3            Y4#
# A     -0.011760585 -0.008838249 -0.011901316 -0.0104088488#
# B     -0.004453494  0.004118043 -0.006808376 -0.0111424419#
# C     -0.001990247 -0.002668731 -0.002985136 -0.0012330727#
# A:B    0.005378331  0.035198081  0.010098194 -0.0047734037#
# A:C    0.003179096  0.028214002 -0.007563972  0.0078948004#
# B:C   -0.008727096 -0.010074969  0.007366759  0.0004863057#
# A:B:C -0.009381907  0.018757792 -0.022404157 -0.0111444489#
# $os#
#                 Y1           Y2           Y3            Y4#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# $pos#
#                 Y1           Y2           Y3           Y4#
# A     -0.009760522 -0.007338778 -0.009877086 -0.008640632#
# B     -0.003677148  0.003405239 -0.005619224 -0.009189392#
# C     -0.001628272 -0.002183088 -0.002441775 -0.001008947#
# A:B    0.004730349  0.031069643  0.008886644 -0.004193148#
# A:C    0.002645085  0.023574191 -0.006282037  0.006573891#
# B:C   -0.007200423 -0.008310564  0.006095068  0.000401876#
# A:B:C -0.008236848  0.016524634 -0.019638813 -0.009782187#
# $cf#
#               Y1         Y2         Y3         Y4#
# A     0.08663705 0.10210022 0.08582458 0.09409480#
# B     0.09171841 0.13073505 0.07780510 0.04172985#
# C     0.03511560 0.02357101 0.01549044 0.04461255#
# A:B   0.28852280 0.34165182 0.29733875 0.26888814#
# A:C   0.15035225 0.22124627 0.10817740 0.16573015#
# B:C   0.06434283 0.05291546 0.14290002 0.11574129#
# A:B:C 0.25962484 0.31307460 0.23196905 0.25601650#
# $cf.pop#
#               Y1         Y2         Y3         Y4#
# A     0.00000000 0.00000000 0.00000000 0.00000000#
# B     0.00000000 0.05845404 0.00000000 0.00000000#
# C     0.00000000 0.00000000 0.00000000 0.00000000#
# A:B   0.06894078 0.17906959 0.09469068 0.00000000#
# A:C   0.05149855 0.15538131 0.00000000 0.08134736#
# B:C   0.00000000 0.00000000 0.07830993 0.02005087#
# A:B:C 0.00000000 0.12962363 0.00000000 0.00000000#
F.values <- lapply(1:N.eff, function(iii){#
	effect.size.type <- effect.size.types[iii]#
	effect.size <- Manova2$univariate$effect.sizes[[effect.size.type]]#
	sapply(1:m, function(ii){#
		F.effect.size.calculator(effect.size=effect.size[,ii], df=df, dfe=dfe, N=N, effect.size.type=effect.size.type)#
	})#
})#
names(F.values) <- effect.size.types#
F.values$es#
#            [,1]      [,2]       [,3]      [,4]#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
Manova2$univariate$F#
#              Y1        Y2         Y3        Y4#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
Manova1$multivariate.tests$A$SSPH#
#          [,1]      [,2]      [,3]      [,4]#
# [1,] 933.7091  643.8352  680.0428  473.1853#
# [2,] 643.8352 1155.4145 1047.4997  667.8090#
# [3,] 680.0428 1047.4997 1173.5965  840.8618#
# [4,] 473.1853  667.8090  840.8618 1085.7157#
Manova2$multivariate$SSPH$A#
#          Y1        Y2        Y3        Y4#
# Y1 933.7091  643.8352  680.0428  473.1853#
# Y2 643.8352 1155.4145 1047.4997  667.8090#
# Y3 680.0428 1047.4997 1173.5965  840.8618#
# Y4 473.1853  667.8090  840.8618 1085.7157#
Manova1$multivariate.tests$B$SSPH#
#           [,1]      [,2]       [,3]       [,4]#
# [1,] 1046.4472  716.6249 -511.81625 -119.49546#
# [2,]  716.6249 1894.3932  529.21761 -336.08074#
# [3,] -511.8163  529.2176  964.53783    3.10417#
# [4,] -119.4955 -336.0807    3.10417  213.54682#
Manova2$multivariate$SSPH$B#
#           Y1        Y2         Y3         Y4#
# Y1 1046.4472  716.6249 -511.81625 -119.49546#
# Y2  716.6249 1894.3932  529.21761 -336.08074#
# Y3 -511.8163  529.2176  964.53783    3.10417#
# Y4 -119.4955 -336.0807    3.10417  213.54682#
Manova1$multivariate.tests$C$SSPH#
#            [,1]      [,2]      [,3]      [,4]#
# [1,]  153.39258 -97.19243  76.58072 -193.4894#
# [2,]  -97.19243  61.58295 -48.52299  122.5985#
# [3,]   76.58072 -48.52299  38.23266  -96.5989#
# [4,] -193.48935 122.59850 -96.59890  244.0674#
Manova2$multivariate$SSPH$C#
#            Y1        Y2        Y3        Y4#
# Y1  153.39258 -97.19243  76.58072 -193.4894#
# Y2  -97.19243  61.58295 -48.52299  122.5985#
# Y3   76.58072 -48.52299  38.23266  -96.5989#
# Y4 -193.48935 122.59850 -96.59890  244.0674#
Manova1$multivariate.tests$'A:B'$SSPH#
#           [,1]      [,2]      [,3]     [,4]#
# [1,] 10355.344  6068.672  3992.285 3917.855#
# [2,]  6068.672 12937.569  7267.808 4557.909#
# [3,]  3992.285  7267.808 14086.491 7214.207#
# [4,]  3917.855  4557.909  7214.207 8866.009#
Manova2$multivariate$SSPH$'A:B'#
#           Y1        Y2        Y3       Y4#
# Y1 10355.344  6068.672  3992.285 3917.855#
# Y2  6068.672 12937.569  7267.808 4557.909#
# Y3  3992.285  7267.808 14086.491 7214.207#
# Y4  3917.855  4557.909  7214.207 8866.009#
Manova1$multivariate.tests$'A:C'$SSPH#
#           [,1]     [,2]      [,3]      [,4]#
# [1,] 2812.0570 2875.919  697.4654  472.3167#
# [2,] 2875.9188 5425.460 1447.2806 -423.3800#
# [3,]  697.4654 1447.281 1864.5341 1627.5914#
# [4,]  472.3167 -423.380 1627.5914 3368.1620#
Manova2$multivariate$SSPH$'A:C'#
#           Y1       Y2        Y3        Y4#
# Y1 2812.0570 2875.919  697.4654  472.3167#
# Y2 2875.9188 5425.460 1447.2806 -423.3800#
# Y3  697.4654 1447.281 1864.5341 1627.5914#
# Y4  472.3167 -423.380 1627.5914 3368.1620#
Manova1$multivariate.tests$'B:C'$SSPH#
#            [,1]       [,2]       [,3]      [,4]#
# [1,]  514.99679  -28.63097 -374.31638 -585.7867#
# [2,]  -28.63097  310.35277  -29.83564 -235.4005#
# [3,] -374.31638  -29.83564 3253.64728  548.5185#
# [4,] -585.78670 -235.40049  548.51845 1642.7390#
Manova2$multivariate$SSPH$'B:C'#
#            Y1         Y2         Y3        Y4#
# Y1  514.99679  -28.63097 -374.31638 -585.7867#
# Y2  -28.63097  310.35277  -29.83564 -235.4005#
# Y3 -374.31638  -29.83564 3253.64728  548.5185#
# Y4 -585.78670 -235.40049  548.51845 1642.7390#
Manova1$multivariate.tests$'A:B:C'$SSPH#
#          [,1]      [,2]     [,3]     [,4]#
# [1,] 8384.878  3737.000 1225.204 1088.891#
# [2,] 3737.000 10863.807 4190.763 2090.254#
# [3,] 1225.204  4190.763 8573.550 2080.343#
Manova2$multivariate$SSPH$'A:B:C'#
#          Y1        Y2       Y3       Y4#
# Y1 8384.878  3737.000 1225.204 1088.891#
# Y2 3737.000 10863.807 4190.763 2090.254#
# Y3 1225.204  4190.763 8573.550 2080.343#
# Y4 1088.891  2090.254 2080.343 8037.596#
Manova1$multivariate.tests$'A:B:C'$SSPE#
#            [,1]      [,2]      [,3]       [,4]#
# [1,] 124395.375  48964.95  20321.15   9174.277#
# [2,]  48964.952 110837.18  59000.44  26435.177#
# [3,]  20321.147  59000.44 159331.51  65634.985#
# [4,]   9174.277  26435.18  65634.99 122627.688#
Manova2$multivariate$SSPE#
#            Y1        Y2        Y3         Y4#
# Y1 124395.375  48964.95  20321.15   9174.277#
# Y2  48964.952 110837.18  59000.44  26435.177#
# Y3  20321.147  59000.44 159331.51  65634.985#
# Y4   9174.277  26435.18  65634.99 122627.688#
Manova1$multivariate.tests$'A:B:C'#
# Sum of squares and products for the hypothesis:#
#          [,1]      [,2]     [,3]     [,4]#
# [1,] 8384.878  3737.000 1225.204 1088.891#
# [2,] 3737.000 10863.807 4190.763 2090.254#
# [3,] 1225.204  4190.763 8573.550 2080.343#
# [4,] 1088.891  2090.254 2080.343 8037.596#
# #
# Sum of squares and products for error:#
#            [,1]      [,2]      [,3]       [,4]#
# [1,] 124395.375  48964.95  20321.15   9174.277#
# [2,]  48964.952 110837.18  59000.44  26435.177#
# [3,]  20321.147  59000.44 159331.51  65634.985#
# [4,]   9174.277  26435.18  65634.99 122627.688#
# #
# Multivariate Tests: A:B:C#
#                  Df test stat  approx F num Df   den Df  Pr(>F)#
# Pillai           24 0.2823563 0.9810253     96 1240.000 0.53372#
# Wilks            24 0.7455292 0.9768058     96 1218.694 0.54506#
# Hotelling-Lawley 24 0.3056174 0.9725638     96 1222.000 0.55645#
# Roy              24 0.1059790 1.3688958     24  310.000 0.11930#
Manova2$multivariate$Wilks#
#       test.stat         F df       dfe         p          es#
# A     0.9749528 0.3260270 24 1072.2051 0.9991978 0.006321495#
# B     0.9652822 0.6823864 16  938.5381 0.8134232 0.008794802#
# C     0.9927088 0.5637078  4  307.0000 0.6891757 0.007291175#
# A:B   0.7331071 1.0349161 96 1218.6942 0.3925947 0.074680195#
# A:C   0.9053300 1.2919714 24 1072.2051 0.1572833 0.024557383#
# B:C   0.9488768 1.0162763 16  938.5381 0.4362680 0.013033389#
# A:B:C 0.7455292 0.9768058 96 1218.6942 0.5450587 0.070785112#
# car seems to be wrong for the calculation of some F values#
# at a guess it is taking the preceding df for wrong values#
# I need to check this further#
# but I am correct by Anova#
fitIV <- lm(Y ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIV, type="II")#
# summary(Manova.test, univariate=TRUE)#
summary(Manova.test, univariate=TRUE)[[8]]#
Manova2$univariate$`sum of squares`#
Manova2$univariate$F#
Manova2$univariate$`Pr(>F)`#
summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,2:5]#
summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,1]#
# car error#
# this gives the correct F values from car numbers#
MS <- summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,2:5] / #
matrix(rep(summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,1],each=4),byrow=TRUE, ncol=4)#
MSe <- summary(Manova.test, univariate=TRUE)[[8]][[1]][8,2:5] / #
summary(Manova.test, univariate=TRUE)[[8]][[1]][8,1] #
MS / matrix(rep(MSe, each=7), ncol=4)#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
Manova2$univariate$F#
#              Y1        Y2         Y3        Y4#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
# using ANOVA to confirm#
sapply(1:m, function(iii) Anova(lm(Y[,iii] ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum)), type="II")[1:7,"F value"] )#
#           [,1]      [,2]       [,3]      [,4]#
# [1,] 0.3878089 0.5385969 0.38056940 0.4574480#
# [2,] 0.6519507 1.3246031 0.46915664 0.1349570#
# [3,] 0.3822626 0.1722337 0.07438568 0.6169867#
# [4,] 1.0752532 1.5077104 1.14196680 0.9338857#
# [5,] 1.1679663 2.5290789 0.60462142 1.4191015#
# [6,] 0.3208500 0.2170036 1.58258230 1.0381936#
# [7,] 0.8706487 1.2660362 0.69504116 0.8466158#
lapply(1:m, function(iii) Anova(lm(Y[,iii] ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum)), type="II") )#
# could just do 4 ANOVAs #
# if Y is simply one column #
formula <- Y ~ A + B + C + A*B*C#
sapply(1: dim(Y)[2], function(ii) MANOVA(formula, longdata[,c(1:3,ii+3)])$ANOVA[,"p"] )#
           [,1]       [,2]      [,3]      [,4]#
A     0.8866611 0.77875718 0.8912229 0.8394840#
B     0.6258928 0.26064757 0.7583703 0.9693790#
C     0.5368488 0.67842133 0.7852367 0.4327692#
A:B   0.3708548 0.06241955 0.2960560 0.5555078#
A:C   0.3232311 0.02097027 0.7266195 0.2067099#
B:C   0.8639366 0.92888217 0.1787353 0.3875895#
A:B:C 0.6428363 0.18475070 0.8563287 0.6755199#
Manova2$univariate$`Pr(>F)`#
             Y1         Y2        Y3        Y4#
A     0.8866611 0.77875718 0.8912229 0.8394840#
B     0.6258928 0.26064757 0.7583703 0.9693790#
C     0.5368488 0.67842133 0.7852367 0.4327692#
A:B   0.3708548 0.06241955 0.2960560 0.5555078#
A:C   0.3232311 0.02097027 0.7266195 0.2067099#
B:C   0.8639366 0.92888217 0.1787353 0.3875895#
A:B:C 0.6428363 0.18475070 0.8563287 0.6755199#
formula <- Y ~ A + B + C#
Manova2 <- MANOVA(formula, longdata, TEST="all")#
Manova2$multivariate$tests$Pillai#
   test.stat         F df  dfe         p          es#
A 0.02181492 0.3363296 24 1472 0.9989738 0.005453729#
B 0.02742761 0.6351905 16 1472 0.8572654 0.006856903#
C 0.00644906 0.5922965  4  365 0.6684200 0.006449060#
Manova2$multivariate$tests$Wilks#
  test.stat         F df      dfe         p          es#
A 0.9783289 0.3345706 24 1274.543 0.9990118 0.005462361#
B 0.9727797 0.6327857 16 1115.731 0.8591075 0.006875672#
C 0.9935509 0.5922965  4  365.000 0.6684200 0.006449060#
Manova2$univariate$`Pr(>F)`#
# Type II/III sum of squares#
library(car)#
fitII <- lm(Y ~ A+B+C)#
Manova.test <- Anova(fitII, type="II")#
summary(Manova.test, univariate=TRUE)#
############################
rm( list=ls(all=TRUE ) )#
library( ANOVA.boot )#
model <- Y ~ A + B + C + A*B*C#
n.A <- 5#
n.B <- 3#
n.C <- 2#
n <- 4 	# sample size in each group#
N.var <- 3#
mu.m <- c(50, 100, 150)#
sd.m <-  c(5, 10, 15)#
set.seed(42)#
rel.A <- matrix( rep(1, n.A*N.var), ncol=n.A )#
rel.B <- matrix( rep(1, n.B*N.var), ncol=n.B )#
rel.C <- matrix( rep(1, n.C*N.var), ncol=n.C )#
# rel.A[3, 2]=1.1; rel.B[3, 3]=1.1; rel.C[3, 2]=1.1#
rel.amplitudes <- list(A=rel.A, B=rel.B, C=rel.C)#
p = 0.3#
levs <- c(A=n.A, B=n.B, C=n.C)#
groups <-  names(levs)#
n.groups <- length(groups)#
# set up nesting#
rep.each <- c(1, sapply(1:(n.groups-1), function(ii) prod( levs[1:ii] ) ) )#
rep.times <- c( sapply(2:n.groups, function(ii) prod( levs[ii:n.groups] ) ), 1)#
factors <- lapply(1:n.groups, function(ii){#
	rep( rep(seq_len(levs[ii]), each=rep.each[ii]), times = rep.times[ii] ) #
})#
names(factors) <- groups #
scales <- factors#
factors1 <- factors#
factors <- lapply(1:n.groups, function(iii) rep(factors[[iii]], each=n) )#
factors <- lapply(factors, factor)#
for(ii in (1:n.groups) ){ assign(groups[ii], factors[[ii]]) }#
scales <- lapply(1:N.var, function(i){#
	scales.tmp <- scales#
	for(ii in (1:n.groups) ) {#
		for( iii in (1:levs[ii]) ) { scales.tmp[[ii]] <- replace(scales.tmp[[ii]], scales.tmp[[ii]]==iii, rel.amplitudes[[ii]][i,iii]); scales.tmp[[ii]] }#
	}#
	scales.tmp#
})#
scales <- lapply( 1:N.var, function(iii) do.call(cbind, scales[[iii]]) )#
scales <- sapply( 1:N.var, function(iii) apply(scales[[iii]] ,1,prod) )#
g <- interaction(A,B,C)#
# scales is total no of groups ( prod(levs) ) by N.var matrix that specifies average amplitude to simulate#
N <- prod(levs)		# dim(scales)[1]#
mu.m.scales <- scales * matrix( rep(mu.m, N), byrow=TRUE, ncol=N.var )#
N <- n.A*n.B*n.C#
muij <- mu.m.scales#
sdij <- matrix( rep(sd.m, each=N), ncol=N.var)#
names(factors) <- c("A","B","C")#
# Y <- muij[rep(1:N, each=n), ]  #
TYPE = "II"#
TEST="all"#
ANOVA=TRUE#
ANOVA.effect.size="os"#
show.power=FALSE#
alpha=0.05#
ar=FALSE#
longdata <- list(#
			mu=cbind(do.call(cbind, factors1), muij), #
			sd=cbind(do.call(cbind, factors1), sdij)#
		)#
longdata <- lapply(1:length(longdata), function(iii){#
		colnames(longdata[[iii]]) <- c("A","B","C", "Y1","Y2","Y3") #
		longdata[[iii]]#
	})#
names(longdata) <- c("mu", "sd")#
rm( list = ls()[!(ls() %in% c('model','muij','sdij','factors', 'longdata', 'n','p','ar','TYPE','TEST','ANOVA','ANOVA.effect.size','show.power','alpha'))] )#
# the wrapper for this is below#
expected <- expected.MANOVA(model=model, muij=muij, sdij=sdij, factors=factors, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha)#
expected#
# $multivariate#
# $multivariate$tests#
# $multivariate$tests$Pillai#
#        test.stat         F df dfe         p         es#
# A     0.12765957 0.3333333 12  90 0.9810217 0.04255319#
# B     0.06521739 0.3258427  6  58 0.9207795 0.03260870#
# C     0.03296703 0.3181818  3  28 0.8121134 0.03296703#
# A:B   0.24489796 0.3333333 24  90 0.9983744 0.08163265#
# A:C   0.12765957 0.3333333 12  90 0.9810217 0.04255319#
# B:C   0.06521739 0.3258427  6  58 0.9207795 0.03260870#
# A:B:C 0.24489796 0.3333333 24  90 0.9983744 0.08163265#
# #
# $multivariate$tests$Wilks#
#       test.stat         F df      dfe         p         es#
# A     0.8776957 0.3132529 12 74.37254 0.9850227 0.04255319#
# B     0.9361901 0.3128332  6 56.00000 0.9276793 0.03243083#
# C     0.9673939 0.3145807  3 28.00000 0.8146843 0.03260608#
# A:B   0.7745497 0.3138801 24 81.80974 0.9989357 0.08163265#
# A:C   0.8776957 0.3132529 12 74.37254 0.9850227 0.04255319#
# B:C   0.9361901 0.3128332  6 56.00000 0.9276793 0.03243083#
# A:B:C 0.7745497 0.3138801 24 81.80974 0.9989357 0.08163265#
# #
# $multivariate$tests$Hotelling#
#        test.stat         F df dfe         p         es#
# A     0.13333333 0.2962963 12  80 0.9883685 0.04255319#
# B     0.06666667 0.3000000  6  54 0.9342081 0.03225806#
# C     0.03333333 0.3111111  3  28 0.8171615 0.03225806#
# A:B   0.26666667 0.2962963 24  80 0.9993230 0.08163265#
# A:C   0.13333333 0.2962963 12  80 0.9883685 0.04255319#
# B:C   0.06666667 0.3000000  6  54 0.9342081 0.03225806#
# A:B:C 0.26666667 0.2962963 24  80 0.9993230 0.08163265#
# #
# $multivariate$tests$`Roy's`#
#        test.stat         F df dfe         p         es#
# A     0.04444444 0.3333333  4  30 0.8533215 0.04255319#
# B     0.02222222 0.2148148  3  29 0.8853142 0.02173913#
# C     0.01111111 0.1037037  3  28 0.9572148 0.01098901#
# A:B   0.08888889 0.3333333  8  30 0.9461661 0.08163265#
# A:C   0.04444444 0.3333333  4  30 0.8533215 0.04255319#
# B:C   0.02222222 0.2148148  3  29 0.8853142 0.02173913#
# A:B:C 0.08888889 0.3333333  8  30 0.9461661 0.08163265#
# #
# #
# $multivariate$effect.sizes#
#           m.es.V  m.es.V.adj     m.es.W  m.es.W.adj     m.es.H  m.es.H.adj     m.es.R   m.es.R.adj       m.os      m.os.adj#
# A     0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# B     0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# C     0.03296703 0.007957560 0.03260608 0.007587277 0.03225806 0.007230256 0.01098901 -0.014588859 0.02420936 -0.0028959387#
# A:B   0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
# A:C   0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# B:C   0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# A:B:C 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
# #
# $multivariate$SSPH#
# $multivariate$SSPH$A#
#          [,1]     [,2] [,3]#
# [1,] 33.33333  20.0000   30#
# [2,] 20.00000 133.3333   60#
# [3,] 30.00000  60.0000  300#
# #
# $multivariate$SSPH$B#
#          [,1]     [,2] [,3]#
# [1,] 16.66667 10.00000   15#
# [2,] 10.00000 66.66667   30#
# [3,] 15.00000 30.00000  150#
# #
# $multivariate$SSPH$C#
#          [,1]     [,2] [,3]#
# [1,] 8.333333  5.00000  7.5#
# [2,] 5.000000 33.33333 15.0#
# [3,] 7.500000 15.00000 75.0#
# #
# $multivariate$SSPH$`A:B`#
#          [,1]     [,2] [,3]#
# [1,] 66.66667  40.0000   60#
# [2,] 40.00000 266.6667  120#
# [3,] 60.00000 120.0000  600#
# #
# $multivariate$SSPH$`A:C`#
#          [,1]     [,2] [,3]#
# [1,] 33.33333  20.0000   30#
# [2,] 20.00000 133.3333   60#
# [3,] 30.00000  60.0000  300#
# #
# $multivariate$SSPH$`B:C`#
#          [,1]     [,2] [,3]#
# [1,] 16.66667 10.00000   15#
# [2,] 10.00000 66.66667   30#
# [3,] 15.00000 30.00000  150#
# #
# $multivariate$SSPH$`A:B:C`#
#          [,1]     [,2] [,3]#
# [1,] 66.66667  40.0000   60#
# [2,] 40.00000 266.6667  120#
# [3,] 60.00000 120.0000  600#
# #
# #
# $multivariate$SSPE#
#      [,1] [,2] [,3]#
# [1,]  750  450  675#
# [2,]  450 3000 1350#
# [3,]  675 1350 6750#
# #
# #
# $univariate#
# $univariate$`sum of squares`#
#       df                           #
# A      4  33.333333  133.33333  300#
# B      2  16.666667   66.66667  150#
# C      1   8.333333   33.33333   75#
# A:B    8  66.666667  266.66667  600#
# A:C    4  33.333333  133.33333  300#
# B:C    2  16.666667   66.66667  150#
# A:B:C  8  66.666667  266.66667  600#
# error 90 750.000000 3000.00000 6750#
# #
# $univariate$F#
#       [,1] [,2] [,3]#
# A        1    1    1#
# B        1    1    1#
# C        1    1    1#
# A:B      1    1    1#
# A:C      1    1    1#
# B:C      1    1    1#
# A:B:C    1    1    1#
# #
# $univariate$`Pr(>F)`#
#            [,1]      [,2]      [,3]#
# A     0.4118909 0.4118909 0.4118909#
# B     0.3719296 0.3719296 0.3719296#
# C     0.3199916 0.3199916 0.3199916#
# A:B   0.4417604 0.4417604 0.4417604#
# A:C   0.4118909 0.4118909 0.4118909#
# B:C   0.3719296 0.3719296 0.3719296#
# A:B:C 0.4417604 0.4417604 0.4417604#
# #
# $univariate$os#
#       [,1] [,2] [,3]#
# A        0    0    0#
# B        0    0    0#
# C        0    0    0#
# A:B      0    0    0#
# A:C      0    0    0#
# B:C      0    0    0#
# A:B:C    0    0    0#
formula <- Y ~ A + B + C + A*B*C#
rm( list = ls()[!(ls() %in% c('formula','muij', 'factors', 'longdata','n','p','ar','TYPE','TEST','ANOVA','ANOVA.effect.size','show.power','alpha'))] )#
expected2 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha)#
expected2$multivariate$effect.sizes#
#          m.es.V m.es.V.adj    m.es.W m.es.W.adj    m.es.H m.es.H.adj    m.es.R m.es.R.adj      m.os   m.os.adj#
# A     0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B     0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# C     0.0329670  0.0079576 0.0326061  0.0075873 0.0322581  0.0072303 0.0109890 -0.0145889 0.0242094 -0.0028959#
# A:B   0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# A:C   0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B:C   0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# A:B:C 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# if SERLIN=TRUE  then effect.size tables are identical#
expected2.adj <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
	show.power=show.power, power.settings = list(ncp.method1 = "OS", ncp.method2 = "pop", Serlin = TRUE), alpha=alpha)#
expected2.adj$multivariate$effect.sizes#
#          m.es.V m.es.V.adj    m.es.W m.es.W.adj    m.es.H m.es.H.adj    m.es.R m.es.R.adj      m.os   m.os.adj#
# A     0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B     0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# C     0.0329670  0.0079576 0.0326061  0.0075873 0.0322581  0.0072303 0.0109890 -0.0145889 0.0242094 -0.0028959#
# A:B   0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# A:C   0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B:C   0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# A:B:C 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# However, expected2$multivariate$tests$Pillai etc returns unajdusted if FALSE and  expected2.adj$multivariate$tests$Pillai returns adjusted if SERLIN=TRUE#
sapply(1:length(expected2$multivariate$tests), function(ii) expected2$multivariate$tests[[ii]][,"es"] )#
           [,1]      [,2]      [,3]      [,4]#
A     0.0425532 0.0425532 0.0425532 0.0425532#
B     0.0326087 0.0324308 0.0322581 0.0217391#
C     0.0329670 0.0326061 0.0322581 0.0109890#
A:B   0.0816327 0.0816327 0.0816327 0.0816327#
A:C   0.0425532 0.0425532 0.0425532 0.0425532#
B:C   0.0326087 0.0324308 0.0322581 0.0217391#
A:B:C 0.0816327 0.0816327 0.0816327 0.0816327#
sapply(1:length(expected2.adj$multivariate$tests), function(ii) expected2.adj$multivariate$tests[[ii]][,"es"] )#
           [,1]      [,2]      [,3]       [,4]#
A     0.0092507 0.0092507 0.0092507  0.0092507#
B     0.0075900 0.0074075 0.0072303 -0.0035607#
C     0.0079576 0.0075873 0.0072303 -0.0145889#
A:B   0.0154440 0.0154440 0.0154440  0.0154440#
A:C   0.0092507 0.0092507 0.0092507  0.0092507#
B:C   0.0075900 0.0074075 0.0072303 -0.0035607#
A:B:C 0.0154440 0.0154440 0.0154440  0.0154440#
longdata <- lapply(1:length(longdata), function(iii){#
		colnames(longdata[[iii]]) <- c("size","car","city", "Y1","Y2","Y3") #
		longdata[[iii]]#
	})#
names(longdata) <- c("mu", "sd")#
formula <- Y ~ size*car*city#
expected3 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha)#
expected3$multivariate$effect.sizes#
#                   m.es.V  m.es.V.adj     m.es.W  m.es.W.adj     m.es.H  m.es.H.adj     m.es.R   m.es.R.adj       m.os      m.os.adj#
# size          0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# car           0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# city          0.03296703 0.007957560 0.03260608 0.007587277 0.03225806 0.007230256 0.01098901 -0.014588859 0.02420936 -0.0028959387#
# size:car      0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
# size:city     0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# car:city      0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# size:car:city 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
power.settings <- list(ncp.method1="MP", ncp.method2="F value", Serlin=TRUE)#
expected4 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, power.settings=power.settings, alpha=alpha)#
expected4$multivariate$tests$Wilks#
#               test.stat         F df      dfe         p          es ncp Power#
# size          0.8776957 0.9818783 12 233.1176 0.4668818 0.009250694   0  0.05#
# car           0.9361901 0.9831899  6 176.0000 0.4381451 0.007407486   0  0.05#
# city          0.9673939 0.9886822  3  88.0000 0.4019752 0.007587277   0  0.05#
# size:car      0.7745497 0.9815373 24 255.8280 0.4911317 0.015444015   0  0.05#
# size:city     0.8776957 0.9818783 12 233.1176 0.4668818 0.009250694   0  0.05#
# car:city      0.9361901 0.9831899  6 176.0000 0.4381451 0.007407486   0  0.05#
# size:car:city 0.7745497 0.9815373 24 255.8280 0.4911317 0.015444015   0  0.05#
power.settings.GPower <- list(ncp.method1="OS", ncp.method2="pop", Serlin=FALSE)#
expected5 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, power.settings=power.settings.GPower, alpha=alpha)#
expected5$multivariate$tests$Wilks#
#               test.stat         F df      dfe         p         es ncp Power#
# size          0.8776957 0.9818783 12 233.1176 0.4668818 0.04255319   0  0.05#
# car           0.9361901 0.9831899  6 176.0000 0.4381451 0.03243083   0  0.05#
# city          0.9673939 0.9886822  3  88.0000 0.4019752 0.03260608   0  0.05#
# size:car      0.7745497 0.9815373 24 255.8280 0.4911317 0.08163265   0  0.05#
# size:city     0.8776957 0.9818783 12 233.1176 0.4668818 0.04255319   0  0.05#
# car:city      0.9361901 0.9831899  6 176.0000 0.4381451 0.03243083   0  0.05#
# size:car:city 0.7745497 0.9815373 24 255.8280 0.4911317 0.08163265   0  0.05#
# G*Power calculate required values#
Wilks <- expected5$multivariate$tests$Wilks[,"test.stat"]#
model <- formula#
levs <- sapply(1:length(factors), function(ii) length(unique(factors[[ii]])))#
N <- n*prod(levs)#
k <- prod(levs)#
info <- terms(model)#
terms <- attr(info, "term.labels")#
n.terms <- length(terms)#
fac <- attr(info, "factors") #
mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
mat[mat == 0] = 1#
q <- apply(mat, 2, prod)#
m <- dim(muij)[2]#
p <- m#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- ANOVA.boot:::model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
Wilks.con <- ANOVA.boot:::Wilks.constants(N, k, p, q)#
# b <- sapply(q, max, p)#
s <- Wilks.con$s#
b <- Wilks.con$b#
# b for Serlin is different to b in ANOVA.boot:::Wilks.constants#
b.serlin <- sapply(q, max, p)#
Serlin.adj <- (N - 1)/(N - b.serlin - 1)#
df1 <- Wilks.con$df1#
df2 <- Wilks.con$df2#
es <- 1 - Wilks^(1/s) # not adjusted#
es#
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.04255319    0.03243083    0.03260608    0.08163265    0.04255319    0.03243083    0.08163265#
expected5$multivariate$effect.sizes[,"m.es.W"]#
#         size           car          city      size:car     size:city      car:city size:car:city #
#    0.04255319    0.03243083    0.03260608    0.08163265    0.04255319    0.03243083    0.08163265 #
es.adj <- 1 - (1 - es) * Serlin.adj#
es.adj#
#          size           car          city      size:car     size:city      car:city size:car:city #
#   0.009250694   0.007407486   0.007587277   0.015444015   0.009250694   0.007407486   0.015444015#
expected5$multivariate$effect.sizes[,"m.es.W.adj"]#
#          size           car          city      size:car     size:city      car:city size:car:city #
#   0.009250694   0.007407486   0.007587277   0.015444015   0.009250694   0.007407486   0.015444015#
# G*Power disagrees BUT I AM RECOMMENDING THE SERLIN ADJUSTED VALUES:#
# The approach of Muller and Peterson (1984) has found#
# widespread use; for instance, it has been adopted in the#
# SPSS software package. We nevertheless recommend the#
# approach of OBrien and Shieh (1999) because it has a#
# number of advantages: (1) Unlike the method of Muller#
# and Peterson, it provides the exact noncentral F distribution#
# whenever the hypothesis involves at most s = 1#
# positive eigenvalues; (2) its approximations for s > 1#
# eigenvalues are almost always more accurate than those#
# of Muller and Petersons method (which systematically#
# underestimates power); and (3) it provides a simpler form#
# of the noncentrality parameterthat is, lambda* N, where#
# lambda* is not a function of the total sample size.#
# what G*Power calls fsqr(U):#
fsqr.U <- (1 - (1 - es)^(s/b) )/(1 - es)^(s/b)#
# no. of eigenvalues : s#
# response variables : p #
# predictors 	   : q + 1 # ?#
# eg for size#
effect <- "size"#
Wilks[[effect]]#
# [1] 0.8776957#
q[[effect]]#
# [1] 4#
p#
# [1] 3#
fsqr.U[[effect]]#
# [1] 0.05054332#
# Post hoc: Compute achieved power - given alpha, sample size, and effect size #
# F tests - MANOVA: Special effects and interactions#
# Options:	Wilks U, Muller-Peterson Algorithm#
# Analysis:	Post hoc: Compute achieved power #
# Input:	Effect size f²(U)	=	0.0550655#
# 	a err prob					=	0.05#
# 	Total sample size				=	120#
# 	Number of groups				=	30#
# 	Number of predictors			=	4#
# 	Response variables			=	3#
# Output:	Noncentrality parameter ?	=	12.8367382#
# 	Critical F					=	1.7938771#
# 	Numerator df				=	12.0000000#
# 	Denominator df				=	233.1176#
# 	Power (1-ß err prob)			=	0.6136963#
# 	Wilks U					=	0.8677776#
expected5$multivariate$tests$Wilks[effect, "Power"]#
# [1] 0.7366695#
# agreement is ok (G*Power ends up with a different Wilks U which is odd#
# my default performs better for NULL#
expected4$multivariate$tests$Wilks[effect, "Power"]#
# [1] 0.05#
# Pillai#
Pillai <- expected5$multivariate$tests$Pillai[,"test.stat"] #
Pillai.con <- ANOVA.boot:::Pillai.constants(N, k, p, q)#
# #
s <- Pillai.con$s#
t <- Pillai.con$t#
u <- Pillai.con$u#
# b for Serlin is different to b in ANOVA.boot:::Wilks.constants#
b.serlin <- sapply(q, max, p)#
Serlin.adj <- (N - 1)/(N - b.serlin - 1)#
df1 <- Pillai.con$df1#
df2 <- Pillai.con$df2#
es = Pillai/s#
fsqr.V <- es/(1 - es)#
# IBM pg 548#
# The number of nonzero eigenvalues, s, is equal to min(p, n.h)#
n.h <-  q#
s <-  sapply(n.h, min, p)#
# n.e is degrees of freedom for error SCCP#
n.e <- N - k#
# b is max(p, n.h)#
b <- sapply(n.h, max, p)#
df1#
b * s#
df2#
s * (n.e - p + s) #
( n.e - p + s ) / b * Pillai / (s - Pillai)  # nb mistake ?? in IBM - s#
Pillai#
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.12765957    0.06521739    0.03296703    0.24489796    0.12765957    0.06521739    0.24489796 #
# predictors#
q#
fsqr.V #
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.04444444    0.03370787    0.03409091    0.08888889    0.04444444    0.03370787    0.08888889#
# G*Power#
#    0.04444444 	 0.03370786	   0.03409091    0.08888889	 0.04444444	   0.03370786   0.08888889#
Hotelling <- expected5$multivariate$tests$Hotelling[,"test.stat"] #
es <- expected5$multivariate$tests$Hotelling[,"es"]#
es/(1 - es)#
Hotelling.con <- ANOVA.boot:::Hotelling.constants(N, k, p, q)#
s <- Hotelling.con$s#
t <- Hotelling.con$t#
u <- Hotelling.con$u#
df1 <- Hotelling.con$df1#
df2 <- Hotelling.con$df2#
#######################################################################################################################################
#######################################################################################################################################
CI=0.95#
subset.names=c("MANOVA.effect.size", "ANOVA.effect.size")#
replacement = TRUE#
raw.return=FALSE#
Nreps=1e3 # Nreps=1e5#
N.dist=1e5#
dist="Normal"#
H0=FALSE#
return.average=TRUE#
p.adjust.method="Sidak-Holm"#
CI=0.95#
method.CI="perc"#
return.p=FALSE#
return.perms=TRUE#
TEST="Pillai"#
seed=42#
cov.mat=NULL#
# ptm <- proc.time()#
# MANOVA.sim.H1.2 <- MANOVA.MC(model=model, A=A, B=B, C=C, muij=muij, n=n, cov.mat=NULL, sdij=sdij, p=p, ar=ar, TYPE=TYPE, TEST=TEST, H0=H0, ANOVA=ANOVA, #
# 				ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha, p.adjust.method=p.adjust.method, factors=factors,#
# 				replacement=TRUE, return.average=TRUE, raw.return=raw.return, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps)#
# #
# proc.time() - ptm#
# #
rm( list = ls()[!(ls() %in% c('formula','longdata','muij', 'factors', 'n', 'cov.mat', 'p','ar','TYPE','TEST','ANOVA','ANOVA.effect.size','dist','show.power','alpha',#
				'p.adjust.method', 'replacement', 'return.average', 'raw.return', 'return.p', 'return.perms', 'CI', #
				'method.CI', 'N.dist', 'Nreps', 'seed'))] )#
p=0.3#
ptm <- proc.time()#
out <- sMANOVA(formula=formula, longdata=longdata, n=n, cov.mat=cov.mat, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
				dist=dist, alpha=alpha, p.adjust.method=p.adjust.method, replacement=replacement, return.average=return.average, #
				raw.return=raw.return, return.p=return.p, return.perms=FALSE, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)#
proc.time() - ptm#
#    user  system elapsed #
#  664.58    2.80  670.78#
out$multivariate$`p(F>Fcrit)`[1,]$uncorrected#
#          size           car          city      size:car     size:city      car:city size:car:city #
#         0.042         0.050         0.055         0.057         0.035         0.053         0.055 #
out$univariate$`p(F>Fcrit)`[1,]$uncorrected#
#                  [,1]    [,2]    [,3]#
# size          0.05162 0.04987 0.04980#
# car           0.05076 0.04998 0.04982#
# city          0.05114 0.04982 0.05075#
# size:car      0.05067 0.04912 0.05039#
# size:city     0.05069 0.04976 0.04969#
# car:city      0.04901 0.05032 0.05084#
# size:car:city 0.04959 0.05020 0.04956#
out$univariate$`p(F>Fcrit)`[1,]$`pr (Sidak-Holm)`#
#                  [,1]    [,2]    [,3]#
# size          0.00772 0.00734 0.00727#
# car           0.00780 0.00703 0.00744#
# city          0.00747 0.00786 0.00747#
# size:car      0.00777 0.00684 0.00724#
# size:city     0.00773 0.00780 0.00724#
# car:city      0.00757 0.00781 0.00782#
# size:car:city 0.00735 0.00721 0.00781#
out$univariate$`effect size`[1,]$os$theta.hat#
out.e <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha)#
out.e$univariate$os#
#               Y1 Y2 Y3#
# size           0  0  0#
# car            0  0  0#
# city           0  0  0#
# size:car       0  0  0#
# size:city      0  0  0#
# car:city       0  0  0#
# size:car:city  0  0  0#
# doing Pillai#
out$multivariate$`effect size`[1,]$`effect size`[,"m.es.V"]#
out.e$multivariate$effect.sizes[,"m.es.V"]#
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.04255319    0.03260870    0.03296703    0.08163265    0.04255319    0.03260870    0.08163265 #
out$multivariate$`effect size`[1,]$`effect size`[,"m.es.V.adj"]#
out.e$multivariate$effect.sizes[,"m.es.V.adj"]#
#          size           car          city      size:car     size:city      car:city size:car:city #
#   0.009250694   0.007589955   0.007957560   0.015444015   0.009250694   0.007589955   0.015444015#
# simple ANOVA#
longdata.simple <- list(mu=longdata$mu[, -c(5,6)],sd=longdata$sd[, -c(5,6)])
ptm <- proc.time()#
out.simple <- sMANOVA(formula=formula, longdata=longdata.simple, n=n, cov.mat=cov.mat, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
				dist=dist, alpha=alpha, p.adjust.method=p.adjust.method, replacement=replacement, return.average=return.average, #
				raw.return=raw.return, return.p=return.p, return.perms=FALSE, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)#
proc.time() - ptm#
out.simple$univariate$`effect size`[1,]$os
longdata.simple
eMANOVA(formula=formula, longdata=longdata.simple, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha)
formula
show.power=FALSE#
	if (is.null(cov.mat)) {#
		longdata.sd <- longdata$sd#
		longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
	}else{#
		longdata.sd <- NULL#
	}#
	if ( dist=="Fleishman" ){#
		longdata.skew <- longdata$skew#
		longdata.kurt <- longdata$kurt#
		longdata <- longdata[[-which(names(longdata) %in% c("skew", "kurt"))]]#
	}#
	H0=FALSE #
	info <- terms(formula, "Error")#
	# indError <- attr(info, "specials")$Error#
	var <- attr(info, "variables")[[1L + 1]]#
	terms <- attr(info, "term.labels")#
	groups <- terms[attr(info, "order") == 1]#
	n.groups <- length(groups)#
	factors <- lapply(1:n.groups, function(ii) rep( longdata[,groups[ii]], each=n) )#
	names(factors) <- groups#
	muij <- longdata[ , -which(colnames(longdata) %in% groups)]#
	if (is.null(cov.mat)) sdij <- longdata.sd[ , -which(colnames(longdata.sd) %in% groups)]#
	if ( dist=="Fleishman" ){#
		skewij <- longdata.skew[ , -which(colnames(longdata.skew) %in% groups)]#
		kurtij <- longdata.kurt[ , -which(colnames(longdata.kurt) %in% groups)]#
	}else{#
		skewij=NULL#
		kurtij=NULL#
	}#
	if ( dim(longdata)[2] - n.groups==1 ){#
		muij <- matrix(muij, ncol=1)#
		sdij <- matrix(sdij, ncol=1)#
		if ( dist=="Fleishman" ){#
			skewij <- matrix(skewij, ncol=1)#
			kurtij <- matrix(kurtij, ncol=1)#
		}#
	}#
	out1 <- MANOVA.MC(model=formula, muij=muij, n=n, cov.mat=cov.mat, sdij=sdij, p=p, skewij=skewij, #
			kurtij=kurtij, ar=ar, TYPE=TYPE, TEST=TEST, H0=H0, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
    			dist=dist, show.power=show.power, alpha=alpha, p.adjust.method=p.adjust.method, factors=factors, replacement=replacement, 										return.average=return.average, raw.return=raw.return, return.p=return.p, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)
out1
sMANOVA
show.power = FALSE#
    if (is.null(cov.mat)) {#
        longdata.sd <- longdata$sd#
        longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
    }#
    else {#
        longdata.sd <- NULL#
    }#
    if (dist == "Fleishman") {#
        longdata.skew <- longdata$skew#
        longdata.kurt <- longdata$kurt#
        longdata <- longdata[[-which(names(longdata) %in% c("skew", #
            "kurt"))]]#
    }#
    H0 = FALSE#
    info <- terms(formula, "Error")#
    var <- attr(info, "variables")[[1L + 1]]#
    terms <- attr(info, "term.labels")#
    groups <- terms[attr(info, "order") == 1]#
    n.groups <- length(groups)#
    factors <- lapply(1:n.groups, function(ii) rep(longdata[, #
        groups[ii]], each = n))#
    names(factors) <- groups#
    muij <- longdata[, -which(colnames(longdata) %in% groups)]#
    if (is.null(cov.mat)) #
        sdij <- longdata.sd[, -which(colnames(longdata.sd) %in% #
            groups)]#
    if (dist == "Fleishman") {#
        skewij <- longdata.skew[, -which(colnames(longdata.skew) %in% #
            groups)]#
        kurtij <- longdata.kurt[, -which(colnames(longdata.kurt) %in% #
            groups)]#
    }#
    else {#
        skewij = NULL#
        kurtij = NULL#
    }#
    if (dim(longdata)[2] - n.groups == 1) {#
        muij <- matrix(muij, ncol = 1)#
        sdij <- matrix(sdij, ncol = 1)#
        if (dist == "Fleishman") {#
            skewij <- matrix(skewij, ncol = 1)#
            kurtij <- matrix(kurtij, ncol = 1)#
        }#
    }#
    out1 <- MANOVA.MC(model = formula, muij = muij, n = n, cov.mat = cov.mat, #
        sdij = sdij, p = p, skewij = skewij, kurtij = kurtij, #
        ar = ar, TYPE = TYPE, TEST = TEST, H0 = H0, ANOVA = ANOVA, #
        ANOVA.effect.size = ANOVA.effect.size, dist = dist, show.power = show.power, #
        alpha = alpha, p.adjust.method = p.adjust.method, factors = factors, #
        replacement = replacement, return.average = return.average, #
        raw.return = raw.return, return.p = return.p, CI = CI, #
        method.CI = method.CI, N.dist = N.dist, Nreps = Nreps, #
        seed = seed)
longdata.simple
results
out <- sMANOVA(formula=formula, longdata=longdata, n=n, cov.mat=cov.mat, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
				dist=dist, alpha=alpha, p.adjust.method=p.adjust.method, replacement=replacement, return.average=return.average, #
				raw.return=raw.return, return.p=return.p, return.perms=FALSE, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)
out
###################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
# example starts here#
rm( list=ls(all=TRUE ) )#
library( ANOVA.boot )#
n.A <- 7#
n.B <- 5#
n.C <- 2#
set.seed(42)#
N <- lapply(1:n.C, function(iii){#
		matrix( sample(4:7,n.A*n.B,replace=T),  ncol = n.B )  	# N for n.A*n.B groups#
	})#
A <- lapply(1:n.C, function(iii){#
		do.call(c, sapply(1:n.B, function(ii) rep(seq_len(n.A), N[[iii]][,ii])) )#
	})#
A <- do.call(c, A)#
A <- as.factor(A)#
B <- lapply(1:n.C, function(iii){#
		rep(seq_len(n.B), apply(N[[iii]],2,sum))#
	})#
B <- do.call(c, B)#
B <- as.factor(B)#
C <- lapply(1:n.C, function(iii){#
	rep(iii, sum(N[[iii]]))#
	})#
C <- do.call(c, C)#
C <- as.factor(C)#
m <- 4#
set.seed(42)#
mu.m <- rnorm(n=m, mean=100, sd=20)#
p=0.3#
sd.m <- rnorm(m,20,1)#
cov.mat <- cov.mat.rm(sd.m, p=p, ar=TRUE) #
cholesky <- chol(cov.mat)#
Y <- matrix( rnorm(m*length(C), mean = 0, sd = 1), ncol = m )#
Y <- t( t(cholesky) %*% t(Y) ) + matrix(rep(mu.m, each = length(C)), byrow=FALSE, ncol = m)#
manRes1 <- manova(Y ~ A*B*C)#
summary(manRes1, test="Pillai")#
#            Df   Pillai approx F num Df den Df Pr(>F)#
# A           6 0.026636  0.34636     24   1240 0.9987#
# B           4 0.033596  0.65644     16   1240 0.8382#
# C           1 0.007526  0.58198      4    307 0.6759#
# A:B        24 0.308929  1.08108     96   1240 0.2848#
# A:C         6 0.098785  1.30829     24   1240 0.1458#
# B:C         4 0.051904  1.01887     16   1240 0.4331#
# A:B:C      24 0.282356  0.98103     96   1240 0.5337#
# Residuals 310                            #
# Type II/III sum of squares#
library(car)#
fitIII <- lm(Y ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIII, type="III")#
summary(Manova.test, univariate=FALSE)#
# Type III MANOVA Tests:#
# #
# Sum of squares and products for error:#
#            [,1]      [,2]      [,3]       [,4]#
# [1,] 124395.375  48966.04  20322.15   9174.845#
# [2,]  48966.039 110837.15  59001.39  26436.030#
# [3,]  20322.145  59001.39 159331.30  65636.216#
# [4,]   9174.845  26436.03  65636.22 122627.817#
# #
# ------------------------------------------#
#  #
# Term: (Intercept) #
# #
# Sum of squares and products for the hypothesis:#
#         [,1]    [,2]    [,3]    [,4]#
# [1,] 5835590 4007364 4901976 5170189#
# [2,] 4007364 2751901 3366241 3550425#
# [3,] 4901976 3366241 4117727 4343030#
# [4,] 5170189 3550425 4343030 4580659#
# #
# Multivariate Tests: (Intercept)#
#                  Df test stat approx F num Df den Df     Pr(>F)    #
# Pillai            1   0.98791 6273.904      4    307 < 2.22e-16 ***#
# Wilks             1   0.01209 6273.904      4    307 < 2.22e-16 ***#
# Hotelling-Lawley  1  81.74468 6273.904      4    307 < 2.22e-16 ***#
# Roy               1  81.74468 6273.904      4    307 < 2.22e-16 ***#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: A #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]      [,2]     [,3]      [,4]#
# [1,] 1263.0952  836.8615  827.166  772.7159#
# [2,]  836.8615 1361.4855 1133.547  938.2805#
# [3,]  827.1660 1133.5467 1338.470 1037.5614#
# [4,]  772.7159  938.2805 1037.561 1379.2690#
# #
# Multivariate Tests: A#
#                  Df test stat  approx F num Df   den Df  Pr(>F)#
# Pillai            6 0.0315659 0.4109690     24 1240.000 0.99490#
# Wilks             6 0.9687420 0.4085394     24 1072.205 0.99510#
# Hotelling-Lawley  6 0.0319499 0.4066954     24 1222.000 0.99529#
# Roy               6 0.0176754 0.9132276      6  310.000 0.48552#
# #
# ------------------------------------------#
#  #
# Term: B #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]      [,2]       [,3]       [,4]#
# [1,] 1143.2470  600.1166 -499.83313 -192.57841#
# [2,]  600.1166 1909.9466  653.46008 -358.39974#
# [3,] -499.8331  653.4601  798.65657  -90.86706#
# [4,] -192.5784 -358.3997  -90.86706  322.96264#
# #
# Multivariate Tests: B#
#                  Df test stat  approx F num Df    den Df  Pr(>F)#
# Pillai            4 0.0365398 0.7144846     16 1240.0000 0.78132#
# Wilks             4 0.9638229 0.7117807     16  938.5381 0.78388#
# Hotelling-Lawley  4 0.0371596 0.7095158     16 1222.0000 0.78645#
# Roy               4 0.0212065 1.6435013      4  310.0000 0.16315#
# #
# ------------------------------------------#
#  #
# Term: C #
# #
# Sum of squares and products for the hypothesis:#
#            [,1]      [,2]      [,3]       [,4]#
# [1,]  225.92548 -99.20121  96.67981 -207.94045#
# [2,]  -99.20121  43.55808 -42.45097   91.30420#
# [3,]   96.67981 -42.45097  41.37199  -88.98352#
# [4,] -207.94045  91.30420 -88.98352  191.38713#
# #
# Multivariate Tests: C#
#                  Df test stat  approx F num Df den Df  Pr(>F)#
# Pillai            1 0.0071736 0.5545519      4    307 0.69584#
# Wilks             1 0.9928264 0.5545519      4    307 0.69584#
# Hotelling-Lawley  1 0.0072254 0.5545519      4    307 0.69584#
# Roy               1 0.0072254 0.5545519      4    307 0.69584#
# #
# ------------------------------------------#
#  #
# Term: A:B #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]      [,2]      [,3]     [,4]#
# [1,] 11437.732  6877.305  4254.569 4219.432#
# [2,]  6877.305 12560.970  7233.591 4448.628#
# [3,]  4254.569  7233.591 14213.952 7174.512#
# [4,]  4219.432  4448.628  7174.512 8913.720#
# #
# Multivariate Tests: A:B#
#                  Df test stat approx F num Df   den Df   Pr(>F)  #
# Pillai           24 0.2981634 1.040369     96 1240.000 0.378957  #
# Wilks            24 0.7325609 1.037500     96 1218.694 0.386157  #
# Hotelling-Lawley 24 0.3250992 1.034560     96 1222.000 0.393470  #
# Roy              24 0.1234838 1.594999     24  310.000 0.040323 *#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: A:C #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]     [,2]     [,3]      [,4]#
# [1,] 2539.4311 2763.629  756.759  132.8004#
# [2,] 2763.6286 5370.723 1769.431 -719.1470#
# [3,]  756.7590 1769.431 2000.361 1476.4236#
# [4,]  132.8004 -719.147 1476.424 3334.1801#
# #
# Multivariate Tests: A:C#
#                  Df test stat approx F num Df   den Df    Pr(>F)   #
# Pillai            6 0.0947115 1.253026     24 1240.000 0.1855365   #
# Wilks             6 0.9077732 1.256473     24 1072.205 0.1833348   #
# Hotelling-Lawley  6 0.0988827 1.258695     24 1222.000 0.1811677   #
# Roy               6 0.0605502 3.128426      6  310.000 0.0054343 **#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: B:C #
# #
# Sum of squares and products for the hypothesis:#
#            [,1]       [,2]      [,3]      [,4]#
# [1,]  398.31372   10.30311 -307.0137 -659.1746#
# [2,]   10.30311  280.70782 -230.5529 -222.1600#
# [3,] -307.01375 -230.55287 2839.0028  375.8311#
# [4,] -659.17457 -222.15995  375.8311 1686.1707#
# #
# Multivariate Tests: B:C#
#                  Df test stat  approx F num Df    den Df   Pr(>F)  #
# Pillai            4 0.0497475 0.9759965     16 1240.0000 0.480792  #
# Wilks             4 0.9509327 0.9740160     16  938.5381 0.483265  #
# Hotelling-Lawley  4 0.0508862 0.9716077     16 1222.0000 0.485789  #
# Roy               4 0.0293228 2.2725148      4  310.0000 0.061397 .#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: A:B:C #
# #
# Sum of squares and products for the hypothesis:#
#          [,1]      [,2]     [,3]     [,4]#
# [1,] 8384.878  3737.071 1225.276 1088.927#
# [2,] 3737.071 10863.782 4190.858 2090.329#
# [3,] 1225.276  4190.858 8573.560 2080.437#
# [4,] 1088.927  2090.329 2080.437 8037.573#
# #
# Multivariate Tests: A:B:C#
#                  Df test stat  approx F num Df   den Df  Pr(>F)#
# Pillai           24 0.2823563 0.9810253     96 1240.000 0.53372#
# Wilks            24 0.7455292 0.9768058     96 1218.694 0.54506#
# Hotelling-Lawley 24 0.3056174 0.9725638     96 1222.000 0.55645#
# Roy              24 0.1059790 1.3688958     24  310.000 0.11930#
Manova.CAR <- summary(Manova.test, univariate=TRUE)#
Manova.CAR$univariate.tests#
"univariate.tests"#
Manova.test <- Anova(fitIII, type="II")#
Manova1 <- summary(Manova.test,univariate=TRUE)#
# summary(Manova.test, univariate=TRUE)#
Manova1#
####################################################################################################
####################################################################################################
# model <- Y ~ A + B + C + A*B*C#
# Manova2 <- MANOVA.f(Y, A=A, B=B, C=C, model, TYPE = "II", TEST="Wilks", ANOVA=TRUE, ANOVA.effect.size="all", show.power=FALSE, alpha=0.05)#
longdata <- cbind(A=A, B=B, C=C, Y)#
colnames(longdata)[4:7] = c("Y1","Y2","Y3","Y4")#
formula <- Y ~ A + B + C + A*B*C#
colnames(longdata)[4:7] = c("Y1","Y2","Y3","Y4")#
Manova2 <- MANOVA(formula, longdata, ANOVA.effect.size = "all")#
Manova2$univariate$`sum of squares`#
#        df          Y1           Y2           Y3          Y4#
# A       6    933.7091   1155.41702   1173.61195   1085.7261#
# B       4   1046.4472   1894.39016    964.53340    213.5417#
# C       1    153.3926     61.58029     38.23215    244.0636#
# A:B    24  10355.3436  12937.57388  14086.53354   8866.0929#
# A:C     6   2812.0570   5425.46916   1864.55069   3368.1547#
# B:C     4    514.9968    310.34917   3253.61159   1642.7279#
# A:B:C  24   8384.8777  10863.78180   8573.55970   8037.5727#
# error 310 124395.3754 110837.15424 159331.30254 122627.8166#
longdata1 <- longdata#
colnames(longdata1)[1:3] <- c("behaviour","drug","genotype")#
colnames(longdata)[4:7] = c("Y1","Y2","Y3","Y4")#
formula <- Y ~ behaviour + drug + genotype + behaviour*drug*genotype#
Manova2a <- MANOVA(formula, longdata1)#
Manova2a$univariate$`sum of squares`#
longdata2b <- longdata1[,-c(1,2)]#
formula <- Y ~ genotype#
Manova2b <- MANOVA(formula, longdata2b)#
Manova2b$univariate$`sum of squares`#
library(car)#
fit2b<- lm(Y ~ C, contrasts=list(C=contr.sum))#
Manova.test <- Anova(fit2b, type="II")#
summary(Manova.test, univariate=TRUE)#
library(car)#
fitIII <- lm(Y ~ A+B+C + A*B, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIII, type="II")#
summary(Manova.test, univariate=TRUE)#
formula <- Y ~ A + B + C + A*B#
MANOVA(formula, longdata)#
#MANOVA effect sizes#
Manova2$multivariate$Wilks[,"es"]#
#           A           B           C         A:B         A:C         B:C       A:B:C #
# 0.006321495 0.008794802 0.007291175 0.074680195 0.024557383 0.013033389 0.070785112 #
Manova2$multivariate$effect.sizes#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
# #
# Manova2$multivariate$Wilks is uncorrected Serlin adjusted value#
# if want adjusted then look at Manova2$multivariate$effect.sizes[,"m.es.W.adj"]#
# s <- min(p, q); b <- max(p, q); Serlin.adj <- (N - 1)/(N - b - 1)#
###here#
formula <- Y ~ A + B + C + A*B*C#
Manova2.pb <- pbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
Manova2.pb$univariate$`effect size`[1,]$os#
# $theta.hat#
#                 Y1           Y2           Y3            Y4#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# #
# $bias#
#                Y1          Y2          Y3          Y4#
# A     0.014772482 0.013342034 0.014824378 0.015067111#
# B     0.009961165 0.008050724 0.009890840 0.010353595#
# C     0.002421019 0.002567925 0.002638935 0.002388236#
# A:B   0.056212677 0.045746691 0.053022062 0.055911715#
# A:C   0.012731700 0.009988656 0.014456416 0.013264747#
# B:C   0.010587970 0.009798597 0.007542787 0.009288149#
# A:B:C 0.057281073 0.048840608 0.056172695 0.058488772#
# #
# $se#
#                Y1          Y2          Y3          Y4#
# A     0.010513217 0.010743731 0.010757265 0.011112646#
# B     0.009637489 0.011124648 0.009180885 0.007369940#
# C     0.003963100 0.003415133 0.003475131 0.004810767#
# A:B   0.030098152 0.028058980 0.029255532 0.026209907#
# A:C   0.014525642 0.017676126 0.011776628 0.015121872#
# B:C   0.008776768 0.007361134 0.012778618 0.011673016#
# A:B:C 0.028325518 0.026322791 0.025015462 0.028084117#
# #
# $ci.lower#
#                 Y1           Y2           Y3          Y4#
# A     -0.024696372 -0.022652481 -0.025044769 -0.02483533#
# B     -0.016994122 -0.012701506 -0.017794683 -0.01851385#
# C     -0.004818983 -0.004803210 -0.005036759 -0.00473971#
# A:B   -0.050630879 -0.020748916 -0.042800196 -0.05018757#
# A:C   -0.018115924 -0.005741267 -0.022969925 -0.01656434#
# B:C   -0.018519275 -0.017098843 -0.013128393 -0.01599380#
# A:B:C -0.056155219 -0.030271445 -0.064343787 -0.05897510#
# #
# $ci.upper#
#                Y1          Y2          Y3         Y4#
# A     0.013339990 0.019495642 0.016886659 0.01582727#
# B     0.017768444 0.028120516 0.017824680 0.00932972#
# C     0.009180808 0.007472613 0.007192856 0.01060378#
# A:B   0.067717057 0.089475243 0.067995770 0.05160527#
# A:C   0.035648844 0.064471943 0.020926782 0.04190924#
# B:C   0.015859537 0.011089414 0.037268291 0.02875325#
# A:B:C 0.052278417 0.067811424 0.034426745 0.05062527#
# no effect sizes#
# Manova2.pb$multivariate$permutations[1,]#
# MANOVA effect sizes  bootstrapshould match original MANOVA#
Manova2.pb$multivariate$`effect size`[1,]$`effect size`#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
Manova2$multivariate$effect.sizes#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
ptm <- proc.time()#
Manova2.nb <- nbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
proc.time() - ptm#
Manova2.nb$univariate$`effect size`[1,]$os#
# $theta.hat#
#                 Y1           Y2           Y3            Y4#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# #
# $os$bias#
#               Y1          Y2          Y3         Y4#
# A     0.01523289 0.013705943 0.017656208 0.01741846#
# B     0.01035114 0.008035487 0.010197354 0.01114398#
# C     0.00308148 0.002315069 0.002450947 0.00321472#
# A:B   0.06334511 0.063054040 0.065548500 0.06707082#
# A:C   0.01548741 0.017555537 0.016684918 0.01687540#
# B:C   0.01064833 0.012759570 0.014202708 0.01339203#
# A:B:C 0.06430303 0.059429123 0.062047813 0.06520411#
# #
# $os$se#
#                Y1          Y2          Y3          Y4#
# A     0.011280071 0.012547464 0.012817480 0.013948874#
# B     0.011159835 0.012928146 0.010111572 0.008776835#
# C     0.005482621 0.004019749 0.003573847 0.006078847#
# A:B   0.032706781 0.031099554 0.029921892 0.028819966#
# A:C   0.015654530 0.020349679 0.013943306 0.016488256#
# B:C   0.009641517 0.010067734 0.016533855 0.013823896#
# A:B:C 0.026921887 0.026545009 0.024761527 0.026738494#
# #
# $os$ci.lower#
#                 Y1           Y2          Y3           Y4#
# A     -0.026806541 -0.025292185 -0.02887922 -0.028608813#
# B     -0.018745710 -0.014418875 -0.01911224 -0.020145451#
# C     -0.005778235 -0.005021451 -0.00516426 -0.005876048#
# A:B   -0.053643129 -0.026481010 -0.04398363 -0.052203756#
# A:C   -0.023051018 -0.011406703 -0.02689824 -0.019702258#
# B:C   -0.019372671 -0.021254314 -0.01897810 -0.019448229#
# A:B:C -0.056794241 -0.032271489 -0.06394902 -0.058777981#
# #
# $os$ci.upper#
#               Y1          Y2          Y3         Y4#
# A     0.01728361 0.023406280 0.021511086 0.02516584#
# B     0.02508243 0.033205742 0.019901057 0.01304749#
# C     0.01532233 0.009833557 0.007841911 0.01571607#
# A:B   0.07087834 0.092985379 0.073430965 0.05852476#
# A:C   0.03619728 0.068525130 0.025736751 0.04444319#
# B:C   0.01745616 0.017493364 0.046293234 0.03316605#
# A:B:C 0.04937453 0.068219046 0.034699641 0.04906812#
# MANOVA effect sizes for non parametric bootstrap should match original MANOVA#
Manova2.nb$multivariate$`effect size`[1,]$`effect size`#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
Manova2$multivariate$effect.sizes#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
# change names#
colnames(longdata)[1:3] <- c("behaviour", "drug", "genotype")  #
formula <- Y ~ behaviour + drug + genotype + behaviour*drug*genotype#
ptm <- proc.time()#
Manova3.pb <- pbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
proc.time() - ptm#
Manova2.pb$multivariate$`effect size`[1,]#
# $`effect size`#
#                              m.es.W   m.es.W.adj        m.os     m.os.adj#
# behaviour               0.006321495 -0.009662609 0.009339923 -0.035848080#
# drug                    0.008794802 -0.001778053 0.024358789 -0.003027631#
# genotype                0.007291175 -0.003297719 0.004652742 -0.010190156#
# behaviour:drug          0.074680195  0.012123363 0.216882839 -0.189788529#
# behaviour:genotype      0.024557383  0.008866617 0.079913105  0.037944229#
# drug:genotype           0.013033389  0.002505746 0.040898330  0.013976178#
# behaviour:drug:genotype 0.070785112  0.007964950 0.203641199 -0.209906529#
# #
# $bias#
#                             m.es.W m.es.W.adj       m.os   m.os.adj#
# behaviour               0.01855975 0.01885829 0.07147885 0.07473929#
# drug                    0.01264616 0.01278105 0.04846200 0.04982234#
# genotype                0.01288362 0.01302104 0.01288491 0.01307706#
# behaviour:drug          0.06299905 0.06725814 0.19085413 0.28996435#
# behaviour:genotype      0.01855467 0.01885314 0.06736398 0.07043673#
# drug:genotype           0.01266839 0.01280352 0.04780337 0.04914522#
# behaviour:drug:genotype 0.06305946 0.06732264 0.19338485 0.29380927#
# #
# $se#
#                              m.es.W  m.es.W.adj       m.os   m.os.adj#
# behaviour               0.007391676 0.007510577 0.02760328 0.02886237#
# drug                    0.006790988 0.006863426 0.02550344 0.02621932#
# genotype                0.013092887 0.013232545 0.01309469 0.01328996#
# behaviour:drug          0.016652622 0.017778433 0.04518877 0.06865521#
# behaviour:genotype      0.009686318 0.009842130 0.03426936 0.03583252#
# drug:genotype           0.008215331 0.008302962 0.03046648 0.03132168#
# behaviour:drug:genotype 0.017460286 0.018640699 0.04825305 0.07331077#
# #
# $ci.lower#
#                                m.es.W  m.es.W.adj         m.os    m.os.adj#
# behaviour               -0.0061966183 -0.02238209 -0.038325396 -0.08568761#
# drug                    -0.0026439821 -0.01333885 -0.019370453 -0.04798436#
# genotype                -0.0097900849 -0.02056118 -0.012429900 -0.02752754#
# behaviour:drug           0.0445032549 -0.02009371  0.131179364 -0.31999767#
# behaviour:genotype       0.0081987082 -0.00775520  0.020786843 -0.02387902#
# drug:genotype           -0.0003587838 -0.01102928 -0.009714395 -0.03805726#
# behaviour:drug:genotype  0.0375649177 -0.02750112  0.107546142 -0.35590358#
# #
# $ci.upper#
#                             m.es.W  m.es.W.adj       m.os    m.os.adj#
# behaviour               0.02223283 0.006504676 0.06804201  0.02553165#
# drug                    0.02481898 0.014417053 0.08372657  0.05800662#
# genotype                0.03829755 0.028039392 0.03566429  0.02128384#
# behaviour:drug          0.11057988 0.050450073 0.31050160 -0.04755370#
# behaviour:genotype      0.04432598 0.028953209 0.14856145  0.10972390#
# drug:genotype           0.03087657 0.020539256 0.10605600  0.08096284#
# behaviour:drug:genotype 0.10643812 0.046028299 0.29806086 -0.06645491#
Manova3.pb$multivariate$`effect size`[1,]#
# $`effect size`#
#                              m.es.W   m.es.W.adj        m.os     m.os.adj#
# behaviour               0.006321495 -0.009662609 0.009339923 -0.035848080#
# drug                    0.008794802 -0.001778053 0.024358789 -0.003027631#
# genotype                0.007291175 -0.003297719 0.004652742 -0.010190156#
# behaviour:drug          0.074680195  0.012123363 0.216882839 -0.189788529#
# behaviour:genotype      0.024557383  0.008866617 0.079913105  0.037944229#
# drug:genotype           0.013033389  0.002505746 0.040898330  0.013976178#
# behaviour:drug:genotype 0.070785112  0.007964950 0.203641199 -0.209906529#
# #
# $bias#
#                             m.es.W m.es.W.adj       m.os   m.os.adj#
# behaviour               0.01855975 0.01885829 0.07147885 0.07473929#
# drug                    0.01264616 0.01278105 0.04846200 0.04982234#
# genotype                0.01288362 0.01302104 0.01288491 0.01307706#
# behaviour:drug          0.06299905 0.06725814 0.19085413 0.28996435#
# behaviour:genotype      0.01855467 0.01885314 0.06736398 0.07043673#
# drug:genotype           0.01266839 0.01280352 0.04780337 0.04914522#
# behaviour:drug:genotype 0.06305946 0.06732264 0.19338485 0.29380927#
# #
# $se#
#                              m.es.W  m.es.W.adj       m.os   m.os.adj#
# behaviour               0.007391676 0.007510577 0.02760328 0.02886237#
# drug                    0.006790988 0.006863426 0.02550344 0.02621932#
# genotype                0.013092887 0.013232545 0.01309469 0.01328996#
# behaviour:drug          0.016652622 0.017778433 0.04518877 0.06865521#
# behaviour:genotype      0.009686318 0.009842130 0.03426936 0.03583252#
# drug:genotype           0.008215331 0.008302962 0.03046648 0.03132168#
# behaviour:drug:genotype 0.017460286 0.018640699 0.04825305 0.07331077#
# #
# $ci.lower#
#                                m.es.W  m.es.W.adj         m.os    m.os.adj#
# behaviour               -0.0061966183 -0.02238209 -0.038325396 -0.08568761#
# drug                    -0.0026439821 -0.01333885 -0.019370453 -0.04798436#
# genotype                -0.0097900849 -0.02056118 -0.012429900 -0.02752754#
# behaviour:drug           0.0445032549 -0.02009371  0.131179364 -0.31999767#
# behaviour:genotype       0.0081987082 -0.00775520  0.020786843 -0.02387902#
# drug:genotype           -0.0003587838 -0.01102928 -0.009714395 -0.03805726#
# behaviour:drug:genotype  0.0375649177 -0.02750112  0.107546142 -0.35590358#
# #
# $ci.upper#
#                             m.es.W  m.es.W.adj       m.os    m.os.adj#
# behaviour               0.02223283 0.006504676 0.06804201  0.02553165#
# drug                    0.02481898 0.014417053 0.08372657  0.05800662#
# genotype                0.03829755 0.028039392 0.03566429  0.02128384#
# behaviour:drug          0.11057988 0.050450073 0.31050160 -0.04755370#
# behaviour:genotype      0.04432598 0.028953209 0.14856145  0.10972390#
# drug:genotype           0.03087657 0.020539256 0.10605600  0.08096284#
# behaviour:drug:genotype 0.10643812 0.046028299 0.29806086 -0.06645491#
ptm <- proc.time()#
Manova3.nb <- nbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
proc.time() - ptm#
Manova3.nb$univariate$`effect size`[1,]$os$theta.hat#
#                                   Y1           Y2           Y3            Y4#
# behaviour               -0.009892405 -0.006881247 -0.010064481 -0.0087910552#
# drug                    -0.003749422  0.003227373 -0.005750012 -0.0093441813#
# genotype                -0.001663671 -0.002057491 -0.002506532 -0.0010343026#
# behaviour:drug           0.004864068  0.030287309  0.009226276 -0.0042855153#
# behaviour:genotype       0.002714171  0.022804152 -0.006424137  0.0067907933#
# drug:genotype           -0.007316264 -0.007784891  0.006310624  0.0004126559#
# behaviour:drug:genotype -0.008360759  0.015870492 -0.019819763 -0.0099409477#
# check calculates df correctly #
# when weird (indirect)#
colnames(longdata)[1:3] <- c("A", "B", "C")  #
formula <- Y ~ A + C + A*B + B*C#
Manova4b <- MANOVA(formula, longdata, ANOVA.effect.size="pes")	# default current os#
fitIIb <- lm(Y ~ A + C + A*B + B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIIb, type="II")#
summary(Manova.test, univariate=TRUE)#
# pes <- F/(F + dfe/df)#
n.terms <- dim(Manova4b$univariate$`sum of squares`)[1]-1#
df <- Manova4b$univariate$`sum of squares`[1:n.terms,"df"]#
dfe <- Manova4b$univariate$`sum of squares`[n.terms+1,"df"]#
SS <- Manova4b$univariate$`sum of squares`[1:n.terms,"Y1"]#
SSe <- Manova4b$univariate$`sum of squares`[n.terms+1,"Y1"]#
F <- (SS/df) / (SSe/dfe)#
F#
#         A         C         B       A:B       C:B #
# 0.3902152 0.3846345 0.6256947 1.0709598 0.3677693#
Manova4b$univariate$F#
#            Y1        Y2         Y3        Y4#
# A   0.3902152 0.5150278 0.39173533 0.4590230#
# C   0.3846345 0.1646967 0.07656816 0.6191110#
# B   0.6256947 1.0927746 0.44354782 0.1787889#
# A:B 1.0709598 1.5086530 1.18973951 0.9585751#
# C:B 0.3677693 0.2887029 1.69602197 1.0032087#
F/(F + dfe/df)#
#           A           C           B         A:B         C:B #
# 0.006839056 0.001130000 0.007307324 0.070283901 0.004308058#
Manova4b$univariate$pes[,"Y1"]#
#           A           C           B         A:B         C:B #
# 0.006839056 0.001130000 0.007307324 0.070283901 0.004308058 #
# calculate pes by bootstrap (nb pes is test pes; bootstrap used to calculate se and ci#
Manova5b.pb <- pbMANOVA(formula, longdata, H0=FALSE, ANOVA.effect.size = "pes", Nreps=1e3)#
Manova5b.nb <- nbMANOVA(formula, longdata, H0=FALSE, ANOVA.effect.size = "pes", Nreps=1e3)#
Manova5b.pb$univariate$`effect size`[1,]$pes$theta.hat#
#              Y1           Y2           Y3          Y4#
# A   0.006839056 0.0090068647 0.0068655153 0.008035316#
# C   0.001130000 0.0004841675 0.0002251498 0.001817605#
# B   0.007307324 0.0126929884 0.0051911212 0.002098984#
# A:B 0.070283901 0.0962438421 0.0774751267 0.063375851#
# C:B 0.004308058 0.0033850071 0.0195628580 0.011664782#
Manova5b.nb$univariate$`effect size`[1,]$pes$theta.hat#
#              Y1           Y2           Y3          Y4#
# A   0.006839056 0.0090068647 0.0068655153 0.008035316#
# C   0.001130000 0.0004841675 0.0002251498 0.001817605#
# B   0.007307324 0.0126929884 0.0051911212 0.002098984#
# A:B 0.070283901 0.0962438421 0.0774751267 0.063375851#
# C:B 0.004308058 0.0033850071 0.0195628580 0.011664782#
Manova4b$univariate$pes#
#              Y1           Y2           Y3          Y4#
# A   0.006839056 0.0090068419 0.0068654180 0.008035246#
# C   0.001130000 0.0004841883 0.0002251525 0.001817634#
# B   0.007307324 0.0126930093 0.0051911482 0.002099032#
# A:B 0.070283901 0.0962438150 0.0774748183 0.063375355#
# C:B 0.004308058 0.0033850273 0.0195630311 0.011664875#
# if pes is right then must be calculating dfe correctly#
# model <- Y ~ A + B + C + A*B*C#
# Manova3 <- MANOVA.f(Y, A=A, B=B, C=C, model, TYPE = "III", TEST="all", ANOVA=TRUE, ANOVA.effect.size="all", show.power=TRUE, alpha=0.05)#
formula <- Y ~ A + B + C + A*B*C#
Manova3 <- MANOVA(formula, longdata, TYPE="III", TEST="all")#
Manova3$multivariate$tests$Pillai#
#         test.stat         F df  dfe         p          es#
# A     0.031565874 0.4109690 24 1240 0.9949033 0.007891469#
# B     0.036539759 0.7144846 16 1240 0.7813194 0.009134940#
# C     0.007173599 0.5545519  4  307 0.6958421 0.007173599#
# A:B   0.298163370 1.0403692 96 1240 0.3789574 0.074540842#
# A:C   0.094711517 1.2530261 24 1240 0.1855365 0.023677879#
# B:C   0.049747518 0.9759965 16 1240 0.4807921 0.012436879#
# A:B:C 0.282356334 0.9810253 96 1240 0.5337190 0.070589084#
Manova3$multivariate$tests$Wilks#
#       test.stat         F df       dfe         p          es#
# A     0.9687420 0.4085394 24 1072.2051 0.9950992 0.007907794#
# B     0.9638229 0.7117807 16  938.5381 0.7838786 0.009169637#
# C     0.9928264 0.5545519  4  307.0000 0.6958421 0.007173599#
# A:B   0.7325609 1.0374998 96 1218.6942 0.3861568 0.074852613#
# A:C   0.9077732 1.2564732 24 1072.2051 0.1833348 0.023899932#
# B:C   0.9509327 0.9740160 16  938.5381 0.4832653 0.012499227#
# A:B:C 0.7455292 0.9768058 96 1218.6942 0.5450587 0.070785112#
Manova3$multivariate$tests$Hotelling#
#         test.stat         F df  dfe         p          es#
# A     0.031949883 0.4066954 24 1222 0.9952893 0.007924177#
# B     0.037159584 0.7095158 16 1222 0.7864510 0.009204388#
# C     0.007225432 0.5545519  4  307 0.6958421 0.007173599#
# A:B   0.325099221 1.0345605 96 1222 0.3934697 0.075165725#
# A:C   0.098882728 1.2586947 24 1222 0.1811677 0.024124312#
# B:C   0.050886164 0.9716077 16 1222 0.4857890 0.012561736#
# A:B:C 0.305617414 0.9725638 96 1222 0.5564549 0.070981089#
# export data for SPSS#
# data2 <- cbind(A=A, B=B, C=C, Y);#
# write.table(data2, file = "data2.csv",  sep = ",", row.names=FALSE)#
# Multivariate Testsa						#
# 		Effect			Value		F		Hypothesis df	Error df	Sig.#
# Intercept	Pillai's Trace		.988		6273.904b	4.000			307.000	.000#
# 		Wilks' Lambda		.012		6273.904b	4.000			307.000	.000#
# 		Hotelling's Trace		81.745	6273.904b	4.000			307.000	.000#
# 		Roy's Largest Root	81.745	6273.904b	4.000			307.000	.000#
# A		Pillai's Trace		.032		.411		24.000		1240.000	.995#
# 		Wilks' Lambda		.969		.409		24.000		1072.205	.995#
# 		Hotelling's Trace		.032		.407		24.000		1222.000	.995#
# 		Roy's Largest Root	.018		.913c		6.000			310.000	.486#
# B		Pillai's Trace		.037		.714		16.000		1240.000	.781#
# 		Wilks' Lambda		.964		.712		16.000		938.538	.784#
# 		Hotelling's Trace		.037		.710		16.000		1222.000	.786#
# 		Roy's Largest Root	.021		1.644c	4.000			310.000	.163#
# C		Pillai's Trace		.007		.555b		4.000			307.000	.696#
# 		Wilks' Lambda		.993		.555b		4.000			307.000	.696#
# 		Hotelling's Trace		.007		.555b		4.000			307.000	.696#
# 		Roy's Largest Root	.007		.555b		4.000			307.000	.696#
# A * B	Pillai's Trace		.298		1.040		96.000		1240.000	.379#
# 		Wilks' Lambda		.733		1.037		96.000		1218.694	.386#
# 		Hotelling's Trace		.325		1.035		96.000		1222.000	.393#
# 		Roy's Largest Root	.123		1.595c	24.000		310.000	.040#
# A * C	Pillai's Trace		.095		1.253		24.000		1240.000	.186#
# 		Wilks' Lambda		.908		1.256		24.000		1072.205	.183#
# 		Hotelling's Trace		.099		1.259		24.000		1222.000	.181#
# 		Roy's Largest Root	.061		3.128c	6.000			310.000	.005#
# B * C	Pillai's Trace		.050		.976		16.000		1240.000	.481#
# 		Wilks' Lambda		.951		.974		16.000		938.538	.483#
# 		Hotelling's Trace		.051		.972		16.000		1222.000	.486#
# 		Roy's Largest Root	.029		2.273c	4.000			310.000	.061#
# A * B * C	Pillai's Trace		.282		.981		96.000		1240.000	.534#
# 		Wilks' Lambda		.746		.977		96.000		1218.694	.545#
# 		Hotelling's Trace		.306		.973		96.000		1222.000	.556#
# 		Roy's Largest Root	.106		1.369c	24.000		310.000	.119#
# a Design: Intercept + A + B + C + A * B + A * C + B * C + A * B * C						#
# b Exact statistic						#
# c The statistic is an upper bound on F that yields a lower bound on the significance level.						#
# model <- Y ~ A; MANOVA.f(Y, model, TYPE = "II", TEST="Wilks", ANOVA=TRUE, ANOVA.effect.size="os", show.power=FALSE, alpha=0.05)#
N.tests <- length(Manova2$univariate$F[,1])#
effect.size.types <- c("es","pes","eps","peps","os","pos", "cf", "cf.pop")#
N.eff <- length( effect.size.types )#
N <- dim(Y)[1]#
df <- Manova2$univariate$`sum of squares`[1:N.tests,1]#
dfe <- Manova2$univariate$`sum of squares`[N.tests+1,1]	#
eff.sizes <- lapply(1:N.eff, function(iii){#
	effect.size.type <- effect.size.types[iii]#
	sapply(1:m, function(ii){#
		F <- Manova2$univariate$F[,ii]#
		SS <- Manova2$univariate$`sum of squares`[1:N.tests,ii+1]#
		SSe <- Manova2$univariate$`sum of squares`[N.tests+1,ii+1]#
		effect.size.calculator(F, df, dfe, N=N, effect.size.type=effect.size.type)#
	})#
})#
names(eff.sizes) <- effect.size.types#
eff.sizes#
# $es#
#              [,1]         [,2]         [,3]        [,4]#
# A     0.006283533 0.0080524881 0.0062002068 0.007432117#
# B     0.007042220 0.0132026394 0.0050956422 0.001461756#
# C     0.001032278 0.0004291737 0.0002019809 0.001670688#
# A:B   0.069687809 0.0901662846 0.0744193355 0.060691041#
# A:C   0.018924152 0.0378119113 0.0098504450 0.023056019#
# B:C   0.003465747 0.0021629273 0.0171888713 0.011244960#
# A:B:C 0.056427269 0.0757133332 0.0452942247 0.055019573#
# $pes#
#              [,1]        [,2]         [,3]        [,4]#
# A     0.007450059 0.010316908 0.0073120001 0.008776129#
# B     0.008342092 0.016804437 0.0060172081 0.001738354#
# C     0.001231587 0.000555284 0.0002398962 0.001986326#
# A:B   0.076848151 0.104525165 0.0812288624 0.067425883#
# A:C   0.022106075 0.046665635 0.0115669892 0.026732241#
# B:C   0.004122931 0.002792228 0.0200117681 0.013218964#
# A:B:C 0.063148530 0.089266214 0.0510620096 0.061512637#
# $eps#
#               [,1]         [,2]         [,3]         [,4]#
# A     -0.009919119 -0.006898375 -0.010091715 -0.008814796#
# B     -0.003759547  0.003235398 -0.005765639 -0.009369519#
# C     -0.001668164 -0.002062637 -0.002513339 -0.001037131#
# A:B    0.004877204  0.030362834  0.009251648 -0.004296612#
# A:C    0.002721500  0.022861049 -0.006441477  0.006809106#
# B:C   -0.007336021 -0.007804315  0.006327590  0.000413685#
# A:B:C -0.008383337  0.015909882 -0.019873463 -0.009968079#
# $peps#
#               [,1]         [,2]         [,3]          [,4]#
# A     -0.011760585 -0.008838249 -0.011901316 -0.0104088488#
# B     -0.004453494  0.004118043 -0.006808376 -0.0111424419#
# C     -0.001990247 -0.002668731 -0.002985136 -0.0012330727#
# A:B    0.005378331  0.035198081  0.010098194 -0.0047734037#
# A:C    0.003179096  0.028214002 -0.007563972  0.0078948004#
# B:C   -0.008727096 -0.010074969  0.007366759  0.0004863057#
# A:B:C -0.009381907  0.018757792 -0.022404157 -0.0111444489#
# $os#
#               [,1]         [,2]         [,3]          [,4]#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# $pos#
#               [,1]         [,2]         [,3]         [,4]#
# A     -0.009760522 -0.007338778 -0.009877086 -0.008640632#
# B     -0.003677148  0.003405239 -0.005619224 -0.009189392#
# C     -0.001628272 -0.002183088 -0.002441775 -0.001008947#
# A:B    0.004730349  0.031069643  0.008886644 -0.004193148#
# A:C    0.002645085  0.023574191 -0.006282037  0.006573891#
# B:C   -0.007200423 -0.008310564  0.006095068  0.000401876#
# A:B:C -0.008236848  0.016524634 -0.019638813 -0.009782187#
# $cf#
#             [,1]       [,2]       [,3]       [,4]#
# A     0.08663705 0.10210022 0.08582458 0.09409480#
# B     0.09171841 0.13073505 0.07780510 0.04172985#
# C     0.03511560 0.02357101 0.01549044 0.04461255#
# A:B   0.28852280 0.34165182 0.29733875 0.26888814#
# A:C   0.15035225 0.22124627 0.10817740 0.16573015#
# B:C   0.06434283 0.05291546 0.14290002 0.11574129#
# A:B:C 0.25962484 0.31307460 0.23196905 0.25601650#
# $cf.pop#
#             [,1]       [,2]       [,3]       [,4]#
# A     0.00000000 0.00000000 0.00000000 0.00000000#
# B     0.00000000 0.05845404 0.00000000 0.00000000#
# C     0.00000000 0.00000000 0.00000000 0.00000000#
# A:B   0.06894078 0.17906959 0.09469068 0.00000000#
# A:C   0.05149855 0.15538131 0.00000000 0.08134736#
# B:C   0.00000000 0.00000000 0.07830993 0.02005087#
# A:B:C 0.00000000 0.12962363 0.00000000 0.00000000#
Manova2$univariate$effect.sizes#
# $es#
#                Y1           Y2           Y3          Y4#
# A     0.006283533 0.0080524881 0.0062002068 0.007432117#
# B     0.007042220 0.0132026394 0.0050956422 0.001461756#
# C     0.001032278 0.0004291737 0.0002019809 0.001670688#
# A:B   0.069687809 0.0901662846 0.0744193355 0.060691041#
# A:C   0.018924152 0.0378119113 0.0098504450 0.023056019#
# B:C   0.003465747 0.0021629273 0.0171888713 0.011244960#
# A:B:C 0.056427269 0.0757133332 0.0452942247 0.055019573#
# $pes#
#                Y1          Y2           Y3          Y4#
# A     0.007450059 0.010316908 0.0073120001 0.008776129#
# B     0.008342092 0.016804437 0.0060172081 0.001738354#
# C     0.001231587 0.000555284 0.0002398962 0.001986326#
# A:B   0.076848151 0.104525165 0.0812288624 0.067425883#
# A:C   0.022106075 0.046665635 0.0115669892 0.026732241#
# B:C   0.004122931 0.002792228 0.0200117681 0.013218964#
# A:B:C 0.063148530 0.089266214 0.0510620096 0.061512637#
# $eps#
#                 Y1           Y2           Y3           Y4       #
# A     -0.009919119 -0.006898375 -0.010091715 -0.008814796#
# B     -0.003759547  0.003235398 -0.005765639 -0.009369519#
# C     -0.001668164 -0.002062637 -0.002513339 -0.001037131#
# A:B    0.004877204  0.030362834  0.009251648 -0.004296612#
# A:C    0.002721500  0.022861049 -0.006441477  0.006809106#
# B:C   -0.007336021 -0.007804315  0.006327590  0.000413685#
# A:B:C -0.008383337  0.015909882 -0.019873463 -0.009968079#
# $peps#
#                 Y1           Y2           Y3            Y4#
# A     -0.011760585 -0.008838249 -0.011901316 -0.0104088488#
# B     -0.004453494  0.004118043 -0.006808376 -0.0111424419#
# C     -0.001990247 -0.002668731 -0.002985136 -0.0012330727#
# A:B    0.005378331  0.035198081  0.010098194 -0.0047734037#
# A:C    0.003179096  0.028214002 -0.007563972  0.0078948004#
# B:C   -0.008727096 -0.010074969  0.007366759  0.0004863057#
# A:B:C -0.009381907  0.018757792 -0.022404157 -0.0111444489#
# $os#
#                 Y1           Y2           Y3            Y4#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# $pos#
#                 Y1           Y2           Y3           Y4#
# A     -0.009760522 -0.007338778 -0.009877086 -0.008640632#
# B     -0.003677148  0.003405239 -0.005619224 -0.009189392#
# C     -0.001628272 -0.002183088 -0.002441775 -0.001008947#
# A:B    0.004730349  0.031069643  0.008886644 -0.004193148#
# A:C    0.002645085  0.023574191 -0.006282037  0.006573891#
# B:C   -0.007200423 -0.008310564  0.006095068  0.000401876#
# A:B:C -0.008236848  0.016524634 -0.019638813 -0.009782187#
# $cf#
#               Y1         Y2         Y3         Y4#
# A     0.08663705 0.10210022 0.08582458 0.09409480#
# B     0.09171841 0.13073505 0.07780510 0.04172985#
# C     0.03511560 0.02357101 0.01549044 0.04461255#
# A:B   0.28852280 0.34165182 0.29733875 0.26888814#
# A:C   0.15035225 0.22124627 0.10817740 0.16573015#
# B:C   0.06434283 0.05291546 0.14290002 0.11574129#
# A:B:C 0.25962484 0.31307460 0.23196905 0.25601650#
# $cf.pop#
#               Y1         Y2         Y3         Y4#
# A     0.00000000 0.00000000 0.00000000 0.00000000#
# B     0.00000000 0.05845404 0.00000000 0.00000000#
# C     0.00000000 0.00000000 0.00000000 0.00000000#
# A:B   0.06894078 0.17906959 0.09469068 0.00000000#
# A:C   0.05149855 0.15538131 0.00000000 0.08134736#
# B:C   0.00000000 0.00000000 0.07830993 0.02005087#
# A:B:C 0.00000000 0.12962363 0.00000000 0.00000000#
F.values <- lapply(1:N.eff, function(iii){#
	effect.size.type <- effect.size.types[iii]#
	effect.size <- Manova2$univariate$effect.sizes[[effect.size.type]]#
	sapply(1:m, function(ii){#
		F.effect.size.calculator(effect.size=effect.size[,ii], df=df, dfe=dfe, N=N, effect.size.type=effect.size.type)#
	})#
})#
names(F.values) <- effect.size.types#
F.values$es#
#            [,1]      [,2]       [,3]      [,4]#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
Manova2$univariate$F#
#              Y1        Y2         Y3        Y4#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
Manova1$multivariate.tests$A$SSPH#
#          [,1]      [,2]      [,3]      [,4]#
# [1,] 933.7091  643.8352  680.0428  473.1853#
# [2,] 643.8352 1155.4145 1047.4997  667.8090#
# [3,] 680.0428 1047.4997 1173.5965  840.8618#
# [4,] 473.1853  667.8090  840.8618 1085.7157#
Manova2$multivariate$SSPH$A#
#          Y1        Y2        Y3        Y4#
# Y1 933.7091  643.8352  680.0428  473.1853#
# Y2 643.8352 1155.4145 1047.4997  667.8090#
# Y3 680.0428 1047.4997 1173.5965  840.8618#
# Y4 473.1853  667.8090  840.8618 1085.7157#
Manova1$multivariate.tests$B$SSPH#
#           [,1]      [,2]       [,3]       [,4]#
# [1,] 1046.4472  716.6249 -511.81625 -119.49546#
# [2,]  716.6249 1894.3932  529.21761 -336.08074#
# [3,] -511.8163  529.2176  964.53783    3.10417#
# [4,] -119.4955 -336.0807    3.10417  213.54682#
Manova2$multivariate$SSPH$B#
#           Y1        Y2         Y3         Y4#
# Y1 1046.4472  716.6249 -511.81625 -119.49546#
# Y2  716.6249 1894.3932  529.21761 -336.08074#
# Y3 -511.8163  529.2176  964.53783    3.10417#
# Y4 -119.4955 -336.0807    3.10417  213.54682#
Manova1$multivariate.tests$C$SSPH#
#            [,1]      [,2]      [,3]      [,4]#
# [1,]  153.39258 -97.19243  76.58072 -193.4894#
# [2,]  -97.19243  61.58295 -48.52299  122.5985#
# [3,]   76.58072 -48.52299  38.23266  -96.5989#
# [4,] -193.48935 122.59850 -96.59890  244.0674#
Manova2$multivariate$SSPH$C#
#            Y1        Y2        Y3        Y4#
# Y1  153.39258 -97.19243  76.58072 -193.4894#
# Y2  -97.19243  61.58295 -48.52299  122.5985#
# Y3   76.58072 -48.52299  38.23266  -96.5989#
# Y4 -193.48935 122.59850 -96.59890  244.0674#
Manova1$multivariate.tests$'A:B'$SSPH#
#           [,1]      [,2]      [,3]     [,4]#
# [1,] 10355.344  6068.672  3992.285 3917.855#
# [2,]  6068.672 12937.569  7267.808 4557.909#
# [3,]  3992.285  7267.808 14086.491 7214.207#
# [4,]  3917.855  4557.909  7214.207 8866.009#
Manova2$multivariate$SSPH$'A:B'#
#           Y1        Y2        Y3       Y4#
# Y1 10355.344  6068.672  3992.285 3917.855#
# Y2  6068.672 12937.569  7267.808 4557.909#
# Y3  3992.285  7267.808 14086.491 7214.207#
# Y4  3917.855  4557.909  7214.207 8866.009#
Manova1$multivariate.tests$'A:C'$SSPH#
#           [,1]     [,2]      [,3]      [,4]#
# [1,] 2812.0570 2875.919  697.4654  472.3167#
# [2,] 2875.9188 5425.460 1447.2806 -423.3800#
# [3,]  697.4654 1447.281 1864.5341 1627.5914#
# [4,]  472.3167 -423.380 1627.5914 3368.1620#
Manova2$multivariate$SSPH$'A:C'#
#           Y1       Y2        Y3        Y4#
# Y1 2812.0570 2875.919  697.4654  472.3167#
# Y2 2875.9188 5425.460 1447.2806 -423.3800#
# Y3  697.4654 1447.281 1864.5341 1627.5914#
# Y4  472.3167 -423.380 1627.5914 3368.1620#
Manova1$multivariate.tests$'B:C'$SSPH#
#            [,1]       [,2]       [,3]      [,4]#
# [1,]  514.99679  -28.63097 -374.31638 -585.7867#
# [2,]  -28.63097  310.35277  -29.83564 -235.4005#
# [3,] -374.31638  -29.83564 3253.64728  548.5185#
# [4,] -585.78670 -235.40049  548.51845 1642.7390#
Manova2$multivariate$SSPH$'B:C'#
#            Y1         Y2         Y3        Y4#
# Y1  514.99679  -28.63097 -374.31638 -585.7867#
# Y2  -28.63097  310.35277  -29.83564 -235.4005#
# Y3 -374.31638  -29.83564 3253.64728  548.5185#
# Y4 -585.78670 -235.40049  548.51845 1642.7390#
Manova1$multivariate.tests$'A:B:C'$SSPH#
#          [,1]      [,2]     [,3]     [,4]#
# [1,] 8384.878  3737.000 1225.204 1088.891#
# [2,] 3737.000 10863.807 4190.763 2090.254#
# [3,] 1225.204  4190.763 8573.550 2080.343#
Manova2$multivariate$SSPH$'A:B:C'#
#          Y1        Y2       Y3       Y4#
# Y1 8384.878  3737.000 1225.204 1088.891#
# Y2 3737.000 10863.807 4190.763 2090.254#
# Y3 1225.204  4190.763 8573.550 2080.343#
# Y4 1088.891  2090.254 2080.343 8037.596#
Manova1$multivariate.tests$'A:B:C'$SSPE#
#            [,1]      [,2]      [,3]       [,4]#
# [1,] 124395.375  48964.95  20321.15   9174.277#
# [2,]  48964.952 110837.18  59000.44  26435.177#
# [3,]  20321.147  59000.44 159331.51  65634.985#
# [4,]   9174.277  26435.18  65634.99 122627.688#
Manova2$multivariate$SSPE#
#            Y1        Y2        Y3         Y4#
# Y1 124395.375  48964.95  20321.15   9174.277#
# Y2  48964.952 110837.18  59000.44  26435.177#
# Y3  20321.147  59000.44 159331.51  65634.985#
# Y4   9174.277  26435.18  65634.99 122627.688#
Manova1$multivariate.tests$'A:B:C'#
# Sum of squares and products for the hypothesis:#
#          [,1]      [,2]     [,3]     [,4]#
# [1,] 8384.878  3737.000 1225.204 1088.891#
# [2,] 3737.000 10863.807 4190.763 2090.254#
# [3,] 1225.204  4190.763 8573.550 2080.343#
# [4,] 1088.891  2090.254 2080.343 8037.596#
# #
# Sum of squares and products for error:#
#            [,1]      [,2]      [,3]       [,4]#
# [1,] 124395.375  48964.95  20321.15   9174.277#
# [2,]  48964.952 110837.18  59000.44  26435.177#
# [3,]  20321.147  59000.44 159331.51  65634.985#
# [4,]   9174.277  26435.18  65634.99 122627.688#
# #
# Multivariate Tests: A:B:C#
#                  Df test stat  approx F num Df   den Df  Pr(>F)#
# Pillai           24 0.2823563 0.9810253     96 1240.000 0.53372#
# Wilks            24 0.7455292 0.9768058     96 1218.694 0.54506#
# Hotelling-Lawley 24 0.3056174 0.9725638     96 1222.000 0.55645#
# Roy              24 0.1059790 1.3688958     24  310.000 0.11930#
Manova2$multivariate$Wilks#
#       test.stat         F df       dfe         p          es#
# A     0.9749528 0.3260270 24 1072.2051 0.9991978 0.006321495#
# B     0.9652822 0.6823864 16  938.5381 0.8134232 0.008794802#
# C     0.9927088 0.5637078  4  307.0000 0.6891757 0.007291175#
# A:B   0.7331071 1.0349161 96 1218.6942 0.3925947 0.074680195#
# A:C   0.9053300 1.2919714 24 1072.2051 0.1572833 0.024557383#
# B:C   0.9488768 1.0162763 16  938.5381 0.4362680 0.013033389#
# A:B:C 0.7455292 0.9768058 96 1218.6942 0.5450587 0.070785112#
# car seems to be wrong for the calculation of some F values#
# at a guess it is taking the preceding df for wrong values#
# I need to check this further#
# but I am correct by Anova#
fitIV <- lm(Y ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIV, type="II")#
# summary(Manova.test, univariate=TRUE)#
summary(Manova.test, univariate=TRUE)[[8]]#
Manova2$univariate$`sum of squares`#
Manova2$univariate$F#
Manova2$univariate$`Pr(>F)`#
summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,2:5]#
summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,1]#
# car error#
# this gives the correct F values from car numbers#
MS <- summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,2:5] / #
matrix(rep(summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,1],each=4),byrow=TRUE, ncol=4)#
MSe <- summary(Manova.test, univariate=TRUE)[[8]][[1]][8,2:5] / #
summary(Manova.test, univariate=TRUE)[[8]][[1]][8,1] #
MS / matrix(rep(MSe, each=7), ncol=4)#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
Manova2$univariate$F#
#              Y1        Y2         Y3        Y4#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
# using ANOVA to confirm#
sapply(1:m, function(iii) Anova(lm(Y[,iii] ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum)), type="II")[1:7,"F value"] )#
#           [,1]      [,2]       [,3]      [,4]#
# [1,] 0.3878089 0.5385969 0.38056940 0.4574480#
# [2,] 0.6519507 1.3246031 0.46915664 0.1349570#
# [3,] 0.3822626 0.1722337 0.07438568 0.6169867#
# [4,] 1.0752532 1.5077104 1.14196680 0.9338857#
# [5,] 1.1679663 2.5290789 0.60462142 1.4191015#
# [6,] 0.3208500 0.2170036 1.58258230 1.0381936#
# [7,] 0.8706487 1.2660362 0.69504116 0.8466158#
lapply(1:m, function(iii) Anova(lm(Y[,iii] ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum)), type="II") )#
# could just do 4 ANOVAs #
# if Y is simply one column #
formula <- Y ~ A + B + C + A*B*C#
sapply(1: dim(Y)[2], function(ii) MANOVA(formula, longdata[,c(1:3,ii+3)])$ANOVA[,"p"] )#
           [,1]       [,2]      [,3]      [,4]#
A     0.8866611 0.77875718 0.8912229 0.8394840#
B     0.6258928 0.26064757 0.7583703 0.9693790#
C     0.5368488 0.67842133 0.7852367 0.4327692#
A:B   0.3708548 0.06241955 0.2960560 0.5555078#
A:C   0.3232311 0.02097027 0.7266195 0.2067099#
B:C   0.8639366 0.92888217 0.1787353 0.3875895#
A:B:C 0.6428363 0.18475070 0.8563287 0.6755199#
Manova2$univariate$`Pr(>F)`#
             Y1         Y2        Y3        Y4#
A     0.8866611 0.77875718 0.8912229 0.8394840#
B     0.6258928 0.26064757 0.7583703 0.9693790#
C     0.5368488 0.67842133 0.7852367 0.4327692#
A:B   0.3708548 0.06241955 0.2960560 0.5555078#
A:C   0.3232311 0.02097027 0.7266195 0.2067099#
B:C   0.8639366 0.92888217 0.1787353 0.3875895#
A:B:C 0.6428363 0.18475070 0.8563287 0.6755199#
formula <- Y ~ A + B + C#
Manova2 <- MANOVA(formula, longdata, TEST="all")#
Manova2$multivariate$tests$Pillai#
   test.stat         F df  dfe         p          es#
A 0.02181492 0.3363296 24 1472 0.9989738 0.005453729#
B 0.02742761 0.6351905 16 1472 0.8572654 0.006856903#
C 0.00644906 0.5922965  4  365 0.6684200 0.006449060#
Manova2$multivariate$tests$Wilks#
  test.stat         F df      dfe         p          es#
A 0.9783289 0.3345706 24 1274.543 0.9990118 0.005462361#
B 0.9727797 0.6327857 16 1115.731 0.8591075 0.006875672#
C 0.9935509 0.5922965  4  365.000 0.6684200 0.006449060#
Manova2$univariate$`Pr(>F)`#
# Type II/III sum of squares#
library(car)#
fitII <- lm(Y ~ A+B+C)#
Manova.test <- Anova(fitII, type="II")#
summary(Manova.test, univariate=TRUE)#
############################
rm( list=ls(all=TRUE ) )#
library( ANOVA.boot )#
model <- Y ~ A + B + C + A*B*C#
n.A <- 5#
n.B <- 3#
n.C <- 2#
n <- 4 	# sample size in each group#
N.var <- 3#
mu.m <- c(50, 100, 150)#
sd.m <-  c(5, 10, 15)#
set.seed(42)#
rel.A <- matrix( rep(1, n.A*N.var), ncol=n.A )#
rel.B <- matrix( rep(1, n.B*N.var), ncol=n.B )#
rel.C <- matrix( rep(1, n.C*N.var), ncol=n.C )#
# rel.A[3, 2]=1.1; rel.B[3, 3]=1.1; rel.C[3, 2]=1.1#
rel.amplitudes <- list(A=rel.A, B=rel.B, C=rel.C)#
p = 0.3#
levs <- c(A=n.A, B=n.B, C=n.C)#
groups <-  names(levs)#
n.groups <- length(groups)#
# set up nesting#
rep.each <- c(1, sapply(1:(n.groups-1), function(ii) prod( levs[1:ii] ) ) )#
rep.times <- c( sapply(2:n.groups, function(ii) prod( levs[ii:n.groups] ) ), 1)#
factors <- lapply(1:n.groups, function(ii){#
	rep( rep(seq_len(levs[ii]), each=rep.each[ii]), times = rep.times[ii] ) #
})#
names(factors) <- groups #
scales <- factors#
factors1 <- factors#
factors <- lapply(1:n.groups, function(iii) rep(factors[[iii]], each=n) )#
factors <- lapply(factors, factor)#
for(ii in (1:n.groups) ){ assign(groups[ii], factors[[ii]]) }#
scales <- lapply(1:N.var, function(i){#
	scales.tmp <- scales#
	for(ii in (1:n.groups) ) {#
		for( iii in (1:levs[ii]) ) { scales.tmp[[ii]] <- replace(scales.tmp[[ii]], scales.tmp[[ii]]==iii, rel.amplitudes[[ii]][i,iii]); scales.tmp[[ii]] }#
	}#
	scales.tmp#
})#
scales <- lapply( 1:N.var, function(iii) do.call(cbind, scales[[iii]]) )#
scales <- sapply( 1:N.var, function(iii) apply(scales[[iii]] ,1,prod) )#
g <- interaction(A,B,C)#
# scales is total no of groups ( prod(levs) ) by N.var matrix that specifies average amplitude to simulate#
N <- prod(levs)		# dim(scales)[1]#
mu.m.scales <- scales * matrix( rep(mu.m, N), byrow=TRUE, ncol=N.var )#
N <- n.A*n.B*n.C#
muij <- mu.m.scales#
sdij <- matrix( rep(sd.m, each=N), ncol=N.var)#
names(factors) <- c("A","B","C")#
# Y <- muij[rep(1:N, each=n), ]  #
TYPE = "II"#
TEST="all"#
ANOVA=TRUE#
ANOVA.effect.size="os"#
show.power=FALSE#
alpha=0.05#
ar=FALSE#
longdata <- list(#
			mu=cbind(do.call(cbind, factors1), muij), #
			sd=cbind(do.call(cbind, factors1), sdij)#
		)#
longdata <- lapply(1:length(longdata), function(iii){#
		colnames(longdata[[iii]]) <- c("A","B","C", "Y1","Y2","Y3") #
		longdata[[iii]]#
	})#
names(longdata) <- c("mu", "sd")#
rm( list = ls()[!(ls() %in% c('model','muij','sdij','factors', 'longdata', 'n','p','ar','TYPE','TEST','ANOVA','ANOVA.effect.size','show.power','alpha'))] )#
# the wrapper for this is below#
expected <- expected.MANOVA(model=model, muij=muij, sdij=sdij, factors=factors, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha)#
expected#
# $multivariate#
# $multivariate$tests#
# $multivariate$tests$Pillai#
#        test.stat         F df dfe         p         es#
# A     0.12765957 0.3333333 12  90 0.9810217 0.04255319#
# B     0.06521739 0.3258427  6  58 0.9207795 0.03260870#
# C     0.03296703 0.3181818  3  28 0.8121134 0.03296703#
# A:B   0.24489796 0.3333333 24  90 0.9983744 0.08163265#
# A:C   0.12765957 0.3333333 12  90 0.9810217 0.04255319#
# B:C   0.06521739 0.3258427  6  58 0.9207795 0.03260870#
# A:B:C 0.24489796 0.3333333 24  90 0.9983744 0.08163265#
# #
# $multivariate$tests$Wilks#
#       test.stat         F df      dfe         p         es#
# A     0.8776957 0.3132529 12 74.37254 0.9850227 0.04255319#
# B     0.9361901 0.3128332  6 56.00000 0.9276793 0.03243083#
# C     0.9673939 0.3145807  3 28.00000 0.8146843 0.03260608#
# A:B   0.7745497 0.3138801 24 81.80974 0.9989357 0.08163265#
# A:C   0.8776957 0.3132529 12 74.37254 0.9850227 0.04255319#
# B:C   0.9361901 0.3128332  6 56.00000 0.9276793 0.03243083#
# A:B:C 0.7745497 0.3138801 24 81.80974 0.9989357 0.08163265#
# #
# $multivariate$tests$Hotelling#
#        test.stat         F df dfe         p         es#
# A     0.13333333 0.2962963 12  80 0.9883685 0.04255319#
# B     0.06666667 0.3000000  6  54 0.9342081 0.03225806#
# C     0.03333333 0.3111111  3  28 0.8171615 0.03225806#
# A:B   0.26666667 0.2962963 24  80 0.9993230 0.08163265#
# A:C   0.13333333 0.2962963 12  80 0.9883685 0.04255319#
# B:C   0.06666667 0.3000000  6  54 0.9342081 0.03225806#
# A:B:C 0.26666667 0.2962963 24  80 0.9993230 0.08163265#
# #
# $multivariate$tests$`Roy's`#
#        test.stat         F df dfe         p         es#
# A     0.04444444 0.3333333  4  30 0.8533215 0.04255319#
# B     0.02222222 0.2148148  3  29 0.8853142 0.02173913#
# C     0.01111111 0.1037037  3  28 0.9572148 0.01098901#
# A:B   0.08888889 0.3333333  8  30 0.9461661 0.08163265#
# A:C   0.04444444 0.3333333  4  30 0.8533215 0.04255319#
# B:C   0.02222222 0.2148148  3  29 0.8853142 0.02173913#
# A:B:C 0.08888889 0.3333333  8  30 0.9461661 0.08163265#
# #
# #
# $multivariate$effect.sizes#
#           m.es.V  m.es.V.adj     m.es.W  m.es.W.adj     m.es.H  m.es.H.adj     m.es.R   m.es.R.adj       m.os      m.os.adj#
# A     0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# B     0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# C     0.03296703 0.007957560 0.03260608 0.007587277 0.03225806 0.007230256 0.01098901 -0.014588859 0.02420936 -0.0028959387#
# A:B   0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
# A:C   0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# B:C   0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# A:B:C 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
# #
# $multivariate$SSPH#
# $multivariate$SSPH$A#
#          [,1]     [,2] [,3]#
# [1,] 33.33333  20.0000   30#
# [2,] 20.00000 133.3333   60#
# [3,] 30.00000  60.0000  300#
# #
# $multivariate$SSPH$B#
#          [,1]     [,2] [,3]#
# [1,] 16.66667 10.00000   15#
# [2,] 10.00000 66.66667   30#
# [3,] 15.00000 30.00000  150#
# #
# $multivariate$SSPH$C#
#          [,1]     [,2] [,3]#
# [1,] 8.333333  5.00000  7.5#
# [2,] 5.000000 33.33333 15.0#
# [3,] 7.500000 15.00000 75.0#
# #
# $multivariate$SSPH$`A:B`#
#          [,1]     [,2] [,3]#
# [1,] 66.66667  40.0000   60#
# [2,] 40.00000 266.6667  120#
# [3,] 60.00000 120.0000  600#
# #
# $multivariate$SSPH$`A:C`#
#          [,1]     [,2] [,3]#
# [1,] 33.33333  20.0000   30#
# [2,] 20.00000 133.3333   60#
# [3,] 30.00000  60.0000  300#
# #
# $multivariate$SSPH$`B:C`#
#          [,1]     [,2] [,3]#
# [1,] 16.66667 10.00000   15#
# [2,] 10.00000 66.66667   30#
# [3,] 15.00000 30.00000  150#
# #
# $multivariate$SSPH$`A:B:C`#
#          [,1]     [,2] [,3]#
# [1,] 66.66667  40.0000   60#
# [2,] 40.00000 266.6667  120#
# [3,] 60.00000 120.0000  600#
# #
# #
# $multivariate$SSPE#
#      [,1] [,2] [,3]#
# [1,]  750  450  675#
# [2,]  450 3000 1350#
# [3,]  675 1350 6750#
# #
# #
# $univariate#
# $univariate$`sum of squares`#
#       df                           #
# A      4  33.333333  133.33333  300#
# B      2  16.666667   66.66667  150#
# C      1   8.333333   33.33333   75#
# A:B    8  66.666667  266.66667  600#
# A:C    4  33.333333  133.33333  300#
# B:C    2  16.666667   66.66667  150#
# A:B:C  8  66.666667  266.66667  600#
# error 90 750.000000 3000.00000 6750#
# #
# $univariate$F#
#       [,1] [,2] [,3]#
# A        1    1    1#
# B        1    1    1#
# C        1    1    1#
# A:B      1    1    1#
# A:C      1    1    1#
# B:C      1    1    1#
# A:B:C    1    1    1#
# #
# $univariate$`Pr(>F)`#
#            [,1]      [,2]      [,3]#
# A     0.4118909 0.4118909 0.4118909#
# B     0.3719296 0.3719296 0.3719296#
# C     0.3199916 0.3199916 0.3199916#
# A:B   0.4417604 0.4417604 0.4417604#
# A:C   0.4118909 0.4118909 0.4118909#
# B:C   0.3719296 0.3719296 0.3719296#
# A:B:C 0.4417604 0.4417604 0.4417604#
# #
# $univariate$os#
#       [,1] [,2] [,3]#
# A        0    0    0#
# B        0    0    0#
# C        0    0    0#
# A:B      0    0    0#
# A:C      0    0    0#
# B:C      0    0    0#
# A:B:C    0    0    0#
formula <- Y ~ A + B + C + A*B*C#
rm( list = ls()[!(ls() %in% c('formula','muij', 'factors', 'longdata','n','p','ar','TYPE','TEST','ANOVA','ANOVA.effect.size','show.power','alpha'))] )#
expected2 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha)#
expected2$multivariate$effect.sizes#
#          m.es.V m.es.V.adj    m.es.W m.es.W.adj    m.es.H m.es.H.adj    m.es.R m.es.R.adj      m.os   m.os.adj#
# A     0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B     0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# C     0.0329670  0.0079576 0.0326061  0.0075873 0.0322581  0.0072303 0.0109890 -0.0145889 0.0242094 -0.0028959#
# A:B   0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# A:C   0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B:C   0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# A:B:C 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# if SERLIN=TRUE  then effect.size tables are identical#
expected2.adj <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
	show.power=show.power, power.settings = list(ncp.method1 = "OS", ncp.method2 = "pop", Serlin = TRUE), alpha=alpha)#
expected2.adj$multivariate$effect.sizes#
#          m.es.V m.es.V.adj    m.es.W m.es.W.adj    m.es.H m.es.H.adj    m.es.R m.es.R.adj      m.os   m.os.adj#
# A     0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B     0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# C     0.0329670  0.0079576 0.0326061  0.0075873 0.0322581  0.0072303 0.0109890 -0.0145889 0.0242094 -0.0028959#
# A:B   0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# A:C   0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B:C   0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# A:B:C 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# However, expected2$multivariate$tests$Pillai etc returns unajdusted if FALSE and  expected2.adj$multivariate$tests$Pillai returns adjusted if SERLIN=TRUE#
sapply(1:length(expected2$multivariate$tests), function(ii) expected2$multivariate$tests[[ii]][,"es"] )#
           [,1]      [,2]      [,3]      [,4]#
A     0.0425532 0.0425532 0.0425532 0.0425532#
B     0.0326087 0.0324308 0.0322581 0.0217391#
C     0.0329670 0.0326061 0.0322581 0.0109890#
A:B   0.0816327 0.0816327 0.0816327 0.0816327#
A:C   0.0425532 0.0425532 0.0425532 0.0425532#
B:C   0.0326087 0.0324308 0.0322581 0.0217391#
A:B:C 0.0816327 0.0816327 0.0816327 0.0816327#
sapply(1:length(expected2.adj$multivariate$tests), function(ii) expected2.adj$multivariate$tests[[ii]][,"es"] )#
           [,1]      [,2]      [,3]       [,4]#
A     0.0092507 0.0092507 0.0092507  0.0092507#
B     0.0075900 0.0074075 0.0072303 -0.0035607#
C     0.0079576 0.0075873 0.0072303 -0.0145889#
A:B   0.0154440 0.0154440 0.0154440  0.0154440#
A:C   0.0092507 0.0092507 0.0092507  0.0092507#
B:C   0.0075900 0.0074075 0.0072303 -0.0035607#
A:B:C 0.0154440 0.0154440 0.0154440  0.0154440#
longdata <- lapply(1:length(longdata), function(iii){#
		colnames(longdata[[iii]]) <- c("size","car","city", "Y1","Y2","Y3") #
		longdata[[iii]]#
	})#
names(longdata) <- c("mu", "sd")#
formula <- Y ~ size*car*city#
expected3 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha)#
expected3$multivariate$effect.sizes#
#                   m.es.V  m.es.V.adj     m.es.W  m.es.W.adj     m.es.H  m.es.H.adj     m.es.R   m.es.R.adj       m.os      m.os.adj#
# size          0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# car           0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# city          0.03296703 0.007957560 0.03260608 0.007587277 0.03225806 0.007230256 0.01098901 -0.014588859 0.02420936 -0.0028959387#
# size:car      0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
# size:city     0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# car:city      0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# size:car:city 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
power.settings <- list(ncp.method1="MP", ncp.method2="F value", Serlin=TRUE)#
expected4 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, power.settings=power.settings, alpha=alpha)#
expected4$multivariate$tests$Wilks#
#               test.stat         F df      dfe         p          es ncp Power#
# size          0.8776957 0.9818783 12 233.1176 0.4668818 0.009250694   0  0.05#
# car           0.9361901 0.9831899  6 176.0000 0.4381451 0.007407486   0  0.05#
# city          0.9673939 0.9886822  3  88.0000 0.4019752 0.007587277   0  0.05#
# size:car      0.7745497 0.9815373 24 255.8280 0.4911317 0.015444015   0  0.05#
# size:city     0.8776957 0.9818783 12 233.1176 0.4668818 0.009250694   0  0.05#
# car:city      0.9361901 0.9831899  6 176.0000 0.4381451 0.007407486   0  0.05#
# size:car:city 0.7745497 0.9815373 24 255.8280 0.4911317 0.015444015   0  0.05#
power.settings.GPower <- list(ncp.method1="OS", ncp.method2="pop", Serlin=FALSE)#
expected5 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, power.settings=power.settings.GPower, alpha=alpha)#
expected5$multivariate$tests$Wilks#
#               test.stat         F df      dfe         p         es ncp Power#
# size          0.8776957 0.9818783 12 233.1176 0.4668818 0.04255319   0  0.05#
# car           0.9361901 0.9831899  6 176.0000 0.4381451 0.03243083   0  0.05#
# city          0.9673939 0.9886822  3  88.0000 0.4019752 0.03260608   0  0.05#
# size:car      0.7745497 0.9815373 24 255.8280 0.4911317 0.08163265   0  0.05#
# size:city     0.8776957 0.9818783 12 233.1176 0.4668818 0.04255319   0  0.05#
# car:city      0.9361901 0.9831899  6 176.0000 0.4381451 0.03243083   0  0.05#
# size:car:city 0.7745497 0.9815373 24 255.8280 0.4911317 0.08163265   0  0.05#
# G*Power calculate required values#
Wilks <- expected5$multivariate$tests$Wilks[,"test.stat"]#
model <- formula#
levs <- sapply(1:length(factors), function(ii) length(unique(factors[[ii]])))#
N <- n*prod(levs)#
k <- prod(levs)#
info <- terms(model)#
terms <- attr(info, "term.labels")#
n.terms <- length(terms)#
fac <- attr(info, "factors") #
mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
mat[mat == 0] = 1#
q <- apply(mat, 2, prod)#
m <- dim(muij)[2]#
p <- m#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- ANOVA.boot:::model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
Wilks.con <- ANOVA.boot:::Wilks.constants(N, k, p, q)#
# b <- sapply(q, max, p)#
s <- Wilks.con$s#
b <- Wilks.con$b#
# b for Serlin is different to b in ANOVA.boot:::Wilks.constants#
b.serlin <- sapply(q, max, p)#
Serlin.adj <- (N - 1)/(N - b.serlin - 1)#
df1 <- Wilks.con$df1#
df2 <- Wilks.con$df2#
es <- 1 - Wilks^(1/s) # not adjusted#
es#
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.04255319    0.03243083    0.03260608    0.08163265    0.04255319    0.03243083    0.08163265#
expected5$multivariate$effect.sizes[,"m.es.W"]#
#         size           car          city      size:car     size:city      car:city size:car:city #
#    0.04255319    0.03243083    0.03260608    0.08163265    0.04255319    0.03243083    0.08163265 #
es.adj <- 1 - (1 - es) * Serlin.adj#
es.adj#
#          size           car          city      size:car     size:city      car:city size:car:city #
#   0.009250694   0.007407486   0.007587277   0.015444015   0.009250694   0.007407486   0.015444015#
expected5$multivariate$effect.sizes[,"m.es.W.adj"]#
#          size           car          city      size:car     size:city      car:city size:car:city #
#   0.009250694   0.007407486   0.007587277   0.015444015   0.009250694   0.007407486   0.015444015#
# G*Power disagrees BUT I AM RECOMMENDING THE SERLIN ADJUSTED VALUES:#
# The approach of Muller and Peterson (1984) has found#
# widespread use; for instance, it has been adopted in the#
# SPSS software package. We nevertheless recommend the#
# approach of OBrien and Shieh (1999) because it has a#
# number of advantages: (1) Unlike the method of Muller#
# and Peterson, it provides the exact noncentral F distribution#
# whenever the hypothesis involves at most s = 1#
# positive eigenvalues; (2) its approximations for s > 1#
# eigenvalues are almost always more accurate than those#
# of Muller and Petersons method (which systematically#
# underestimates power); and (3) it provides a simpler form#
# of the noncentrality parameterthat is, lambda* N, where#
# lambda* is not a function of the total sample size.#
# what G*Power calls fsqr(U):#
fsqr.U <- (1 - (1 - es)^(s/b) )/(1 - es)^(s/b)#
# no. of eigenvalues : s#
# response variables : p #
# predictors 	   : q + 1 # ?#
# eg for size#
effect <- "size"#
Wilks[[effect]]#
# [1] 0.8776957#
q[[effect]]#
# [1] 4#
p#
# [1] 3#
fsqr.U[[effect]]#
# [1] 0.05054332#
# Post hoc: Compute achieved power - given alpha, sample size, and effect size #
# F tests - MANOVA: Special effects and interactions#
# Options:	Wilks U, Muller-Peterson Algorithm#
# Analysis:	Post hoc: Compute achieved power #
# Input:	Effect size f²(U)	=	0.0550655#
# 	a err prob					=	0.05#
# 	Total sample size				=	120#
# 	Number of groups				=	30#
# 	Number of predictors			=	4#
# 	Response variables			=	3#
# Output:	Noncentrality parameter ?	=	12.8367382#
# 	Critical F					=	1.7938771#
# 	Numerator df				=	12.0000000#
# 	Denominator df				=	233.1176#
# 	Power (1-ß err prob)			=	0.6136963#
# 	Wilks U					=	0.8677776#
expected5$multivariate$tests$Wilks[effect, "Power"]#
# [1] 0.7366695#
# agreement is ok (G*Power ends up with a different Wilks U which is odd#
# my default performs better for NULL#
expected4$multivariate$tests$Wilks[effect, "Power"]#
# [1] 0.05#
# Pillai#
Pillai <- expected5$multivariate$tests$Pillai[,"test.stat"] #
Pillai.con <- ANOVA.boot:::Pillai.constants(N, k, p, q)#
# #
s <- Pillai.con$s#
t <- Pillai.con$t#
u <- Pillai.con$u#
# b for Serlin is different to b in ANOVA.boot:::Wilks.constants#
b.serlin <- sapply(q, max, p)#
Serlin.adj <- (N - 1)/(N - b.serlin - 1)#
df1 <- Pillai.con$df1#
df2 <- Pillai.con$df2#
es = Pillai/s#
fsqr.V <- es/(1 - es)#
# IBM pg 548#
# The number of nonzero eigenvalues, s, is equal to min(p, n.h)#
n.h <-  q#
s <-  sapply(n.h, min, p)#
# n.e is degrees of freedom for error SCCP#
n.e <- N - k#
# b is max(p, n.h)#
b <- sapply(n.h, max, p)#
df1#
b * s#
df2#
s * (n.e - p + s) #
( n.e - p + s ) / b * Pillai / (s - Pillai)  # nb mistake ?? in IBM - s#
Pillai#
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.12765957    0.06521739    0.03296703    0.24489796    0.12765957    0.06521739    0.24489796 #
# predictors#
q#
fsqr.V #
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.04444444    0.03370787    0.03409091    0.08888889    0.04444444    0.03370787    0.08888889#
# G*Power#
#    0.04444444 	 0.03370786	   0.03409091    0.08888889	 0.04444444	   0.03370786   0.08888889#
Hotelling <- expected5$multivariate$tests$Hotelling[,"test.stat"] #
es <- expected5$multivariate$tests$Hotelling[,"es"]#
es/(1 - es)#
Hotelling.con <- ANOVA.boot:::Hotelling.constants(N, k, p, q)#
s <- Hotelling.con$s#
t <- Hotelling.con$t#
u <- Hotelling.con$u#
df1 <- Hotelling.con$df1#
df2 <- Hotelling.con$df2#
#######################################################################################################################################
#######################################################################################################################################
CI=0.95#
subset.names=c("MANOVA.effect.size", "ANOVA.effect.size")#
replacement = TRUE#
raw.return=FALSE#
Nreps=1e3 # Nreps=1e5#
N.dist=1e5#
dist="Normal"#
H0=FALSE#
return.average=TRUE#
p.adjust.method="Sidak-Holm"#
CI=0.95#
method.CI="perc"#
return.p=FALSE#
return.perms=TRUE#
TEST="Pillai"#
seed=42#
cov.mat=NULL#
# ptm <- proc.time()#
# MANOVA.sim.H1.2 <- MANOVA.MC(model=model, A=A, B=B, C=C, muij=muij, n=n, cov.mat=NULL, sdij=sdij, p=p, ar=ar, TYPE=TYPE, TEST=TEST, H0=H0, ANOVA=ANOVA, #
# 				ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha, p.adjust.method=p.adjust.method, factors=factors,#
# 				replacement=TRUE, return.average=TRUE, raw.return=raw.return, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps)#
# #
# proc.time() - ptm#
# #
rm( list = ls()[!(ls() %in% c('formula','longdata','muij', 'factors', 'n', 'cov.mat', 'p','ar','TYPE','TEST','ANOVA','ANOVA.effect.size','dist','show.power','alpha',#
				'p.adjust.method', 'replacement', 'return.average', 'raw.return', 'return.p', 'return.perms', 'CI', #
				'method.CI', 'N.dist', 'Nreps', 'seed'))] )#
p=0.3#
ptm <- proc.time()#
out <- sMANOVA(formula=formula, longdata=longdata, n=n, cov.mat=cov.mat, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
				dist=dist, alpha=alpha, p.adjust.method=p.adjust.method, replacement=replacement, return.average=return.average, #
				raw.return=raw.return, return.p=return.p, return.perms=FALSE, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)#
proc.time() - ptm#
#    user  system elapsed #
#  664.58    2.80  670.78
out
longdata
sMANOVA
MANOVA.MC
out$multivariate$`p(F>Fcrit)`[1,]$uncorrected#
#          size           car          city      size:car     size:city      car:city size:car:city #
#         0.042         0.050         0.055         0.057         0.035         0.053         0.055 #
out$univariate$`p(F>Fcrit)`[1,]$uncorrected#
#                  [,1]    [,2]    [,3]#
# size          0.05162 0.04987 0.04980#
# car           0.05076 0.04998 0.04982#
# city          0.05114 0.04982 0.05075#
# size:car      0.05067 0.04912 0.05039#
# size:city     0.05069 0.04976 0.04969#
# car:city      0.04901 0.05032 0.05084#
# size:car:city 0.04959 0.05020 0.04956#
out$univariate$`p(F>Fcrit)`[1,]$`pr (Sidak-Holm)`#
#                  [,1]    [,2]    [,3]#
# size          0.00772 0.00734 0.00727#
# car           0.00780 0.00703 0.00744#
# city          0.00747 0.00786 0.00747#
# size:car      0.00777 0.00684 0.00724#
# size:city     0.00773 0.00780 0.00724#
# car:city      0.00757 0.00781 0.00782#
# size:car:city 0.00735 0.00721 0.00781#
out$univariate$`effect size`[1,]$os$theta.hat#
out.e <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha)#
out.e$univariate$os#
#               Y1 Y2 Y3#
# size           0  0  0#
# car            0  0  0#
# city           0  0  0#
# size:car       0  0  0#
# size:city      0  0  0#
# car:city       0  0  0#
# size:car:city  0  0  0#
# doing Pillai#
out$multivariate$`effect size`[1,]$`effect size`[,"m.es.V"]#
out.e$multivariate$effect.sizes[,"m.es.V"]#
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.04255319    0.03260870    0.03296703    0.08163265    0.04255319    0.03260870    0.08163265 #
out$multivariate$`effect size`[1,]$`effect size`[,"m.es.V.adj"]#
out.e$multivariate$effect.sizes[,"m.es.V.adj"]#
#          size           car          city      size:car     size:city      car:city size:car:city #
#   0.009250694   0.007589955   0.007957560   0.015444015   0.009250694   0.007589955   0.015444015#
# simple ANOVA#
longdata.simple <- list(mu=longdata$mu[, -c(5,6)],sd=longdata$sd[, -c(5,6)])#
ptm <- proc.time()#
out.simple <- sMANOVA(formula=formula, longdata=longdata.simple, n=n, cov.mat=cov.mat, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
				dist=dist, alpha=alpha, p.adjust.method=p.adjust.method, replacement=replacement, return.average=return.average, #
				raw.return=raw.return, return.p=return.p, return.perms=FALSE, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)#
proc.time() - ptm#
# error here
COV.MAT
cov.mat
longdata=longdata.simple#
	show.power=FALSE#
	if (is.null(cov.mat)) {#
		longdata.sd <- longdata$sd#
		longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
	}else{#
		longdata.sd <- NULL#
	}#
	if ( dist=="Fleishman" ){#
		longdata.skew <- longdata$skew#
		longdata.kurt <- longdata$kurt#
		longdata <- longdata[[-which(names(longdata) %in% c("skew", "kurt"))]]#
	}#
	H0=FALSE #
	info <- terms(formula, "Error")#
	# indError <- attr(info, "specials")$Error#
	var <- attr(info, "variables")[[1L + 1]]#
	terms <- attr(info, "term.labels")#
	groups <- terms[attr(info, "order") == 1]#
	n.groups <- length(groups)#
	factors <- lapply(1:n.groups, function(ii) rep( longdata[,groups[ii]], each=n) )#
	names(factors) <- groups#
	muij <- longdata[ , -which(colnames(longdata) %in% groups)]#
	if (is.null(cov.mat)) sdij <- longdata.sd[ , -which(colnames(longdata.sd) %in% groups)]#
	if ( dist=="Fleishman" ){#
		skewij <- longdata.skew[ , -which(colnames(longdata.skew) %in% groups)]#
		kurtij <- longdata.kurt[ , -which(colnames(longdata.kurt) %in% groups)]#
	}else{#
		skewij=NULL#
		kurtij=NULL#
	}#
	if ( dim(longdata)[2] - n.groups==1 ){#
		muij <- matrix(muij, ncol=1)#
		sdij <- matrix(sdij, ncol=1)#
		if ( dist=="Fleishman" ){#
			skewij <- matrix(skewij, ncol=1)#
			kurtij <- matrix(kurtij, ncol=1)#
		}#
	}#
	out1 <- MANOVA.MC(model=formula, muij=muij, n=n, cov.mat=cov.mat, sdij=sdij, p=p, skewij=skewij, #
			kurtij=kurtij, ar=ar, TYPE=TYPE, TEST=TEST, H0=H0, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
    			dist=dist, show.power=show.power, alpha=alpha, p.adjust.method=p.adjust.method, factors=factors, replacement=replacement, return.average=return.average, #
    			raw.return=raw.return, return.p=return.p, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)
model=formula
if (sum(sapply(list(sdij, cov.mat), is.null)) != 1) #
        	stop("specify either sdij or cov.mat")#
    	if (!is.null(sdij) & is.null(p)) #
       	stop("specify correlation rho")#
 	if (dist=="Fleishman"){#
		if ( is.null(skewij) || is.null(kurtij))#
       		stop("specify skew and kurtosis")#
 		if (!identical(dim(muij), dim(skewij)) && length(skewij)==1){#
			skewij <- matrix(rep(skewij, m*k), ncol=m)#
		}else if ( !identical(dim(muij), dim(skewij)) ){#
			stop("skew not specified correctly")#
		}#
		if (!identical(dim(muij), dim(kurtij)) && length(kurtij)==1){#
			kurtij <- matrix(rep(kurtij, m*k), ncol=m)#
		}else if ( !identical(dim(muij), dim(kurtij)) ) {#
			stop("kurtosis not specified correctly")#
		}#
	}#
	info <- terms(model)#
	terms <- attr(info,"term.labels")#
	n.terms <- length(terms)#
	fac <-  attr(info,"factors")#
	groups <- terms[attr(info, "order") == 1]#
	n.groups <- length(groups)#
	N <- dim(muij)[1]#
	Y <- do.call(rbind, lapply(1:N, function(ii) matrix( rep( muij[ii,], each=n ), nrow=n ) ) )#
    	out <- ANOVA.boot:::model.matrix.f(info, Y=Y, factors = factors)#
    	X <- out$X#
    	z.rank <- dim(t(X) %*% Y)[1]#
	if (!length(factors)==0){#
		for(ii in (1:n.groups) ){#
			do.call("<-",list(groups[ii], as.factor(factors[[ii]]) ))#
		}#
		n.levs <- sapply(1:length(groups), function(iii) length( unique( factors[[iii]] ) ) )#
	}else{#
		n.levs <- sapply(1:length(groups), function(iii) length(unique( get(groups[iii] ) )) )#
	}
if (sum(sapply(list(sdij, cov.mat), is.null)) != 1) #
        	stop("specify either sdij or cov.mat")#
    	if (!is.null(sdij) & is.null(p)) #
       	stop("specify correlation rho")#
 	if (dist=="Fleishman"){#
		if ( is.null(skewij) || is.null(kurtij))#
       		stop("specify skew and kurtosis")#
 		if (!identical(dim(muij), dim(skewij)) && length(skewij)==1){#
			skewij <- matrix(rep(skewij, m*k), ncol=m)#
		}else if ( !identical(dim(muij), dim(skewij)) ){#
			stop("skew not specified correctly")#
		}#
		if (!identical(dim(muij), dim(kurtij)) && length(kurtij)==1){#
			kurtij <- matrix(rep(kurtij, m*k), ncol=m)#
		}else if ( !identical(dim(muij), dim(kurtij)) ) {#
			stop("kurtosis not specified correctly")#
		}#
	}#
	info <- terms(model)#
	terms <- attr(info,"term.labels")#
	n.terms <- length(terms)#
	fac <-  attr(info,"factors")#
	groups <- terms[attr(info, "order") == 1]#
	n.groups <- length(groups)#
	N <- dim(muij)[1]#
	Y <- do.call(rbind, lapply(1:N, function(ii) matrix( rep( muij[ii,], each=n ), nrow=n ) ) )#
    	out <- ANOVA.boot:::model.matrix.f(info, Y=Y, factors = factors)#
    	X <- out$X#
    	z.rank <- dim(t(X) %*% Y)[1]#
	if (!length(factors)==0){#
		for(ii in (1:n.groups) ){#
			do.call("<-",list(groups[ii], as.factor(factors[[ii]]) ))#
		}#
		n.levs <- sapply(1:length(groups), function(iii) length( unique( factors[[iii]] ) ) )#
	}else{#
		n.levs <- sapply(1:length(groups), function(iii) length(unique( get(groups[iii] ) )) )#
	}#
#
	k <- z.rank # prod(n.levs)#
	m <- dim(muij)[2]#
	if (length(n)==1) n <- rep(n, k)#
	N <- sum(n)#
	##
	mat <- fac[-1,] * matrix( rep(n.levs-1, n.terms), ncol=n.terms )#
	mat[mat==0]=1#
	df <- apply(mat,2,prod)#
	# dfe <-  N - k	#
	dfe <-  N - sum(df) - 1	#
	if (is.null(cov.mat)) cov.mat <- lapply(1:k, function(iii) cov.mat.rm(sdij[iii,], p=p, ar=ar) ) #
	if ( !is.list(cov.mat ) ) { cov.list <- rep(list(cov.mat),k) }else{ cov.list=cov.mat }#
	SSCP.MC <- SSCP.calculator(model=model, n=n, muij=muij, cov.list=cov.list, skewij=skewij, kurtij=kurtij, TYPE=TYPE, TEST=TEST, #
				H0=H0, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, dist=dist, alpha=alpha, factors=factors, #
				replacement=replacement, N.dist=N.dist, Nreps=Nreps, seed=seed)#
	data.MC <- SSCP.MC[[2]]#
	SSCP.MC <- SSCP.MC[[1]]
results <- MANOVA.analysis(SSCP.MC=SSCP.MC, N=N, df=df, dfe=dfe, m=m, TEST=TEST, H0=H0, show.power=show.power, ANOVA=ANOVA, #
				ANOVA.effect.size=ANOVA.effect.size, alpha=alpha)
out <- H1.summary(results=results, data.MC=data.MC, muij=muij, m=m, Y=Y, groups=groups, factors=factors, MANOVA.test=NULL, ANOVA=ANOVA, TEST=TEST, alpha=alpha, #
				p.adjust.method=p.adjust.method, n.terms=n.terms, terms=terms, CI=CI, method.CI=method.CI, ANOVA.effect.size=ANOVA.effect.size, return.p=return.p, return.average=return.average)
if (method.CI=="perc") CI.bias=TRUE else CI.bias=FALSE#
	adjust.name <- paste0("pr (",  p.adjust.method, ")")#
	# results.average <- average.final(XX=results, YY=MANOVA.test, CI=CI, method.CI=method.CI) #
	if (return.average){#
		if (!m==1){#
			if (is.null(MANOVA.test)){#
				data <- t(list(muij)) 	#
			}else{#
				data=t(Basic.analysis(input=list(Y), groups=groups, factors=factors))#
			}#
			simulation.data <- list(data=data, boot=t( Basic.analysis(input=data.MC, groups=groups, factors=factors) ) )#
		}else{#
			simulation.data <- list()#
			if (is.null(MANOVA.test)){#
				simulation.data$data <- t(list(muij))#
			}else{#
				simulation.data$data <- Basic.analysis(input=list(Y), groups=groups, factors=factors)#
			}#
			simulation.data$boot <- Basic.analysis(input=data.MC, groups=groups, factors=factors)#
			simulation.data <- t(simulation.data) #
		}#
	}#
	# simulation.data$data[1,]$mean; simulation.data$boot[1,]$mean; simulation.data$data[1,]$covariance; simulation.data$boot[1,]$covariance; #
	# simulation.data$data[1,]$sd; simulation.data$boot[1,]$sd; #
	possible.results <- permutation(n=2,r=n.terms,v=c(0,1),repeats.allowed=T)#
	colnames(possible.results) <- terms#
	if (ANOVA){#
		p.ANOVA.H1 <- P.ANOVA.MC(data=results, alpha=alpha, p.adjust.method=p.adjust.method, possible.results=possible.results) #
		if (return.p) {#
			ANOVA.raw.p <- t(list( uncorrected=p.ANOVA.H1$p.ANOVA.MC, corrected=p.ANOVA.H1$p.ANOVA.corrected.MC ))#
			colnames(ANOVA.raw.p)[[2]] <- adjust.name#
		}#
		if (!m==1){#
			if (!is.null(var.names)){ p.ANOVA.H1$permutations <- lapply(p.ANOVA.H1$permutations, function(x) { colnames(x) <- c(terms, var.names); x }) }#
			permutations1=t( p.ANOVA.H1$permutations ); p.ANOVA.H1 <- p.ANOVA.H1[1:2] #
		}else{#
			permutations1=t( list( p.ANOVA.H1$permutations ) ); p.ANOVA.H1 <- p.ANOVA.H1[1:2]   #
		}#
		if (!is.null(var.names) && !n.terms==1){ p.ANOVA.H1 <- lapply(p.ANOVA.H1, function(x) { colnames(x) <- var.names; x }) }#
		if (ANOVA.effect.size=="all") ANOVA.es.names = c("es","pes","eps","peps","os","pos","cf","cf.pop") else ANOVA.es.names = ANOVA.effect.size#
		p.ANOVA.H1 <- t(p.ANOVA.H1)#
		ANOVA.es <- bES.f(results=results, MANOVA.test=MANOVA.test, es.names=ANOVA.es.names, CI=CI, CI.method=method.CI, CI.bias=CI.bias, terms=terms, n.terms=n.terms, m=m, var.names=var.names)#
        names(ANOVA.es) <- ANOVA.es.names#
		ANOVA.es <- t(ANOVA.es)#
	}
var.names=NULL
MANOVA.test
MANOVA.test=NULL
if (method.CI=="perc") CI.bias=TRUE else CI.bias=FALSE#
	adjust.name <- paste0("pr (",  p.adjust.method, ")")#
	# results.average <- average.final(XX=results, YY=MANOVA.test, CI=CI, method.CI=method.CI) #
	if (return.average){#
		if (!m==1){#
			if (is.null(MANOVA.test)){#
				data <- t(list(muij)) 	#
			}else{#
				data=t(Basic.analysis(input=list(Y), groups=groups, factors=factors))#
			}#
			simulation.data <- list(data=data, boot=t( Basic.analysis(input=data.MC, groups=groups, factors=factors) ) )#
		}else{#
			simulation.data <- list()#
			if (is.null(MANOVA.test)){#
				simulation.data$data <- t(list(muij))#
			}else{#
				simulation.data$data <- Basic.analysis(input=list(Y), groups=groups, factors=factors)#
			}#
			simulation.data$boot <- Basic.analysis(input=data.MC, groups=groups, factors=factors)#
			simulation.data <- t(simulation.data) #
		}#
	}#
	# simulation.data$data[1,]$mean; simulation.data$boot[1,]$mean; simulation.data$data[1,]$covariance; simulation.data$boot[1,]$covariance; #
	# simulation.data$data[1,]$sd; simulation.data$boot[1,]$sd; #
	possible.results <- permutation(n=2,r=n.terms,v=c(0,1),repeats.allowed=T)#
	colnames(possible.results) <- terms#
	if (ANOVA){#
		p.ANOVA.H1 <- P.ANOVA.MC(data=results, alpha=alpha, p.adjust.method=p.adjust.method, possible.results=possible.results) #
		if (return.p) {#
			ANOVA.raw.p <- t(list( uncorrected=p.ANOVA.H1$p.ANOVA.MC, corrected=p.ANOVA.H1$p.ANOVA.corrected.MC ))#
			colnames(ANOVA.raw.p)[[2]] <- adjust.name#
		}#
		if (!m==1){#
			if (!is.null(var.names)){ p.ANOVA.H1$permutations <- lapply(p.ANOVA.H1$permutations, function(x) { colnames(x) <- c(terms, var.names); x }) }#
			permutations1=t( p.ANOVA.H1$permutations ); p.ANOVA.H1 <- p.ANOVA.H1[1:2] #
		}else{#
			permutations1=t( list( p.ANOVA.H1$permutations ) ); p.ANOVA.H1 <- p.ANOVA.H1[1:2]   #
		}#
		if (!is.null(var.names) && !n.terms==1){ p.ANOVA.H1 <- lapply(p.ANOVA.H1, function(x) { colnames(x) <- var.names; x }) }#
		if (ANOVA.effect.size=="all") ANOVA.es.names = c("es","pes","eps","peps","os","pos","cf","cf.pop") else ANOVA.es.names = ANOVA.effect.size#
		p.ANOVA.H1 <- t(p.ANOVA.H1)#
		ANOVA.es <- bES.f(results=results, MANOVA.test=MANOVA.test, es.names=ANOVA.es.names, CI=CI, CI.method=method.CI, CI.bias=CI.bias, terms=terms, n.terms=n.terms, m=m, var.names=var.names)#
        names(ANOVA.es) <- ANOVA.es.names#
		ANOVA.es <- t(ANOVA.es)#
	}
out <- lapply(1:length(es.names), function(iii){#
		if(!m==1){#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				c( results[ii,][[es.names[iii]]] )#
			})#
			)#
		}else{#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				if (length(es.names)==1) c( results[ii,]$ANOVA[,es.names[iii]] ) else c( results[ii,]$effect.sizes[,es.names[iii]] )#
			})#
			)#
			theta.b <- t(theta.b)#
		}#
		if ( is.null(MANOVA.test) || !CI.bias ) bias <- rep(0, dim(theta.b)[2])#
		if ( is.null(MANOVA.test) ){#
			theta.hat <- apply( theta.b, 2, mean.f )#
			bias <- rep(0, dim(theta.b)[2])#
		}else{#
			if(!m==1) theta.hat <- c(MANOVA.test[[es.names[iii]]]) else theta.hat <- MANOVA.test$ANOVA[,es.names[iii]]#
			bias <- colMeans(theta.b) - theta.hat#
			if ( !CI.bias ) bias1 <- rep(0, dim(theta.b)[2]) else bias1 <- bias#
		}#
		out2 <- CI.f2(theta.b=theta.b, theta.hat=theta.hat, bias=bias, CI=CI, CI.method=CI.method, terms=terms, n.terms=n.terms)#
		if (!is.null(var.names)) out2 <- lapply(out2, function(x) { colnames(x) <- var.names; x } )#
		if (m==1){#
			col.names <- names(out2)#
			out2 <- do.call(cbind, out2)#
			colnames(out2) <- col.names#
		}#
		out2#
	})
es.names=ANOVA.es.names
out <- lapply(1:length(es.names), function(iii){#
		if(!m==1){#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				c( results[ii,][[es.names[iii]]] )#
			})#
			)#
		}else{#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				if (length(es.names)==1) c( results[ii,]$ANOVA[,es.names[iii]] ) else c( results[ii,]$effect.sizes[,es.names[iii]] )#
			})#
			)#
			theta.b <- t(theta.b)#
		}#
		if ( is.null(MANOVA.test) || !CI.bias ) bias <- rep(0, dim(theta.b)[2])#
		if ( is.null(MANOVA.test) ){#
			theta.hat <- apply( theta.b, 2, mean.f )#
			bias <- rep(0, dim(theta.b)[2])#
		}else{#
			if(!m==1) theta.hat <- c(MANOVA.test[[es.names[iii]]]) else theta.hat <- MANOVA.test$ANOVA[,es.names[iii]]#
			bias <- colMeans(theta.b) - theta.hat#
			if ( !CI.bias ) bias1 <- rep(0, dim(theta.b)[2]) else bias1 <- bias#
		}#
		out2 <- CI.f2(theta.b=theta.b, theta.hat=theta.hat, bias=bias, CI=CI, CI.method=CI.method, terms=terms, n.terms=n.terms)#
		if (!is.null(var.names)) out2 <- lapply(out2, function(x) { colnames(x) <- var.names; x } )#
		if (m==1){#
			col.names <- names(out2)#
			out2 <- do.call(cbind, out2)#
			colnames(out2) <- col.names#
		}#
		out2#
	})
CI.method='perc'
out <- lapply(1:length(es.names), function(iii){#
		if(!m==1){#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				c( results[ii,][[es.names[iii]]] )#
			})#
			)#
		}else{#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				if (length(es.names)==1) c( results[ii,]$ANOVA[,es.names[iii]] ) else c( results[ii,]$effect.sizes[,es.names[iii]] )#
			})#
			)#
			theta.b <- t(theta.b)#
		}#
		if ( is.null(MANOVA.test) || !CI.bias ) bias <- rep(0, dim(theta.b)[2])#
		if ( is.null(MANOVA.test) ){#
			theta.hat <- apply( theta.b, 2, mean.f )#
			bias <- rep(0, dim(theta.b)[2])#
		}else{#
			if(!m==1) theta.hat <- c(MANOVA.test[[es.names[iii]]]) else theta.hat <- MANOVA.test$ANOVA[,es.names[iii]]#
			bias <- colMeans(theta.b) - theta.hat#
			if ( !CI.bias ) bias1 <- rep(0, dim(theta.b)[2]) else bias1 <- bias#
		}#
		out2 <- CI.f2(theta.b=theta.b, theta.hat=theta.hat, bias=bias, CI=CI, CI.method=CI.method, terms=terms, n.terms=n.terms)#
		if (!is.null(var.names)) out2 <- lapply(out2, function(x) { colnames(x) <- var.names; x } )#
		if (m==1){#
			col.names <- names(out2)#
			out2 <- do.call(cbind, out2)#
			colnames(out2) <- col.names#
		}#
		out2#
	})
iii=1
m
longdata.simple
m
dim(muij)[2]
muij
longdata[ , -which(colnames(longdata) %in% groups)]
groups
colnames(longdata)
longdata.simple
ii=1
iii=1
results[ii,][[es.names[iii]]]
results[ii,]
theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				if (length(es.names)==1) c( results[ii,]$ANOVA[,es.names[iii]] ) else c( results[ii,]$effect.sizes[,es.names[iii]] )#
			})#
			)
theta.b
theta.b <- t(theta.b)
theta.b
results[ii,]
if ( is.null(MANOVA.test) || !CI.bias ) bias <- rep(0, dim(theta.b)[2])
apply( theta.b, 2, mean.f )
apply( theta.b, 1, mean.f )
theta.b
theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				if (length(es.names)==1) c( results[ii,]$ANOVA[,es.names[iii]] ) else c( results[ii,]$effect.sizes[,es.names[iii]] )#
			})#
			)
theta.b
dim(theta.b)
dim(theta.b[,1])
out <- lapply(1:length(es.names), function(iii){#
		if(!m==1){#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				c( results[ii,][[es.names[iii]]] )#
			})#
			)#
		}else{#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				if (length(es.names)==1) c( results[ii,]$ANOVA[,es.names[iii]] ) else c( results[ii,]$effect.sizes[,es.names[iii]] )#
			})#
			)#
			if is.null()dim(theta.b)) theta.b <- t(theta.b)#
		}#
		if ( is.null(MANOVA.test) || !CI.bias ) bias <- rep(0, dim(theta.b)[2])#
		if ( is.null(MANOVA.test) ){#
			theta.hat <- apply( theta.b, 2, mean.f )#
			bias <- rep(0, dim(theta.b)[2])#
		}else{#
			if(!m==1) theta.hat <- c(MANOVA.test[[es.names[iii]]]) else theta.hat <- MANOVA.test$ANOVA[,es.names[iii]]#
			bias <- colMeans(theta.b) - theta.hat#
			if ( !CI.bias ) bias1 <- rep(0, dim(theta.b)[2]) else bias1 <- bias#
		}#
		out2 <- CI.f2(theta.b=theta.b, theta.hat=theta.hat, bias=bias, CI=CI, CI.method=CI.method, terms=terms, n.terms=n.terms)#
		if (!is.null(var.names)) out2 <- lapply(out2, function(x) { colnames(x) <- var.names; x } )#
		if (m==1){#
			col.names <- names(out2)#
			out2 <- do.call(cbind, out2)#
			colnames(out2) <- col.names#
		}#
		out2#
	})
is.null(dim(theta.b))
out <- lapply(1:length(es.names), function(iii){#
		if(!m==1){#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				c( results[ii,][[es.names[iii]]] )#
			})#
			)#
		}else{#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				if (length(es.names)==1) c( results[ii,]$ANOVA[,es.names[iii]] ) else c( results[ii,]$effect.sizes[,es.names[iii]] )#
			})#
			)#
			if is.null(dim(theta.b)) theta.b <- t(theta.b)#
		}#
		if ( is.null(MANOVA.test) || !CI.bias ) bias <- rep(0, dim(theta.b)[2])#
		if ( is.null(MANOVA.test) ){#
			theta.hat <- apply( theta.b, 2, mean.f )#
			bias <- rep(0, dim(theta.b)[2])#
		}else{#
			if(!m==1) theta.hat <- c(MANOVA.test[[es.names[iii]]]) else theta.hat <- MANOVA.test$ANOVA[,es.names[iii]]#
			bias <- colMeans(theta.b) - theta.hat#
			if ( !CI.bias ) bias1 <- rep(0, dim(theta.b)[2]) else bias1 <- bias#
		}#
		out2 <- CI.f2(theta.b=theta.b, theta.hat=theta.hat, bias=bias, CI=CI, CI.method=CI.method, terms=terms, n.terms=n.terms)#
		if (!is.null(var.names)) out2 <- lapply(out2, function(x) { colnames(x) <- var.names; x } )#
		if (m==1){#
			col.names <- names(out2)#
			out2 <- do.call(cbind, out2)#
			colnames(out2) <- col.names#
		}#
		out2#
	})
is.null(dim(theta.b))
if(!m==1){#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				c( results[ii,][[es.names[iii]]] )#
			})#
			)#
		}else{#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				if (length(es.names)==1) c( results[ii,]$ANOVA[,es.names[iii]] ) else c( results[ii,]$effect.sizes[,es.names[iii]] )#
			})#
			)#
			if is.null(dim(theta.b)) theta.b <- t(theta.b)#
		}#
		if ( is.null(MANOVA.test) || !CI.bias ) bias <- rep(0, dim(theta.b)[2])#
		if ( is.null(MANOVA.test) ){#
			theta.hat <- apply( theta.b, 2, mean.f )#
			bias <- rep(0, dim(theta.b)[2])#
		}else{#
			if(!m==1) theta.hat <- c(MANOVA.test[[es.names[iii]]]) else theta.hat <- MANOVA.test$ANOVA[,es.names[iii]]#
			bias <- colMeans(theta.b) - theta.hat#
			if ( !CI.bias ) bias1 <- rep(0, dim(theta.b)[2]) else bias1 <- bias#
		}#
		out2 <- CI.f2(theta.b=theta.b, theta.hat=theta.hat, bias=bias, CI=CI, CI.method=CI.method, terms=terms, n.terms=n.terms)#
		if (!is.null(var.names)) out2 <- lapply(out2, function(x) { colnames(x) <- var.names; x } )#
		if (m==1){#
			col.names <- names(out2)#
			out2 <- do.call(cbind, out2)#
			colnames(out2) <- col.names#
		}#
		out2
out <- lapply(1:length(es.names), function(iii){#
		if(!m==1){#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				c( results[ii,][[es.names[iii]]] )#
			})#
			)#
		}else{#
			theta.b <- t( sapply(1:dim(results)[1], function(ii){#
				if (length(es.names)==1) c( results[ii,]$ANOVA[,es.names[iii]] ) else c( results[ii,]$effect.sizes[,es.names[iii]] )#
			})#
			)#
			if (is.null(dim(theta.b))) theta.b <- t(theta.b)#
		}#
		if ( is.null(MANOVA.test) || !CI.bias ) bias <- rep(0, dim(theta.b)[2])#
		if ( is.null(MANOVA.test) ){#
			theta.hat <- apply( theta.b, 2, mean.f )#
			bias <- rep(0, dim(theta.b)[2])#
		}else{#
			if(!m==1) theta.hat <- c(MANOVA.test[[es.names[iii]]]) else theta.hat <- MANOVA.test$ANOVA[,es.names[iii]]#
			bias <- colMeans(theta.b) - theta.hat#
			if ( !CI.bias ) bias1 <- rep(0, dim(theta.b)[2]) else bias1 <- bias#
		}#
		out2 <- CI.f2(theta.b=theta.b, theta.hat=theta.hat, bias=bias, CI=CI, CI.method=CI.method, terms=terms, n.terms=n.terms)#
		if (!is.null(var.names)) out2 <- lapply(out2, function(x) { colnames(x) <- var.names; x } )#
		if (m==1){#
			col.names <- names(out2)#
			out2 <- do.call(cbind, out2)#
			colnames(out2) <- col.names#
		}#
		out2#
	})
out
library(ANOVA.boot)
source("/Users/euo9382/installed_old.rda")
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
# more complicated simple ANOVA#
# if only only data column then does straight-forward ANOVA and only returns univariate#
rm( list=ls(all=TRUE ) )#
library( ANOVA.boot )#
n.A <- 8#
n.B <- 5#
n.C <- 3#
set.seed(42)#
N <- lapply(1:n.C, function(iii){#
		matrix( sample(4:7,n.A*n.B,replace=T),  ncol = n.B )  	# N for n.A*n.B groups#
	})#
#
A <- lapply(1:n.C, function(iii){#
		do.call(c, sapply(1:n.B, function(ii) rep(seq_len(n.A), N[[iii]][,ii])) )#
	})#
#
A <- do.call(c, A)#
A <- as.factor(A)#
B <- lapply(1:n.C, function(iii){#
		rep(seq_len(n.B), apply(N[[iii]],2,sum))#
	})#
B <- do.call(c, B)#
B <- as.factor(B)#
#
C <- lapply(1:n.C, function(iii){#
	rep(iii, sum(N[[iii]]))#
	})#
#
C <- do.call(c, C)#
C <- as.factor(C)#
#
Y <- rnorm(length(C), mean = 0, sd = 1)#
longdata <- cbind(behaviour=A, drug=B, genotype=C, Y=Y)#
formula <- Y ~ behaviour + drug + genotype + behaviour*drug*genotype#
Manova.II <- MANOVA(formula, longdata)#
Manova.II[1:2]#
# $ANOVA#
#                         df         SS          F         p           os#
# behaviour                7  4.2059115 0.63575086 0.7264234 -0.003983905#
# drug                     4  5.1845171 1.37142857 0.2425836  0.002321388#
# genotype                 2  0.1218753 0.06447786 0.9375643 -0.002923456#
# behaviour:drug          28 31.8200322 1.20245118 0.2201293  0.008857085#
# behaviour:genotype      14  4.9204075 0.37187579 0.9821924 -0.013739977#
# drug:genotype            8  5.2764176 0.69786922 0.6935917 -0.003776569#
# behaviour:drug:genotype 56 54.3319455 1.02657834 0.4262949  0.002325565#
# #
# $error#
#       df       SS #
# 527.0000 498.0647#
#
# check#
library(car)#
#
longdata.df <- as.data.frame(longdata)#
longdata.df[,1] <- as.factor(longdata.df[,1])#
longdata.df[,2] <- as.factor(longdata.df[,2])#
longdata.df[,3] <- as.factor(longdata.df[,3])#
fit <- lm(Y ~ behaviour*drug*genotype, data=longdata.df)#
# fit <- lm(Y ~ behaviour+drug+genotype, data=longdata.df)#
Anova(fit, type="II")#
#
# fit <- lm(Y ~ A*B*C) 				# gives same#
Anova(fit, type="II")#
# Anova Table (Type II tests)#
# #
# Response: Y#
#                         Sum Sq  Df F value Pr(>F)#
# behaviour                 4.21   7  0.6358 0.7264#
# drug                      5.18   4  1.3714 0.2426#
# genotype                  0.12   2  0.0645 0.9376#
# behaviour:drug           31.82  28  1.2025 0.2201#
# behaviour:genotype        4.92  14  0.3719 0.9822#
# drug:genotype             5.28   8  0.6979 0.6936#
# behaviour:drug:genotype  54.33  56  1.0266 0.4263#
# Residuals               498.06 527#
# typeIII#
Manova.III <- MANOVA(formula, TYPE="III", longdata)#
Manova.III[1:2]#
# $ANOVA#
#                         df         SS          F         p           os#
# behaviour                7  4.5084525 0.68148191 0.6878381 -0.003458515#
# drug                     4  5.8329358 1.54295079 0.1883958  0.003368821#
# genotype                 2  0.1049458 0.05552133 0.9459974 -0.002930081#
# behaviour:drug          28 33.1525836 1.25280713 0.1760678  0.010980064#
# behaviour:genotype      14  5.7805344 0.43688267 0.9625643 -0.012228817#
# drug:genotype            8  6.5597757 0.86760865 0.5436933 -0.001642885#
# behaviour:drug:genotype 56 54.3319455 1.02657834 0.4262949  0.002308732#
# #
# $error#
#       df       SS #
# 527.0000 498.0647#
fit <- lm(Y ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Anova(fit, type="III") #
#
# Anova Table (Type III tests)#
# #
# Response: Y#
#             Sum Sq  Df F value Pr(>F)#
# (Intercept)   0.61   1  0.6413 0.4236#
# A             4.51   7  0.6815 0.6878#
# B             5.83   4  1.5430 0.1884#
# C             0.10   2  0.0555 0.9460#
# A:B          33.15  28  1.2528 0.1761#
# A:C           5.78  14  0.4369 0.9626#
# B:C           6.56   8  0.8676 0.5437#
# A:B:C        54.33  56  1.0266 0.4263#
# Residuals   498.06 527  #
# method for type III using car must change contrasts#
options('contrasts')$contrasts#
# [1] "contr.treatment" "contr.poly"#
fit <- lm(Y ~ behaviour*drug*genotype, data=longdata.df, #
		contrasts=list(behaviour=contr.sum, drug=contr.sum, genotype=contr.sum))#
#
Anova(fit, type="III") #
# Anova Table (Type III tests)#
# #
# Response: Y#
#                         Sum Sq  Df F value Pr(>F)#
# (Intercept)               0.61   1  0.6413 0.4236#
# behaviour                 4.51   7  0.6815 0.6878#
# drug                      5.83   4  1.5430 0.1884#
# genotype                  0.10   2  0.0555 0.9460#
# behaviour:drug           33.15  28  1.2528 0.1761#
# behaviour:genotype        5.78  14  0.4369 0.9626#
# drug:genotype             6.56   8  0.8676 0.5437#
# behaviour:drug:genotype  54.33  56  1.0266 0.4263#
# Residuals               498.06 527 #
# bootstrap longdata#
# here#
#
Manova.pb.H1 <- pbMANOVA(formula, longdata, H0=FALSE, Nreps=1e4)#
Manova.pb.H1$univariate#
# $`p(F>Fcrit)`#
#      uncorrected pr (Sidak-Holm)#
# [1,] numeric,7   numeric,7      #
# #
# $permutations#
#      [,1]        #
# [1,] numeric,1152#
# #
# $`effect size`#
#      os        #
# [1,] numeric,35#
#
# if H0 is FALSE then returns probability reject H0 for each ie 'post-hoc power'#
#
Manova.pb.H1$univariate$`p(F>Fcrit)`[1,]$uncorrected#
#               behaviour                    drug                genotype          behaviour:drug      behaviour:genotype           drug:genotype behaviour:drug:genotype #
#                  0.2655                  0.4280                  0.0580                  0.9240                  0.2198                  0.3167                  0.9798 #
Manova.pb.H1$univariate$`effect size`[1,]$os#
#                            theta.hat        bias          se     ci.lower    ci.upper#
# behaviour               -0.003983905 0.009710837 0.007209101 -0.014782765 0.012890944#
# drug                     0.002321388 0.004861694 0.007168955 -0.008116897 0.019055664#
# genotype                -0.002923456 0.003036658 0.002807653 -0.005651828 0.004658422#
# behaviour:drug           0.008857085 0.034711740 0.017802872 -0.022502950 0.046636714#
# behaviour:genotype      -0.013739977 0.020128727 0.009402686 -0.028857674 0.007612293#
# drug:genotype           -0.003776569 0.011035539 0.007804447 -0.016223707 0.014037264#
# behaviour:drug:genotype  0.002325565 0.071064704 0.023821727 -0.041303486 0.052073200#
Manova.nb.H1 <- nbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
Manova.nb.H1$univariate$`effect size`[1,]$os#
Manova.pb.H0 <- pbMANOVA(formula, longdata, H0=TRUE, Nreps=1e4)#
Manova.pb.H0$univariate#
#
Manova.nb.H0 <- nbMANOVA(formula, longdata, H0=TRUE, Nreps=1e3)#
Manova.nb.H0$univariate#
#
Manova.pb.H0$univariate$`p(F>Fcrit)`[1,]#
#
Y <- rnorm(length(C), mean = 0, sd = 1)#
longdata <- cbind(behaviour=A, drug=B, genotype=C, Y=Y)#
formula <- Y ~ behaviour + drug + genotype + behaviour*drug*genotype#
#
longdata <- cbind(A=A, B=B, C=C, Y=Y)#
formula <- Y ~ A + B + C + A*B*C#
#
Manova.nb.H1 <- nbMANOVA(formula, longdata, H0=TRUE, Nreps=1e3)#
#
###################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
# example starts here#
rm( list=ls(all=TRUE ) )#
library( ANOVA.boot )#
n.A <- 7#
n.B <- 5#
n.C <- 2#
set.seed(42)#
N <- lapply(1:n.C, function(iii){#
		matrix( sample(4:7,n.A*n.B,replace=T),  ncol = n.B )  	# N for n.A*n.B groups#
	})#
#
A <- lapply(1:n.C, function(iii){#
		do.call(c, sapply(1:n.B, function(ii) rep(seq_len(n.A), N[[iii]][,ii])) )#
	})#
#
A <- do.call(c, A)#
A <- as.factor(A)#
B <- lapply(1:n.C, function(iii){#
		rep(seq_len(n.B), apply(N[[iii]],2,sum))#
	})#
B <- do.call(c, B)#
B <- as.factor(B)#
#
C <- lapply(1:n.C, function(iii){#
	rep(iii, sum(N[[iii]]))#
	})#
#
C <- do.call(c, C)#
C <- as.factor(C)#
m <- 4#
set.seed(42)#
mu.m <- rnorm(n=m, mean=100, sd=20)#
p=0.3#
sd.m <- rnorm(m,20,1)#
#
cov.mat <- cov.mat.rm(sd.m, p=p, ar=TRUE) #
cholesky <- chol(cov.mat)#
Y <- matrix( rnorm(m*length(C), mean = 0, sd = 1), ncol = m )#
Y <- t( t(cholesky) %*% t(Y) ) + matrix(rep(mu.m, each = length(C)), byrow=FALSE, ncol = m)#
#
manRes1 <- manova(Y ~ A*B*C)#
summary(manRes1, test="Pillai")#
#
#            Df   Pillai approx F num Df den Df Pr(>F)#
# A           6 0.026636  0.34636     24   1240 0.9987#
# B           4 0.033596  0.65644     16   1240 0.8382#
# C           1 0.007526  0.58198      4    307 0.6759#
# A:B        24 0.308929  1.08108     96   1240 0.2848#
# A:C         6 0.098785  1.30829     24   1240 0.1458#
# B:C         4 0.051904  1.01887     16   1240 0.4331#
# A:B:C      24 0.282356  0.98103     96   1240 0.5337#
# Residuals 310                            #
#
# Type II/III sum of squares#
library(car)#
fitIII <- lm(Y ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIII, type="III")#
summary(Manova.test, univariate=FALSE)#
#
# Type III MANOVA Tests:#
# #
# Sum of squares and products for error:#
#            [,1]      [,2]      [,3]       [,4]#
# [1,] 124395.375  48966.04  20322.15   9174.845#
# [2,]  48966.039 110837.15  59001.39  26436.030#
# [3,]  20322.145  59001.39 159331.30  65636.216#
# [4,]   9174.845  26436.03  65636.22 122627.817#
# #
# ------------------------------------------#
#  #
# Term: (Intercept) #
# #
# Sum of squares and products for the hypothesis:#
#         [,1]    [,2]    [,3]    [,4]#
# [1,] 5835590 4007364 4901976 5170189#
# [2,] 4007364 2751901 3366241 3550425#
# [3,] 4901976 3366241 4117727 4343030#
# [4,] 5170189 3550425 4343030 4580659#
# #
# Multivariate Tests: (Intercept)#
#                  Df test stat approx F num Df den Df     Pr(>F)    #
# Pillai            1   0.98791 6273.904      4    307 < 2.22e-16 ***#
# Wilks             1   0.01209 6273.904      4    307 < 2.22e-16 ***#
# Hotelling-Lawley  1  81.74468 6273.904      4    307 < 2.22e-16 ***#
# Roy               1  81.74468 6273.904      4    307 < 2.22e-16 ***#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: A #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]      [,2]     [,3]      [,4]#
# [1,] 1263.0952  836.8615  827.166  772.7159#
# [2,]  836.8615 1361.4855 1133.547  938.2805#
# [3,]  827.1660 1133.5467 1338.470 1037.5614#
# [4,]  772.7159  938.2805 1037.561 1379.2690#
# #
# Multivariate Tests: A#
#                  Df test stat  approx F num Df   den Df  Pr(>F)#
# Pillai            6 0.0315659 0.4109690     24 1240.000 0.99490#
# Wilks             6 0.9687420 0.4085394     24 1072.205 0.99510#
# Hotelling-Lawley  6 0.0319499 0.4066954     24 1222.000 0.99529#
# Roy               6 0.0176754 0.9132276      6  310.000 0.48552#
# #
# ------------------------------------------#
#  #
# Term: B #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]      [,2]       [,3]       [,4]#
# [1,] 1143.2470  600.1166 -499.83313 -192.57841#
# [2,]  600.1166 1909.9466  653.46008 -358.39974#
# [3,] -499.8331  653.4601  798.65657  -90.86706#
# [4,] -192.5784 -358.3997  -90.86706  322.96264#
# #
# Multivariate Tests: B#
#                  Df test stat  approx F num Df    den Df  Pr(>F)#
# Pillai            4 0.0365398 0.7144846     16 1240.0000 0.78132#
# Wilks             4 0.9638229 0.7117807     16  938.5381 0.78388#
# Hotelling-Lawley  4 0.0371596 0.7095158     16 1222.0000 0.78645#
# Roy               4 0.0212065 1.6435013      4  310.0000 0.16315#
# #
# ------------------------------------------#
#  #
# Term: C #
# #
# Sum of squares and products for the hypothesis:#
#            [,1]      [,2]      [,3]       [,4]#
# [1,]  225.92548 -99.20121  96.67981 -207.94045#
# [2,]  -99.20121  43.55808 -42.45097   91.30420#
# [3,]   96.67981 -42.45097  41.37199  -88.98352#
# [4,] -207.94045  91.30420 -88.98352  191.38713#
# #
# Multivariate Tests: C#
#                  Df test stat  approx F num Df den Df  Pr(>F)#
# Pillai            1 0.0071736 0.5545519      4    307 0.69584#
# Wilks             1 0.9928264 0.5545519      4    307 0.69584#
# Hotelling-Lawley  1 0.0072254 0.5545519      4    307 0.69584#
# Roy               1 0.0072254 0.5545519      4    307 0.69584#
# #
# ------------------------------------------#
#  #
# Term: A:B #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]      [,2]      [,3]     [,4]#
# [1,] 11437.732  6877.305  4254.569 4219.432#
# [2,]  6877.305 12560.970  7233.591 4448.628#
# [3,]  4254.569  7233.591 14213.952 7174.512#
# [4,]  4219.432  4448.628  7174.512 8913.720#
# #
# Multivariate Tests: A:B#
#                  Df test stat approx F num Df   den Df   Pr(>F)  #
# Pillai           24 0.2981634 1.040369     96 1240.000 0.378957  #
# Wilks            24 0.7325609 1.037500     96 1218.694 0.386157  #
# Hotelling-Lawley 24 0.3250992 1.034560     96 1222.000 0.393470  #
# Roy              24 0.1234838 1.594999     24  310.000 0.040323 *#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: A:C #
# #
# Sum of squares and products for the hypothesis:#
#           [,1]     [,2]     [,3]      [,4]#
# [1,] 2539.4311 2763.629  756.759  132.8004#
# [2,] 2763.6286 5370.723 1769.431 -719.1470#
# [3,]  756.7590 1769.431 2000.361 1476.4236#
# [4,]  132.8004 -719.147 1476.424 3334.1801#
# #
# Multivariate Tests: A:C#
#                  Df test stat approx F num Df   den Df    Pr(>F)   #
# Pillai            6 0.0947115 1.253026     24 1240.000 0.1855365   #
# Wilks             6 0.9077732 1.256473     24 1072.205 0.1833348   #
# Hotelling-Lawley  6 0.0988827 1.258695     24 1222.000 0.1811677   #
# Roy               6 0.0605502 3.128426      6  310.000 0.0054343 **#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: B:C #
# #
# Sum of squares and products for the hypothesis:#
#            [,1]       [,2]      [,3]      [,4]#
# [1,]  398.31372   10.30311 -307.0137 -659.1746#
# [2,]   10.30311  280.70782 -230.5529 -222.1600#
# [3,] -307.01375 -230.55287 2839.0028  375.8311#
# [4,] -659.17457 -222.15995  375.8311 1686.1707#
# #
# Multivariate Tests: B:C#
#                  Df test stat  approx F num Df    den Df   Pr(>F)  #
# Pillai            4 0.0497475 0.9759965     16 1240.0000 0.480792  #
# Wilks             4 0.9509327 0.9740160     16  938.5381 0.483265  #
# Hotelling-Lawley  4 0.0508862 0.9716077     16 1222.0000 0.485789  #
# Roy               4 0.0293228 2.2725148      4  310.0000 0.061397 .#
# ---#
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1#
# #
# ------------------------------------------#
#  #
# Term: A:B:C #
# #
# Sum of squares and products for the hypothesis:#
#          [,1]      [,2]     [,3]     [,4]#
# [1,] 8384.878  3737.071 1225.276 1088.927#
# [2,] 3737.071 10863.782 4190.858 2090.329#
# [3,] 1225.276  4190.858 8573.560 2080.437#
# [4,] 1088.927  2090.329 2080.437 8037.573#
# #
# Multivariate Tests: A:B:C#
#                  Df test stat  approx F num Df   den Df  Pr(>F)#
# Pillai           24 0.2823563 0.9810253     96 1240.000 0.53372#
# Wilks            24 0.7455292 0.9768058     96 1218.694 0.54506#
# Hotelling-Lawley 24 0.3056174 0.9725638     96 1222.000 0.55645#
# Roy              24 0.1059790 1.3688958     24  310.000 0.11930#
#
Manova.CAR <- summary(Manova.test, univariate=TRUE)#
#
Manova.CAR$univariate.tests#
#
"univariate.tests"#
#
Manova.test <- Anova(fitIII, type="II")#
Manova1 <- summary(Manova.test,univariate=TRUE)#
# summary(Manova.test, univariate=TRUE)#
Manova1#
#
####################################################################################################
####################################################################################################
# model <- Y ~ A + B + C + A*B*C#
# Manova2 <- MANOVA.f(Y, A=A, B=B, C=C, model, TYPE = "II", TEST="Wilks", ANOVA=TRUE, ANOVA.effect.size="all", show.power=FALSE, alpha=0.05)#
#
longdata <- cbind(A=A, B=B, C=C, Y)#
colnames(longdata)[4:7] = c("Y1","Y2","Y3","Y4")#
formula <- Y ~ A + B + C + A*B*C#
colnames(longdata)[4:7] = c("Y1","Y2","Y3","Y4")#
#
Manova2 <- MANOVA(formula, longdata, ANOVA.effect.size = "all")#
#
Manova2$univariate$`sum of squares`#
#
#        df          Y1           Y2           Y3          Y4#
# A       6    933.7091   1155.41702   1173.61195   1085.7261#
# B       4   1046.4472   1894.39016    964.53340    213.5417#
# C       1    153.3926     61.58029     38.23215    244.0636#
# A:B    24  10355.3436  12937.57388  14086.53354   8866.0929#
# A:C     6   2812.0570   5425.46916   1864.55069   3368.1547#
# B:C     4    514.9968    310.34917   3253.61159   1642.7279#
# A:B:C  24   8384.8777  10863.78180   8573.55970   8037.5727#
# error 310 124395.3754 110837.15424 159331.30254 122627.8166#
longdata1 <- longdata#
colnames(longdata1)[1:3] <- c("behaviour","drug","genotype")#
colnames(longdata)[4:7] = c("Y1","Y2","Y3","Y4")#
formula <- Y ~ behaviour + drug + genotype + behaviour*drug*genotype#
Manova2a <- MANOVA(formula, longdata1)#
Manova2a$univariate$`sum of squares`#
#
longdata2b <- longdata1[,-c(1,2)]#
formula <- Y ~ genotype#
Manova2b <- MANOVA(formula, longdata2b)#
Manova2b$univariate$`sum of squares`#
#
library(car)#
fit2b<- lm(Y ~ C, contrasts=list(C=contr.sum))#
Manova.test <- Anova(fit2b, type="II")#
summary(Manova.test, univariate=TRUE)#
library(car)#
fitIII <- lm(Y ~ A+B+C + A*B, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIII, type="II")#
summary(Manova.test, univariate=TRUE)#
#
formula <- Y ~ A + B + C + A*B#
MANOVA(formula, longdata)#
#MANOVA effect sizes#
Manova2$multivariate$Wilks[,"es"]#
#           A           B           C         A:B         A:C         B:C       A:B:C #
# 0.006321495 0.008794802 0.007291175 0.074680195 0.024557383 0.013033389 0.070785112 #
Manova2$multivariate$effect.sizes#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
#
# #
# Manova2$multivariate$Wilks is uncorrected Serlin adjusted value#
# if want adjusted then look at Manova2$multivariate$effect.sizes[,"m.es.W.adj"]#
# s <- min(p, q); b <- max(p, q); Serlin.adj <- (N - 1)/(N - b - 1)#
###here#
formula <- Y ~ A + B + C + A*B*C#
Manova2.pb <- pbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
#
Manova2.pb$univariate$`effect size`[1,]$os#
#
# $theta.hat#
#                 Y1           Y2           Y3            Y4#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# #
# $bias#
#                Y1          Y2          Y3          Y4#
# A     0.014772482 0.013342034 0.014824378 0.015067111#
# B     0.009961165 0.008050724 0.009890840 0.010353595#
# C     0.002421019 0.002567925 0.002638935 0.002388236#
# A:B   0.056212677 0.045746691 0.053022062 0.055911715#
# A:C   0.012731700 0.009988656 0.014456416 0.013264747#
# B:C   0.010587970 0.009798597 0.007542787 0.009288149#
# A:B:C 0.057281073 0.048840608 0.056172695 0.058488772#
# #
# $se#
#                Y1          Y2          Y3          Y4#
# A     0.010513217 0.010743731 0.010757265 0.011112646#
# B     0.009637489 0.011124648 0.009180885 0.007369940#
# C     0.003963100 0.003415133 0.003475131 0.004810767#
# A:B   0.030098152 0.028058980 0.029255532 0.026209907#
# A:C   0.014525642 0.017676126 0.011776628 0.015121872#
# B:C   0.008776768 0.007361134 0.012778618 0.011673016#
# A:B:C 0.028325518 0.026322791 0.025015462 0.028084117#
# #
# $ci.lower#
#                 Y1           Y2           Y3          Y4#
# A     -0.024696372 -0.022652481 -0.025044769 -0.02483533#
# B     -0.016994122 -0.012701506 -0.017794683 -0.01851385#
# C     -0.004818983 -0.004803210 -0.005036759 -0.00473971#
# A:B   -0.050630879 -0.020748916 -0.042800196 -0.05018757#
# A:C   -0.018115924 -0.005741267 -0.022969925 -0.01656434#
# B:C   -0.018519275 -0.017098843 -0.013128393 -0.01599380#
# A:B:C -0.056155219 -0.030271445 -0.064343787 -0.05897510#
# #
# $ci.upper#
#                Y1          Y2          Y3         Y4#
# A     0.013339990 0.019495642 0.016886659 0.01582727#
# B     0.017768444 0.028120516 0.017824680 0.00932972#
# C     0.009180808 0.007472613 0.007192856 0.01060378#
# A:B   0.067717057 0.089475243 0.067995770 0.05160527#
# A:C   0.035648844 0.064471943 0.020926782 0.04190924#
# B:C   0.015859537 0.011089414 0.037268291 0.02875325#
# A:B:C 0.052278417 0.067811424 0.034426745 0.05062527#
#
# no effect sizes#
#
# Manova2.pb$multivariate$permutations[1,]#
#
# MANOVA effect sizes  bootstrapshould match original MANOVA#
Manova2.pb$multivariate$`effect size`[1,]$`effect size`#
#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
#
Manova2$multivariate$effect.sizes#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
ptm <- proc.time()#
Manova2.nb <- nbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
proc.time() - ptm#
#
Manova2.nb$univariate$`effect size`[1,]$os#
# $theta.hat#
#                 Y1           Y2           Y3            Y4#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
# #
# $os$bias#
#               Y1          Y2          Y3         Y4#
# A     0.01523289 0.013705943 0.017656208 0.01741846#
# B     0.01035114 0.008035487 0.010197354 0.01114398#
# C     0.00308148 0.002315069 0.002450947 0.00321472#
# A:B   0.06334511 0.063054040 0.065548500 0.06707082#
# A:C   0.01548741 0.017555537 0.016684918 0.01687540#
# B:C   0.01064833 0.012759570 0.014202708 0.01339203#
# A:B:C 0.06430303 0.059429123 0.062047813 0.06520411#
# #
# $os$se#
#                Y1          Y2          Y3          Y4#
# A     0.011280071 0.012547464 0.012817480 0.013948874#
# B     0.011159835 0.012928146 0.010111572 0.008776835#
# C     0.005482621 0.004019749 0.003573847 0.006078847#
# A:B   0.032706781 0.031099554 0.029921892 0.028819966#
# A:C   0.015654530 0.020349679 0.013943306 0.016488256#
# B:C   0.009641517 0.010067734 0.016533855 0.013823896#
# A:B:C 0.026921887 0.026545009 0.024761527 0.026738494#
# #
# $os$ci.lower#
#                 Y1           Y2          Y3           Y4#
# A     -0.026806541 -0.025292185 -0.02887922 -0.028608813#
# B     -0.018745710 -0.014418875 -0.01911224 -0.020145451#
# C     -0.005778235 -0.005021451 -0.00516426 -0.005876048#
# A:B   -0.053643129 -0.026481010 -0.04398363 -0.052203756#
# A:C   -0.023051018 -0.011406703 -0.02689824 -0.019702258#
# B:C   -0.019372671 -0.021254314 -0.01897810 -0.019448229#
# A:B:C -0.056794241 -0.032271489 -0.06394902 -0.058777981#
# #
# $os$ci.upper#
#               Y1          Y2          Y3         Y4#
# A     0.01728361 0.023406280 0.021511086 0.02516584#
# B     0.02508243 0.033205742 0.019901057 0.01304749#
# C     0.01532233 0.009833557 0.007841911 0.01571607#
# A:B   0.07087834 0.092985379 0.073430965 0.05852476#
# A:C   0.03619728 0.068525130 0.025736751 0.04444319#
# B:C   0.01745616 0.017493364 0.046293234 0.03316605#
# A:B:C 0.04937453 0.068219046 0.034699641 0.04906812#
# MANOVA effect sizes for non parametric bootstrap should match original MANOVA#
Manova2.nb$multivariate$`effect size`[1,]$`effect size`#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
#
Manova2$multivariate$effect.sizes#
#            m.es.W   m.es.W.adj        m.os     m.os.adj#
# A     0.006321495 -0.009662609 0.009339923 -0.035848080#
# B     0.008794802 -0.001778053 0.024358789 -0.003027631#
# C     0.007291175 -0.003297719 0.004652742 -0.010190156#
# A:B   0.074680195  0.012123363 0.216882839 -0.189788529#
# A:C   0.024557383  0.008866617 0.079913105  0.037944229#
# B:C   0.013033389  0.002505746 0.040898330  0.013976178#
# A:B:C 0.070785112  0.007964950 0.203641199 -0.209906529#
# change names#
colnames(longdata)[1:3] <- c("behaviour", "drug", "genotype")  #
formula <- Y ~ behaviour + drug + genotype + behaviour*drug*genotype#
#
ptm <- proc.time()#
Manova3.pb <- pbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
proc.time() - ptm#
#
Manova2.pb$multivariate$`effect size`[1,]#
# $`effect size`#
#                              m.es.W   m.es.W.adj        m.os     m.os.adj#
# behaviour               0.006321495 -0.009662609 0.009339923 -0.035848080#
# drug                    0.008794802 -0.001778053 0.024358789 -0.003027631#
# genotype                0.007291175 -0.003297719 0.004652742 -0.010190156#
# behaviour:drug          0.074680195  0.012123363 0.216882839 -0.189788529#
# behaviour:genotype      0.024557383  0.008866617 0.079913105  0.037944229#
# drug:genotype           0.013033389  0.002505746 0.040898330  0.013976178#
# behaviour:drug:genotype 0.070785112  0.007964950 0.203641199 -0.209906529#
# #
# $bias#
#                             m.es.W m.es.W.adj       m.os   m.os.adj#
# behaviour               0.01855975 0.01885829 0.07147885 0.07473929#
# drug                    0.01264616 0.01278105 0.04846200 0.04982234#
# genotype                0.01288362 0.01302104 0.01288491 0.01307706#
# behaviour:drug          0.06299905 0.06725814 0.19085413 0.28996435#
# behaviour:genotype      0.01855467 0.01885314 0.06736398 0.07043673#
# drug:genotype           0.01266839 0.01280352 0.04780337 0.04914522#
# behaviour:drug:genotype 0.06305946 0.06732264 0.19338485 0.29380927#
# #
# $se#
#                              m.es.W  m.es.W.adj       m.os   m.os.adj#
# behaviour               0.007391676 0.007510577 0.02760328 0.02886237#
# drug                    0.006790988 0.006863426 0.02550344 0.02621932#
# genotype                0.013092887 0.013232545 0.01309469 0.01328996#
# behaviour:drug          0.016652622 0.017778433 0.04518877 0.06865521#
# behaviour:genotype      0.009686318 0.009842130 0.03426936 0.03583252#
# drug:genotype           0.008215331 0.008302962 0.03046648 0.03132168#
# behaviour:drug:genotype 0.017460286 0.018640699 0.04825305 0.07331077#
# #
# $ci.lower#
#                                m.es.W  m.es.W.adj         m.os    m.os.adj#
# behaviour               -0.0061966183 -0.02238209 -0.038325396 -0.08568761#
# drug                    -0.0026439821 -0.01333885 -0.019370453 -0.04798436#
# genotype                -0.0097900849 -0.02056118 -0.012429900 -0.02752754#
# behaviour:drug           0.0445032549 -0.02009371  0.131179364 -0.31999767#
# behaviour:genotype       0.0081987082 -0.00775520  0.020786843 -0.02387902#
# drug:genotype           -0.0003587838 -0.01102928 -0.009714395 -0.03805726#
# behaviour:drug:genotype  0.0375649177 -0.02750112  0.107546142 -0.35590358#
# #
# $ci.upper#
#                             m.es.W  m.es.W.adj       m.os    m.os.adj#
# behaviour               0.02223283 0.006504676 0.06804201  0.02553165#
# drug                    0.02481898 0.014417053 0.08372657  0.05800662#
# genotype                0.03829755 0.028039392 0.03566429  0.02128384#
# behaviour:drug          0.11057988 0.050450073 0.31050160 -0.04755370#
# behaviour:genotype      0.04432598 0.028953209 0.14856145  0.10972390#
# drug:genotype           0.03087657 0.020539256 0.10605600  0.08096284#
# behaviour:drug:genotype 0.10643812 0.046028299 0.29806086 -0.06645491#
#
Manova3.pb$multivariate$`effect size`[1,]#
# $`effect size`#
#                              m.es.W   m.es.W.adj        m.os     m.os.adj#
# behaviour               0.006321495 -0.009662609 0.009339923 -0.035848080#
# drug                    0.008794802 -0.001778053 0.024358789 -0.003027631#
# genotype                0.007291175 -0.003297719 0.004652742 -0.010190156#
# behaviour:drug          0.074680195  0.012123363 0.216882839 -0.189788529#
# behaviour:genotype      0.024557383  0.008866617 0.079913105  0.037944229#
# drug:genotype           0.013033389  0.002505746 0.040898330  0.013976178#
# behaviour:drug:genotype 0.070785112  0.007964950 0.203641199 -0.209906529#
# #
# $bias#
#                             m.es.W m.es.W.adj       m.os   m.os.adj#
# behaviour               0.01855975 0.01885829 0.07147885 0.07473929#
# drug                    0.01264616 0.01278105 0.04846200 0.04982234#
# genotype                0.01288362 0.01302104 0.01288491 0.01307706#
# behaviour:drug          0.06299905 0.06725814 0.19085413 0.28996435#
# behaviour:genotype      0.01855467 0.01885314 0.06736398 0.07043673#
# drug:genotype           0.01266839 0.01280352 0.04780337 0.04914522#
# behaviour:drug:genotype 0.06305946 0.06732264 0.19338485 0.29380927#
# #
# $se#
#                              m.es.W  m.es.W.adj       m.os   m.os.adj#
# behaviour               0.007391676 0.007510577 0.02760328 0.02886237#
# drug                    0.006790988 0.006863426 0.02550344 0.02621932#
# genotype                0.013092887 0.013232545 0.01309469 0.01328996#
# behaviour:drug          0.016652622 0.017778433 0.04518877 0.06865521#
# behaviour:genotype      0.009686318 0.009842130 0.03426936 0.03583252#
# drug:genotype           0.008215331 0.008302962 0.03046648 0.03132168#
# behaviour:drug:genotype 0.017460286 0.018640699 0.04825305 0.07331077#
# #
# $ci.lower#
#                                m.es.W  m.es.W.adj         m.os    m.os.adj#
# behaviour               -0.0061966183 -0.02238209 -0.038325396 -0.08568761#
# drug                    -0.0026439821 -0.01333885 -0.019370453 -0.04798436#
# genotype                -0.0097900849 -0.02056118 -0.012429900 -0.02752754#
# behaviour:drug           0.0445032549 -0.02009371  0.131179364 -0.31999767#
# behaviour:genotype       0.0081987082 -0.00775520  0.020786843 -0.02387902#
# drug:genotype           -0.0003587838 -0.01102928 -0.009714395 -0.03805726#
# behaviour:drug:genotype  0.0375649177 -0.02750112  0.107546142 -0.35590358#
# #
# $ci.upper#
#                             m.es.W  m.es.W.adj       m.os    m.os.adj#
# behaviour               0.02223283 0.006504676 0.06804201  0.02553165#
# drug                    0.02481898 0.014417053 0.08372657  0.05800662#
# genotype                0.03829755 0.028039392 0.03566429  0.02128384#
# behaviour:drug          0.11057988 0.050450073 0.31050160 -0.04755370#
# behaviour:genotype      0.04432598 0.028953209 0.14856145  0.10972390#
# drug:genotype           0.03087657 0.020539256 0.10605600  0.08096284#
# behaviour:drug:genotype 0.10643812 0.046028299 0.29806086 -0.06645491#
#
ptm <- proc.time()#
Manova3.nb <- nbMANOVA(formula, longdata, H0=FALSE, Nreps=1e3)#
proc.time() - ptm#
#
Manova3.nb$univariate$`effect size`[1,]$os$theta.hat#
#                                   Y1           Y2           Y3            Y4#
# behaviour               -0.009892405 -0.006881247 -0.010064481 -0.0087910552#
# drug                    -0.003749422  0.003227373 -0.005750012 -0.0093441813#
# genotype                -0.001663671 -0.002057491 -0.002506532 -0.0010343026#
# behaviour:drug           0.004864068  0.030287309  0.009226276 -0.0042855153#
# behaviour:genotype       0.002714171  0.022804152 -0.006424137  0.0067907933#
# drug:genotype           -0.007316264 -0.007784891  0.006310624  0.0004126559#
# behaviour:drug:genotype -0.008360759  0.015870492 -0.019819763 -0.0099409477#
# check calculates df correctly #
# when weird (indirect)#
#
colnames(longdata)[1:3] <- c("A", "B", "C")  #
formula <- Y ~ A + C + A*B + B*C#
Manova4b <- MANOVA(formula, longdata, ANOVA.effect.size="pes")	# default current os#
#
fitIIb <- lm(Y ~ A + C + A*B + B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIIb, type="II")#
summary(Manova.test, univariate=TRUE)#
# pes <- F/(F + dfe/df)#
#
n.terms <- dim(Manova4b$univariate$`sum of squares`)[1]-1#
df <- Manova4b$univariate$`sum of squares`[1:n.terms,"df"]#
dfe <- Manova4b$univariate$`sum of squares`[n.terms+1,"df"]#
#
SS <- Manova4b$univariate$`sum of squares`[1:n.terms,"Y1"]#
SSe <- Manova4b$univariate$`sum of squares`[n.terms+1,"Y1"]#
F <- (SS/df) / (SSe/dfe)#
F#
#         A         C         B       A:B       C:B #
# 0.3902152 0.3846345 0.6256947 1.0709598 0.3677693#
#
Manova4b$univariate$F#
#            Y1        Y2         Y3        Y4#
# A   0.3902152 0.5150278 0.39173533 0.4590230#
# C   0.3846345 0.1646967 0.07656816 0.6191110#
# B   0.6256947 1.0927746 0.44354782 0.1787889#
# A:B 1.0709598 1.5086530 1.18973951 0.9585751#
# C:B 0.3677693 0.2887029 1.69602197 1.0032087#
#
F/(F + dfe/df)#
#           A           C           B         A:B         C:B #
# 0.006839056 0.001130000 0.007307324 0.070283901 0.004308058#
#
Manova4b$univariate$pes[,"Y1"]#
#           A           C           B         A:B         C:B #
# 0.006839056 0.001130000 0.007307324 0.070283901 0.004308058 #
# calculate pes by bootstrap (nb pes is test pes; bootstrap used to calculate se and ci#
Manova5b.pb <- pbMANOVA(formula, longdata, H0=FALSE, ANOVA.effect.size = "pes", Nreps=1e3)#
Manova5b.nb <- nbMANOVA(formula, longdata, H0=FALSE, ANOVA.effect.size = "pes", Nreps=1e3)#
#
Manova5b.pb$univariate$`effect size`[1,]$pes$theta.hat#
#              Y1           Y2           Y3          Y4#
# A   0.006839056 0.0090068647 0.0068655153 0.008035316#
# C   0.001130000 0.0004841675 0.0002251498 0.001817605#
# B   0.007307324 0.0126929884 0.0051911212 0.002098984#
# A:B 0.070283901 0.0962438421 0.0774751267 0.063375851#
# C:B 0.004308058 0.0033850071 0.0195628580 0.011664782#
#
Manova5b.nb$univariate$`effect size`[1,]$pes$theta.hat#
#              Y1           Y2           Y3          Y4#
# A   0.006839056 0.0090068647 0.0068655153 0.008035316#
# C   0.001130000 0.0004841675 0.0002251498 0.001817605#
# B   0.007307324 0.0126929884 0.0051911212 0.002098984#
# A:B 0.070283901 0.0962438421 0.0774751267 0.063375851#
# C:B 0.004308058 0.0033850071 0.0195628580 0.011664782#
#
Manova4b$univariate$pes#
#              Y1           Y2           Y3          Y4#
# A   0.006839056 0.0090068419 0.0068654180 0.008035246#
# C   0.001130000 0.0004841883 0.0002251525 0.001817634#
# B   0.007307324 0.0126930093 0.0051911482 0.002099032#
# A:B 0.070283901 0.0962438150 0.0774748183 0.063375355#
# C:B 0.004308058 0.0033850273 0.0195630311 0.011664875#
# if pes is right then must be calculating dfe correctly#
# model <- Y ~ A + B + C + A*B*C#
# Manova3 <- MANOVA.f(Y, A=A, B=B, C=C, model, TYPE = "III", TEST="all", ANOVA=TRUE, ANOVA.effect.size="all", show.power=TRUE, alpha=0.05)#
formula <- Y ~ A + B + C + A*B*C#
Manova3 <- MANOVA(formula, longdata, TYPE="III", TEST="all")#
#
Manova3$multivariate$tests$Pillai#
#
#         test.stat         F df  dfe         p          es#
# A     0.031565874 0.4109690 24 1240 0.9949033 0.007891469#
# B     0.036539759 0.7144846 16 1240 0.7813194 0.009134940#
# C     0.007173599 0.5545519  4  307 0.6958421 0.007173599#
# A:B   0.298163370 1.0403692 96 1240 0.3789574 0.074540842#
# A:C   0.094711517 1.2530261 24 1240 0.1855365 0.023677879#
# B:C   0.049747518 0.9759965 16 1240 0.4807921 0.012436879#
# A:B:C 0.282356334 0.9810253 96 1240 0.5337190 0.070589084#
Manova3$multivariate$tests$Wilks#
#
#       test.stat         F df       dfe         p          es#
# A     0.9687420 0.4085394 24 1072.2051 0.9950992 0.007907794#
# B     0.9638229 0.7117807 16  938.5381 0.7838786 0.009169637#
# C     0.9928264 0.5545519  4  307.0000 0.6958421 0.007173599#
# A:B   0.7325609 1.0374998 96 1218.6942 0.3861568 0.074852613#
# A:C   0.9077732 1.2564732 24 1072.2051 0.1833348 0.023899932#
# B:C   0.9509327 0.9740160 16  938.5381 0.4832653 0.012499227#
# A:B:C 0.7455292 0.9768058 96 1218.6942 0.5450587 0.070785112#
Manova3$multivariate$tests$Hotelling#
#
#         test.stat         F df  dfe         p          es#
# A     0.031949883 0.4066954 24 1222 0.9952893 0.007924177#
# B     0.037159584 0.7095158 16 1222 0.7864510 0.009204388#
# C     0.007225432 0.5545519  4  307 0.6958421 0.007173599#
# A:B   0.325099221 1.0345605 96 1222 0.3934697 0.075165725#
# A:C   0.098882728 1.2586947 24 1222 0.1811677 0.024124312#
# B:C   0.050886164 0.9716077 16 1222 0.4857890 0.012561736#
# A:B:C 0.305617414 0.9725638 96 1222 0.5564549 0.070981089#
# export data for SPSS#
# data2 <- cbind(A=A, B=B, C=C, Y);#
# write.table(data2, file = "data2.csv",  sep = ",", row.names=FALSE)#
#
# Multivariate Testsa						#
# 		Effect			Value		F		Hypothesis df	Error df	Sig.#
# Intercept	Pillai's Trace		.988		6273.904b	4.000			307.000	.000#
# 		Wilks' Lambda		.012		6273.904b	4.000			307.000	.000#
# 		Hotelling's Trace		81.745	6273.904b	4.000			307.000	.000#
# 		Roy's Largest Root	81.745	6273.904b	4.000			307.000	.000#
# A		Pillai's Trace		.032		.411		24.000		1240.000	.995#
# 		Wilks' Lambda		.969		.409		24.000		1072.205	.995#
# 		Hotelling's Trace		.032		.407		24.000		1222.000	.995#
# 		Roy's Largest Root	.018		.913c		6.000			310.000	.486#
# B		Pillai's Trace		.037		.714		16.000		1240.000	.781#
# 		Wilks' Lambda		.964		.712		16.000		938.538	.784#
# 		Hotelling's Trace		.037		.710		16.000		1222.000	.786#
# 		Roy's Largest Root	.021		1.644c	4.000			310.000	.163#
# C		Pillai's Trace		.007		.555b		4.000			307.000	.696#
# 		Wilks' Lambda		.993		.555b		4.000			307.000	.696#
# 		Hotelling's Trace		.007		.555b		4.000			307.000	.696#
# 		Roy's Largest Root	.007		.555b		4.000			307.000	.696#
# A * B	Pillai's Trace		.298		1.040		96.000		1240.000	.379#
# 		Wilks' Lambda		.733		1.037		96.000		1218.694	.386#
# 		Hotelling's Trace		.325		1.035		96.000		1222.000	.393#
# 		Roy's Largest Root	.123		1.595c	24.000		310.000	.040#
# A * C	Pillai's Trace		.095		1.253		24.000		1240.000	.186#
# 		Wilks' Lambda		.908		1.256		24.000		1072.205	.183#
# 		Hotelling's Trace		.099		1.259		24.000		1222.000	.181#
# 		Roy's Largest Root	.061		3.128c	6.000			310.000	.005#
# B * C	Pillai's Trace		.050		.976		16.000		1240.000	.481#
# 		Wilks' Lambda		.951		.974		16.000		938.538	.483#
# 		Hotelling's Trace		.051		.972		16.000		1222.000	.486#
# 		Roy's Largest Root	.029		2.273c	4.000			310.000	.061#
# A * B * C	Pillai's Trace		.282		.981		96.000		1240.000	.534#
# 		Wilks' Lambda		.746		.977		96.000		1218.694	.545#
# 		Hotelling's Trace		.306		.973		96.000		1222.000	.556#
# 		Roy's Largest Root	.106		1.369c	24.000		310.000	.119#
# a Design: Intercept + A + B + C + A * B + A * C + B * C + A * B * C						#
# b Exact statistic						#
# c The statistic is an upper bound on F that yields a lower bound on the significance level.						#
#
# model <- Y ~ A; MANOVA.f(Y, model, TYPE = "II", TEST="Wilks", ANOVA=TRUE, ANOVA.effect.size="os", show.power=FALSE, alpha=0.05)#
#
N.tests <- length(Manova2$univariate$F[,1])#
effect.size.types <- c("es","pes","eps","peps","os","pos", "cf", "cf.pop")#
N.eff <- length( effect.size.types )#
N <- dim(Y)[1]#
df <- Manova2$univariate$`sum of squares`[1:N.tests,1]#
dfe <- Manova2$univariate$`sum of squares`[N.tests+1,1]	#
eff.sizes <- lapply(1:N.eff, function(iii){#
	effect.size.type <- effect.size.types[iii]#
	sapply(1:m, function(ii){#
		F <- Manova2$univariate$F[,ii]#
		SS <- Manova2$univariate$`sum of squares`[1:N.tests,ii+1]#
		SSe <- Manova2$univariate$`sum of squares`[N.tests+1,ii+1]#
		effect.size.calculator(F, df, dfe, N=N, effect.size.type=effect.size.type)#
	})#
})#
#
names(eff.sizes) <- effect.size.types#
eff.sizes#
#
# $es#
#              [,1]         [,2]         [,3]        [,4]#
# A     0.006283533 0.0080524881 0.0062002068 0.007432117#
# B     0.007042220 0.0132026394 0.0050956422 0.001461756#
# C     0.001032278 0.0004291737 0.0002019809 0.001670688#
# A:B   0.069687809 0.0901662846 0.0744193355 0.060691041#
# A:C   0.018924152 0.0378119113 0.0098504450 0.023056019#
# B:C   0.003465747 0.0021629273 0.0171888713 0.011244960#
# A:B:C 0.056427269 0.0757133332 0.0452942247 0.055019573#
#
# $pes#
#              [,1]        [,2]         [,3]        [,4]#
# A     0.007450059 0.010316908 0.0073120001 0.008776129#
# B     0.008342092 0.016804437 0.0060172081 0.001738354#
# C     0.001231587 0.000555284 0.0002398962 0.001986326#
# A:B   0.076848151 0.104525165 0.0812288624 0.067425883#
# A:C   0.022106075 0.046665635 0.0115669892 0.026732241#
# B:C   0.004122931 0.002792228 0.0200117681 0.013218964#
# A:B:C 0.063148530 0.089266214 0.0510620096 0.061512637#
#
# $eps#
#               [,1]         [,2]         [,3]         [,4]#
# A     -0.009919119 -0.006898375 -0.010091715 -0.008814796#
# B     -0.003759547  0.003235398 -0.005765639 -0.009369519#
# C     -0.001668164 -0.002062637 -0.002513339 -0.001037131#
# A:B    0.004877204  0.030362834  0.009251648 -0.004296612#
# A:C    0.002721500  0.022861049 -0.006441477  0.006809106#
# B:C   -0.007336021 -0.007804315  0.006327590  0.000413685#
# A:B:C -0.008383337  0.015909882 -0.019873463 -0.009968079#
#
# $peps#
#               [,1]         [,2]         [,3]          [,4]#
# A     -0.011760585 -0.008838249 -0.011901316 -0.0104088488#
# B     -0.004453494  0.004118043 -0.006808376 -0.0111424419#
# C     -0.001990247 -0.002668731 -0.002985136 -0.0012330727#
# A:B    0.005378331  0.035198081  0.010098194 -0.0047734037#
# A:C    0.003179096  0.028214002 -0.007563972  0.0078948004#
# B:C   -0.008727096 -0.010074969  0.007366759  0.0004863057#
# A:B:C -0.009381907  0.018757792 -0.022404157 -0.0111444489#
#
# $os#
#               [,1]         [,2]         [,3]          [,4]#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
#
# $pos#
#               [,1]         [,2]         [,3]         [,4]#
# A     -0.009760522 -0.007338778 -0.009877086 -0.008640632#
# B     -0.003677148  0.003405239 -0.005619224 -0.009189392#
# C     -0.001628272 -0.002183088 -0.002441775 -0.001008947#
# A:B    0.004730349  0.031069643  0.008886644 -0.004193148#
# A:C    0.002645085  0.023574191 -0.006282037  0.006573891#
# B:C   -0.007200423 -0.008310564  0.006095068  0.000401876#
# A:B:C -0.008236848  0.016524634 -0.019638813 -0.009782187#
#
# $cf#
#             [,1]       [,2]       [,3]       [,4]#
# A     0.08663705 0.10210022 0.08582458 0.09409480#
# B     0.09171841 0.13073505 0.07780510 0.04172985#
# C     0.03511560 0.02357101 0.01549044 0.04461255#
# A:B   0.28852280 0.34165182 0.29733875 0.26888814#
# A:C   0.15035225 0.22124627 0.10817740 0.16573015#
# B:C   0.06434283 0.05291546 0.14290002 0.11574129#
# A:B:C 0.25962484 0.31307460 0.23196905 0.25601650#
#
# $cf.pop#
#             [,1]       [,2]       [,3]       [,4]#
# A     0.00000000 0.00000000 0.00000000 0.00000000#
# B     0.00000000 0.05845404 0.00000000 0.00000000#
# C     0.00000000 0.00000000 0.00000000 0.00000000#
# A:B   0.06894078 0.17906959 0.09469068 0.00000000#
# A:C   0.05149855 0.15538131 0.00000000 0.08134736#
# B:C   0.00000000 0.00000000 0.07830993 0.02005087#
# A:B:C 0.00000000 0.12962363 0.00000000 0.00000000#
Manova2$univariate$effect.sizes#
#
# $es#
#                Y1           Y2           Y3          Y4#
# A     0.006283533 0.0080524881 0.0062002068 0.007432117#
# B     0.007042220 0.0132026394 0.0050956422 0.001461756#
# C     0.001032278 0.0004291737 0.0002019809 0.001670688#
# A:B   0.069687809 0.0901662846 0.0744193355 0.060691041#
# A:C   0.018924152 0.0378119113 0.0098504450 0.023056019#
# B:C   0.003465747 0.0021629273 0.0171888713 0.011244960#
# A:B:C 0.056427269 0.0757133332 0.0452942247 0.055019573#
#
# $pes#
#                Y1          Y2           Y3          Y4#
# A     0.007450059 0.010316908 0.0073120001 0.008776129#
# B     0.008342092 0.016804437 0.0060172081 0.001738354#
# C     0.001231587 0.000555284 0.0002398962 0.001986326#
# A:B   0.076848151 0.104525165 0.0812288624 0.067425883#
# A:C   0.022106075 0.046665635 0.0115669892 0.026732241#
# B:C   0.004122931 0.002792228 0.0200117681 0.013218964#
# A:B:C 0.063148530 0.089266214 0.0510620096 0.061512637#
#
# $eps#
#                 Y1           Y2           Y3           Y4       #
# A     -0.009919119 -0.006898375 -0.010091715 -0.008814796#
# B     -0.003759547  0.003235398 -0.005765639 -0.009369519#
# C     -0.001668164 -0.002062637 -0.002513339 -0.001037131#
# A:B    0.004877204  0.030362834  0.009251648 -0.004296612#
# A:C    0.002721500  0.022861049 -0.006441477  0.006809106#
# B:C   -0.007336021 -0.007804315  0.006327590  0.000413685#
# A:B:C -0.008383337  0.015909882 -0.019873463 -0.009968079#
#
# $peps#
#                 Y1           Y2           Y3            Y4#
# A     -0.011760585 -0.008838249 -0.011901316 -0.0104088488#
# B     -0.004453494  0.004118043 -0.006808376 -0.0111424419#
# C     -0.001990247 -0.002668731 -0.002985136 -0.0012330727#
# A:B    0.005378331  0.035198081  0.010098194 -0.0047734037#
# A:C    0.003179096  0.028214002 -0.007563972  0.0078948004#
# B:C   -0.008727096 -0.010074969  0.007366759  0.0004863057#
# A:B:C -0.009381907  0.018757792 -0.022404157 -0.0111444489#
#
# $os#
#                 Y1           Y2           Y3            Y4#
# A     -0.009892405 -0.006881228 -0.010064387 -0.0087909912#
# B     -0.003749422  0.003227356 -0.005750026 -0.0093442165#
# C     -0.001663671 -0.002057510 -0.002506533 -0.0010343299#
# A:B    0.004864068  0.030287363  0.009226595 -0.0042850087#
# A:C    0.002714171  0.022804225 -0.006424034  0.0067907183#
# B:C   -0.007316264 -0.007784916  0.006310455  0.0004125679#
# A:B:C -0.008360759  0.015870336 -0.019819646 -0.0099411601#
#
# $pos#
#                 Y1           Y2           Y3           Y4#
# A     -0.009760522 -0.007338778 -0.009877086 -0.008640632#
# B     -0.003677148  0.003405239 -0.005619224 -0.009189392#
# C     -0.001628272 -0.002183088 -0.002441775 -0.001008947#
# A:B    0.004730349  0.031069643  0.008886644 -0.004193148#
# A:C    0.002645085  0.023574191 -0.006282037  0.006573891#
# B:C   -0.007200423 -0.008310564  0.006095068  0.000401876#
# A:B:C -0.008236848  0.016524634 -0.019638813 -0.009782187#
#
# $cf#
#               Y1         Y2         Y3         Y4#
# A     0.08663705 0.10210022 0.08582458 0.09409480#
# B     0.09171841 0.13073505 0.07780510 0.04172985#
# C     0.03511560 0.02357101 0.01549044 0.04461255#
# A:B   0.28852280 0.34165182 0.29733875 0.26888814#
# A:C   0.15035225 0.22124627 0.10817740 0.16573015#
# B:C   0.06434283 0.05291546 0.14290002 0.11574129#
# A:B:C 0.25962484 0.31307460 0.23196905 0.25601650#
#
# $cf.pop#
#               Y1         Y2         Y3         Y4#
# A     0.00000000 0.00000000 0.00000000 0.00000000#
# B     0.00000000 0.05845404 0.00000000 0.00000000#
# C     0.00000000 0.00000000 0.00000000 0.00000000#
# A:B   0.06894078 0.17906959 0.09469068 0.00000000#
# A:C   0.05149855 0.15538131 0.00000000 0.08134736#
# B:C   0.00000000 0.00000000 0.07830993 0.02005087#
# A:B:C 0.00000000 0.12962363 0.00000000 0.00000000#
F.values <- lapply(1:N.eff, function(iii){#
	effect.size.type <- effect.size.types[iii]#
	effect.size <- Manova2$univariate$effect.sizes[[effect.size.type]]#
	sapply(1:m, function(ii){#
		F.effect.size.calculator(effect.size=effect.size[,ii], df=df, dfe=dfe, N=N, effect.size.type=effect.size.type)#
	})#
})#
names(F.values) <- effect.size.types#
F.values$es#
#            [,1]      [,2]       [,3]      [,4]#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
Manova2$univariate$F#
#              Y1        Y2         Y3        Y4#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
Manova1$multivariate.tests$A$SSPH#
#          [,1]      [,2]      [,3]      [,4]#
# [1,] 933.7091  643.8352  680.0428  473.1853#
# [2,] 643.8352 1155.4145 1047.4997  667.8090#
# [3,] 680.0428 1047.4997 1173.5965  840.8618#
# [4,] 473.1853  667.8090  840.8618 1085.7157#
#
Manova2$multivariate$SSPH$A#
#          Y1        Y2        Y3        Y4#
# Y1 933.7091  643.8352  680.0428  473.1853#
# Y2 643.8352 1155.4145 1047.4997  667.8090#
# Y3 680.0428 1047.4997 1173.5965  840.8618#
# Y4 473.1853  667.8090  840.8618 1085.7157#
#
Manova1$multivariate.tests$B$SSPH#
#           [,1]      [,2]       [,3]       [,4]#
# [1,] 1046.4472  716.6249 -511.81625 -119.49546#
# [2,]  716.6249 1894.3932  529.21761 -336.08074#
# [3,] -511.8163  529.2176  964.53783    3.10417#
# [4,] -119.4955 -336.0807    3.10417  213.54682#
#
Manova2$multivariate$SSPH$B#
#           Y1        Y2         Y3         Y4#
# Y1 1046.4472  716.6249 -511.81625 -119.49546#
# Y2  716.6249 1894.3932  529.21761 -336.08074#
# Y3 -511.8163  529.2176  964.53783    3.10417#
# Y4 -119.4955 -336.0807    3.10417  213.54682#
#
Manova1$multivariate.tests$C$SSPH#
#            [,1]      [,2]      [,3]      [,4]#
# [1,]  153.39258 -97.19243  76.58072 -193.4894#
# [2,]  -97.19243  61.58295 -48.52299  122.5985#
# [3,]   76.58072 -48.52299  38.23266  -96.5989#
# [4,] -193.48935 122.59850 -96.59890  244.0674#
#
Manova2$multivariate$SSPH$C#
#            Y1        Y2        Y3        Y4#
# Y1  153.39258 -97.19243  76.58072 -193.4894#
# Y2  -97.19243  61.58295 -48.52299  122.5985#
# Y3   76.58072 -48.52299  38.23266  -96.5989#
# Y4 -193.48935 122.59850 -96.59890  244.0674#
#
Manova1$multivariate.tests$'A:B'$SSPH#
#           [,1]      [,2]      [,3]     [,4]#
# [1,] 10355.344  6068.672  3992.285 3917.855#
# [2,]  6068.672 12937.569  7267.808 4557.909#
# [3,]  3992.285  7267.808 14086.491 7214.207#
# [4,]  3917.855  4557.909  7214.207 8866.009#
#
Manova2$multivariate$SSPH$'A:B'#
#           Y1        Y2        Y3       Y4#
# Y1 10355.344  6068.672  3992.285 3917.855#
# Y2  6068.672 12937.569  7267.808 4557.909#
# Y3  3992.285  7267.808 14086.491 7214.207#
# Y4  3917.855  4557.909  7214.207 8866.009#
#
Manova1$multivariate.tests$'A:C'$SSPH#
#           [,1]     [,2]      [,3]      [,4]#
# [1,] 2812.0570 2875.919  697.4654  472.3167#
# [2,] 2875.9188 5425.460 1447.2806 -423.3800#
# [3,]  697.4654 1447.281 1864.5341 1627.5914#
# [4,]  472.3167 -423.380 1627.5914 3368.1620#
#
Manova2$multivariate$SSPH$'A:C'#
#           Y1       Y2        Y3        Y4#
# Y1 2812.0570 2875.919  697.4654  472.3167#
# Y2 2875.9188 5425.460 1447.2806 -423.3800#
# Y3  697.4654 1447.281 1864.5341 1627.5914#
# Y4  472.3167 -423.380 1627.5914 3368.1620#
#
Manova1$multivariate.tests$'B:C'$SSPH#
#            [,1]       [,2]       [,3]      [,4]#
# [1,]  514.99679  -28.63097 -374.31638 -585.7867#
# [2,]  -28.63097  310.35277  -29.83564 -235.4005#
# [3,] -374.31638  -29.83564 3253.64728  548.5185#
# [4,] -585.78670 -235.40049  548.51845 1642.7390#
#
Manova2$multivariate$SSPH$'B:C'#
#            Y1         Y2         Y3        Y4#
# Y1  514.99679  -28.63097 -374.31638 -585.7867#
# Y2  -28.63097  310.35277  -29.83564 -235.4005#
# Y3 -374.31638  -29.83564 3253.64728  548.5185#
# Y4 -585.78670 -235.40049  548.51845 1642.7390#
#
Manova1$multivariate.tests$'A:B:C'$SSPH#
#          [,1]      [,2]     [,3]     [,4]#
# [1,] 8384.878  3737.000 1225.204 1088.891#
# [2,] 3737.000 10863.807 4190.763 2090.254#
# [3,] 1225.204  4190.763 8573.550 2080.343#
Manova2$multivariate$SSPH$'A:B:C'#
#          Y1        Y2       Y3       Y4#
# Y1 8384.878  3737.000 1225.204 1088.891#
# Y2 3737.000 10863.807 4190.763 2090.254#
# Y3 1225.204  4190.763 8573.550 2080.343#
# Y4 1088.891  2090.254 2080.343 8037.596#
#
Manova1$multivariate.tests$'A:B:C'$SSPE#
#            [,1]      [,2]      [,3]       [,4]#
# [1,] 124395.375  48964.95  20321.15   9174.277#
# [2,]  48964.952 110837.18  59000.44  26435.177#
# [3,]  20321.147  59000.44 159331.51  65634.985#
# [4,]   9174.277  26435.18  65634.99 122627.688#
#
Manova2$multivariate$SSPE#
#            Y1        Y2        Y3         Y4#
# Y1 124395.375  48964.95  20321.15   9174.277#
# Y2  48964.952 110837.18  59000.44  26435.177#
# Y3  20321.147  59000.44 159331.51  65634.985#
# Y4   9174.277  26435.18  65634.99 122627.688#
#
Manova1$multivariate.tests$'A:B:C'#
#
# Sum of squares and products for the hypothesis:#
#          [,1]      [,2]     [,3]     [,4]#
# [1,] 8384.878  3737.000 1225.204 1088.891#
# [2,] 3737.000 10863.807 4190.763 2090.254#
# [3,] 1225.204  4190.763 8573.550 2080.343#
# [4,] 1088.891  2090.254 2080.343 8037.596#
# #
# Sum of squares and products for error:#
#            [,1]      [,2]      [,3]       [,4]#
# [1,] 124395.375  48964.95  20321.15   9174.277#
# [2,]  48964.952 110837.18  59000.44  26435.177#
# [3,]  20321.147  59000.44 159331.51  65634.985#
# [4,]   9174.277  26435.18  65634.99 122627.688#
# #
# Multivariate Tests: A:B:C#
#                  Df test stat  approx F num Df   den Df  Pr(>F)#
# Pillai           24 0.2823563 0.9810253     96 1240.000 0.53372#
# Wilks            24 0.7455292 0.9768058     96 1218.694 0.54506#
# Hotelling-Lawley 24 0.3056174 0.9725638     96 1222.000 0.55645#
# Roy              24 0.1059790 1.3688958     24  310.000 0.11930#
#
Manova2$multivariate$Wilks#
#       test.stat         F df       dfe         p          es#
# A     0.9749528 0.3260270 24 1072.2051 0.9991978 0.006321495#
# B     0.9652822 0.6823864 16  938.5381 0.8134232 0.008794802#
# C     0.9927088 0.5637078  4  307.0000 0.6891757 0.007291175#
# A:B   0.7331071 1.0349161 96 1218.6942 0.3925947 0.074680195#
# A:C   0.9053300 1.2919714 24 1072.2051 0.1572833 0.024557383#
# B:C   0.9488768 1.0162763 16  938.5381 0.4362680 0.013033389#
# A:B:C 0.7455292 0.9768058 96 1218.6942 0.5450587 0.070785112#
# car seems to be wrong for the calculation of some F values#
# at a guess it is taking the preceding df for wrong values#
# I need to check this further#
# but I am correct by Anova#
#
fitIV <- lm(Y ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum))#
Manova.test <- Anova(fitIV, type="II")#
# summary(Manova.test, univariate=TRUE)#
#
summary(Manova.test, univariate=TRUE)[[8]]#
Manova2$univariate$`sum of squares`#
Manova2$univariate$F#
Manova2$univariate$`Pr(>F)`#
#
summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,2:5]#
summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,1]#
#
# car error#
# this gives the correct F values from car numbers#
#
MS <- summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,2:5] / #
matrix(rep(summary(Manova.test, univariate=TRUE)[[8]][[1]][1:7,1],each=4),byrow=TRUE, ncol=4)#
#
MSe <- summary(Manova.test, univariate=TRUE)[[8]][[1]][8,2:5] / #
summary(Manova.test, univariate=TRUE)[[8]][[1]][8,1] #
#
MS / matrix(rep(MSe, each=7), ncol=4)#
#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
#
Manova2$univariate$F#
#              Y1        Y2         Y3        Y4#
# A     0.3878089 0.5385969 0.38056940 0.4574480#
# B     0.6519507 1.3246031 0.46915664 0.1349570#
# C     0.3822626 0.1722337 0.07438568 0.6169867#
# A:B   1.0752532 1.5077104 1.14196680 0.9338857#
# A:C   1.1679663 2.5290789 0.60462142 1.4191015#
# B:C   0.3208500 0.2170036 1.58258230 1.0381936#
# A:B:C 0.8706487 1.2660362 0.69504116 0.8466158#
# using ANOVA to confirm#
sapply(1:m, function(iii) Anova(lm(Y[,iii] ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum)), type="II")[1:7,"F value"] )#
#           [,1]      [,2]       [,3]      [,4]#
# [1,] 0.3878089 0.5385969 0.38056940 0.4574480#
# [2,] 0.6519507 1.3246031 0.46915664 0.1349570#
# [3,] 0.3822626 0.1722337 0.07438568 0.6169867#
# [4,] 1.0752532 1.5077104 1.14196680 0.9338857#
# [5,] 1.1679663 2.5290789 0.60462142 1.4191015#
# [6,] 0.3208500 0.2170036 1.58258230 1.0381936#
# [7,] 0.8706487 1.2660362 0.69504116 0.8466158#
#
lapply(1:m, function(iii) Anova(lm(Y[,iii] ~ A*B*C, contrasts=list(A=contr.sum, B=contr.sum, C=contr.sum)), type="II") )#
#
# could just do 4 ANOVAs #
# if Y is simply one column #
formula <- Y ~ A + B + C + A*B*C#
sapply(1: dim(Y)[2], function(ii) MANOVA(formula, longdata[,c(1:3,ii+3)])$ANOVA[,"p"] )#
           [,1]       [,2]      [,3]      [,4]#
A     0.8866611 0.77875718 0.8912229 0.8394840#
B     0.6258928 0.26064757 0.7583703 0.9693790#
C     0.5368488 0.67842133 0.7852367 0.4327692#
A:B   0.3708548 0.06241955 0.2960560 0.5555078#
A:C   0.3232311 0.02097027 0.7266195 0.2067099#
B:C   0.8639366 0.92888217 0.1787353 0.3875895#
A:B:C 0.6428363 0.18475070 0.8563287 0.6755199#
#
Manova2$univariate$`Pr(>F)`#
             Y1         Y2        Y3        Y4#
A     0.8866611 0.77875718 0.8912229 0.8394840#
B     0.6258928 0.26064757 0.7583703 0.9693790#
C     0.5368488 0.67842133 0.7852367 0.4327692#
A:B   0.3708548 0.06241955 0.2960560 0.5555078#
A:C   0.3232311 0.02097027 0.7266195 0.2067099#
B:C   0.8639366 0.92888217 0.1787353 0.3875895#
A:B:C 0.6428363 0.18475070 0.8563287 0.6755199#
formula <- Y ~ A + B + C#
Manova2 <- MANOVA(formula, longdata, TEST="all")#
Manova2$multivariate$tests$Pillai#
   test.stat         F df  dfe         p          es#
A 0.02181492 0.3363296 24 1472 0.9989738 0.005453729#
B 0.02742761 0.6351905 16 1472 0.8572654 0.006856903#
C 0.00644906 0.5922965  4  365 0.6684200 0.006449060#
Manova2$multivariate$tests$Wilks#
  test.stat         F df      dfe         p          es#
A 0.9783289 0.3345706 24 1274.543 0.9990118 0.005462361#
B 0.9727797 0.6327857 16 1115.731 0.8591075 0.006875672#
C 0.9935509 0.5922965  4  365.000 0.6684200 0.006449060#
Manova2$univariate$`Pr(>F)`#
# Type II/III sum of squares#
library(car)#
fitII <- lm(Y ~ A+B+C)#
Manova.test <- Anova(fitII, type="II")#
summary(Manova.test, univariate=TRUE)#
############################
rm( list=ls(all=TRUE ) )#
library( ANOVA.boot )#
model <- Y ~ A + B + C + A*B*C#
n.A <- 5#
n.B <- 3#
n.C <- 2#
n <- 4 	# sample size in each group#
N.var <- 3#
#
mu.m <- c(50, 100, 150)#
sd.m <-  c(5, 10, 15)#
#
set.seed(42)#
#
rel.A <- matrix( rep(1, n.A*N.var), ncol=n.A )#
rel.B <- matrix( rep(1, n.B*N.var), ncol=n.B )#
rel.C <- matrix( rep(1, n.C*N.var), ncol=n.C )#
#
# rel.A[3, 2]=1.1; rel.B[3, 3]=1.1; rel.C[3, 2]=1.1#
#
rel.amplitudes <- list(A=rel.A, B=rel.B, C=rel.C)#
#
p = 0.3#
levs <- c(A=n.A, B=n.B, C=n.C)#
groups <-  names(levs)#
n.groups <- length(groups)#
#
# set up nesting#
rep.each <- c(1, sapply(1:(n.groups-1), function(ii) prod( levs[1:ii] ) ) )#
rep.times <- c( sapply(2:n.groups, function(ii) prod( levs[ii:n.groups] ) ), 1)#
#
factors <- lapply(1:n.groups, function(ii){#
	rep( rep(seq_len(levs[ii]), each=rep.each[ii]), times = rep.times[ii] ) #
})#
names(factors) <- groups #
scales <- factors#
factors1 <- factors#
factors <- lapply(1:n.groups, function(iii) rep(factors[[iii]], each=n) )#
factors <- lapply(factors, factor)#
for(ii in (1:n.groups) ){ assign(groups[ii], factors[[ii]]) }#
#
scales <- lapply(1:N.var, function(i){#
	scales.tmp <- scales#
	for(ii in (1:n.groups) ) {#
		for( iii in (1:levs[ii]) ) { scales.tmp[[ii]] <- replace(scales.tmp[[ii]], scales.tmp[[ii]]==iii, rel.amplitudes[[ii]][i,iii]); scales.tmp[[ii]] }#
	}#
	scales.tmp#
})#
#
scales <- lapply( 1:N.var, function(iii) do.call(cbind, scales[[iii]]) )#
scales <- sapply( 1:N.var, function(iii) apply(scales[[iii]] ,1,prod) )#
g <- interaction(A,B,C)#
# scales is total no of groups ( prod(levs) ) by N.var matrix that specifies average amplitude to simulate#
N <- prod(levs)		# dim(scales)[1]#
mu.m.scales <- scales * matrix( rep(mu.m, N), byrow=TRUE, ncol=N.var )#
N <- n.A*n.B*n.C#
muij <- mu.m.scales#
sdij <- matrix( rep(sd.m, each=N), ncol=N.var)#
#
names(factors) <- c("A","B","C")#
#
# Y <- muij[rep(1:N, each=n), ]  #
TYPE = "II"#
TEST="all"#
ANOVA=TRUE#
ANOVA.effect.size="os"#
show.power=FALSE#
#
alpha=0.05#
ar=FALSE#
longdata <- list(#
			mu=cbind(do.call(cbind, factors1), muij), #
			sd=cbind(do.call(cbind, factors1), sdij)#
		)#
longdata <- lapply(1:length(longdata), function(iii){#
		colnames(longdata[[iii]]) <- c("A","B","C", "Y1","Y2","Y3") #
		longdata[[iii]]#
	})#
names(longdata) <- c("mu", "sd")#
#
rm( list = ls()[!(ls() %in% c('model','muij','sdij','factors', 'longdata', 'n','p','ar','TYPE','TEST','ANOVA','ANOVA.effect.size','show.power','alpha'))] )#
#
# the wrapper for this is below#
expected <- expected.MANOVA(model=model, muij=muij, sdij=sdij, factors=factors, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha)#
#
expected#
#
# $multivariate#
# $multivariate$tests#
# $multivariate$tests$Pillai#
#        test.stat         F df dfe         p         es#
# A     0.12765957 0.3333333 12  90 0.9810217 0.04255319#
# B     0.06521739 0.3258427  6  58 0.9207795 0.03260870#
# C     0.03296703 0.3181818  3  28 0.8121134 0.03296703#
# A:B   0.24489796 0.3333333 24  90 0.9983744 0.08163265#
# A:C   0.12765957 0.3333333 12  90 0.9810217 0.04255319#
# B:C   0.06521739 0.3258427  6  58 0.9207795 0.03260870#
# A:B:C 0.24489796 0.3333333 24  90 0.9983744 0.08163265#
# #
# $multivariate$tests$Wilks#
#       test.stat         F df      dfe         p         es#
# A     0.8776957 0.3132529 12 74.37254 0.9850227 0.04255319#
# B     0.9361901 0.3128332  6 56.00000 0.9276793 0.03243083#
# C     0.9673939 0.3145807  3 28.00000 0.8146843 0.03260608#
# A:B   0.7745497 0.3138801 24 81.80974 0.9989357 0.08163265#
# A:C   0.8776957 0.3132529 12 74.37254 0.9850227 0.04255319#
# B:C   0.9361901 0.3128332  6 56.00000 0.9276793 0.03243083#
# A:B:C 0.7745497 0.3138801 24 81.80974 0.9989357 0.08163265#
# #
# $multivariate$tests$Hotelling#
#        test.stat         F df dfe         p         es#
# A     0.13333333 0.2962963 12  80 0.9883685 0.04255319#
# B     0.06666667 0.3000000  6  54 0.9342081 0.03225806#
# C     0.03333333 0.3111111  3  28 0.8171615 0.03225806#
# A:B   0.26666667 0.2962963 24  80 0.9993230 0.08163265#
# A:C   0.13333333 0.2962963 12  80 0.9883685 0.04255319#
# B:C   0.06666667 0.3000000  6  54 0.9342081 0.03225806#
# A:B:C 0.26666667 0.2962963 24  80 0.9993230 0.08163265#
# #
# $multivariate$tests$`Roy's`#
#        test.stat         F df dfe         p         es#
# A     0.04444444 0.3333333  4  30 0.8533215 0.04255319#
# B     0.02222222 0.2148148  3  29 0.8853142 0.02173913#
# C     0.01111111 0.1037037  3  28 0.9572148 0.01098901#
# A:B   0.08888889 0.3333333  8  30 0.9461661 0.08163265#
# A:C   0.04444444 0.3333333  4  30 0.8533215 0.04255319#
# B:C   0.02222222 0.2148148  3  29 0.8853142 0.02173913#
# A:B:C 0.08888889 0.3333333  8  30 0.9461661 0.08163265#
# #
# #
# $multivariate$effect.sizes#
#           m.es.V  m.es.V.adj     m.es.W  m.es.W.adj     m.es.H  m.es.H.adj     m.es.R   m.es.R.adj       m.os      m.os.adj#
# A     0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# B     0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# C     0.03296703 0.007957560 0.03260608 0.007587277 0.03225806 0.007230256 0.01098901 -0.014588859 0.02420936 -0.0028959387#
# A:B   0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
# A:C   0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# B:C   0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# A:B:C 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
# #
# $multivariate$SSPH#
# $multivariate$SSPH$A#
#          [,1]     [,2] [,3]#
# [1,] 33.33333  20.0000   30#
# [2,] 20.00000 133.3333   60#
# [3,] 30.00000  60.0000  300#
# #
# $multivariate$SSPH$B#
#          [,1]     [,2] [,3]#
# [1,] 16.66667 10.00000   15#
# [2,] 10.00000 66.66667   30#
# [3,] 15.00000 30.00000  150#
# #
# $multivariate$SSPH$C#
#          [,1]     [,2] [,3]#
# [1,] 8.333333  5.00000  7.5#
# [2,] 5.000000 33.33333 15.0#
# [3,] 7.500000 15.00000 75.0#
# #
# $multivariate$SSPH$`A:B`#
#          [,1]     [,2] [,3]#
# [1,] 66.66667  40.0000   60#
# [2,] 40.00000 266.6667  120#
# [3,] 60.00000 120.0000  600#
# #
# $multivariate$SSPH$`A:C`#
#          [,1]     [,2] [,3]#
# [1,] 33.33333  20.0000   30#
# [2,] 20.00000 133.3333   60#
# [3,] 30.00000  60.0000  300#
# #
# $multivariate$SSPH$`B:C`#
#          [,1]     [,2] [,3]#
# [1,] 16.66667 10.00000   15#
# [2,] 10.00000 66.66667   30#
# [3,] 15.00000 30.00000  150#
# #
# $multivariate$SSPH$`A:B:C`#
#          [,1]     [,2] [,3]#
# [1,] 66.66667  40.0000   60#
# [2,] 40.00000 266.6667  120#
# [3,] 60.00000 120.0000  600#
# #
# #
# $multivariate$SSPE#
#      [,1] [,2] [,3]#
# [1,]  750  450  675#
# [2,]  450 3000 1350#
# [3,]  675 1350 6750#
# #
# #
# $univariate#
# $univariate$`sum of squares`#
#       df                           #
# A      4  33.333333  133.33333  300#
# B      2  16.666667   66.66667  150#
# C      1   8.333333   33.33333   75#
# A:B    8  66.666667  266.66667  600#
# A:C    4  33.333333  133.33333  300#
# B:C    2  16.666667   66.66667  150#
# A:B:C  8  66.666667  266.66667  600#
# error 90 750.000000 3000.00000 6750#
# #
# $univariate$F#
#       [,1] [,2] [,3]#
# A        1    1    1#
# B        1    1    1#
# C        1    1    1#
# A:B      1    1    1#
# A:C      1    1    1#
# B:C      1    1    1#
# A:B:C    1    1    1#
# #
# $univariate$`Pr(>F)`#
#            [,1]      [,2]      [,3]#
# A     0.4118909 0.4118909 0.4118909#
# B     0.3719296 0.3719296 0.3719296#
# C     0.3199916 0.3199916 0.3199916#
# A:B   0.4417604 0.4417604 0.4417604#
# A:C   0.4118909 0.4118909 0.4118909#
# B:C   0.3719296 0.3719296 0.3719296#
# A:B:C 0.4417604 0.4417604 0.4417604#
# #
# $univariate$os#
#       [,1] [,2] [,3]#
# A        0    0    0#
# B        0    0    0#
# C        0    0    0#
# A:B      0    0    0#
# A:C      0    0    0#
# B:C      0    0    0#
# A:B:C    0    0    0#
formula <- Y ~ A + B + C + A*B*C#
rm( list = ls()[!(ls() %in% c('formula','muij', 'factors', 'longdata','n','p','ar','TYPE','TEST','ANOVA','ANOVA.effect.size','show.power','alpha'))] )#
expected2 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha)#
expected2$multivariate$effect.sizes#
#          m.es.V m.es.V.adj    m.es.W m.es.W.adj    m.es.H m.es.H.adj    m.es.R m.es.R.adj      m.os   m.os.adj#
# A     0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B     0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# C     0.0329670  0.0079576 0.0326061  0.0075873 0.0322581  0.0072303 0.0109890 -0.0145889 0.0242094 -0.0028959#
# A:B   0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# A:C   0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B:C   0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# A:B:C 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
#
# if SERLIN=TRUE  then effect.size tables are identical#
#
expected2.adj <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
	show.power=show.power, power.settings = list(ncp.method1 = "OS", ncp.method2 = "pop", Serlin = TRUE), alpha=alpha)#
expected2.adj$multivariate$effect.sizes#
#          m.es.V m.es.V.adj    m.es.W m.es.W.adj    m.es.H m.es.H.adj    m.es.R m.es.R.adj      m.os   m.os.adj#
# A     0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B     0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# C     0.0329670  0.0079576 0.0326061  0.0075873 0.0322581  0.0072303 0.0109890 -0.0145889 0.0242094 -0.0028959#
# A:B   0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
# A:C   0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0425532  0.0092507 0.0910806  0.0279612#
# B:C   0.0326087  0.0075900 0.0324308  0.0074075 0.0322581  0.0072303 0.0217391 -0.0035607 0.0474272  0.0130287#
# A:B:C 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.0816327  0.0154440 0.1684514 -0.0001681#
#
# However, expected2$multivariate$tests$Pillai etc returns unajdusted if FALSE and  expected2.adj$multivariate$tests$Pillai returns adjusted if SERLIN=TRUE#
sapply(1:length(expected2$multivariate$tests), function(ii) expected2$multivariate$tests[[ii]][,"es"] )#
           [,1]      [,2]      [,3]      [,4]#
A     0.0425532 0.0425532 0.0425532 0.0425532#
B     0.0326087 0.0324308 0.0322581 0.0217391#
C     0.0329670 0.0326061 0.0322581 0.0109890#
A:B   0.0816327 0.0816327 0.0816327 0.0816327#
A:C   0.0425532 0.0425532 0.0425532 0.0425532#
B:C   0.0326087 0.0324308 0.0322581 0.0217391#
A:B:C 0.0816327 0.0816327 0.0816327 0.0816327#
#
sapply(1:length(expected2.adj$multivariate$tests), function(ii) expected2.adj$multivariate$tests[[ii]][,"es"] )#
           [,1]      [,2]      [,3]       [,4]#
A     0.0092507 0.0092507 0.0092507  0.0092507#
B     0.0075900 0.0074075 0.0072303 -0.0035607#
C     0.0079576 0.0075873 0.0072303 -0.0145889#
A:B   0.0154440 0.0154440 0.0154440  0.0154440#
A:C   0.0092507 0.0092507 0.0092507  0.0092507#
B:C   0.0075900 0.0074075 0.0072303 -0.0035607#
A:B:C 0.0154440 0.0154440 0.0154440  0.0154440#
longdata <- lapply(1:length(longdata), function(iii){#
		colnames(longdata[[iii]]) <- c("size","car","city", "Y1","Y2","Y3") #
		longdata[[iii]]#
	})#
names(longdata) <- c("mu", "sd")#
#
formula <- Y ~ size*car*city#
expected3 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha)#
expected3$multivariate$effect.sizes#
#                   m.es.V  m.es.V.adj     m.es.W  m.es.W.adj     m.es.H  m.es.H.adj     m.es.R   m.es.R.adj       m.os      m.os.adj#
# size          0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# car           0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# city          0.03296703 0.007957560 0.03260608 0.007587277 0.03225806 0.007230256 0.01098901 -0.014588859 0.02420936 -0.0028959387#
# size:car      0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
# size:city     0.04255319 0.009250694 0.04255319 0.009250694 0.04255319 0.009250694 0.04255319  0.009250694 0.09108062  0.0279612194#
# car:city      0.03260870 0.007589955 0.03243083 0.007407486 0.03225806 0.007230256 0.02173913 -0.003560720 0.04742715  0.0130286877#
# size:car:city 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265 0.015444015 0.08163265  0.015444015 0.16845144 -0.0001681348#
power.settings <- list(ncp.method1="MP", ncp.method2="F value", Serlin=TRUE)#
expected4 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, power.settings=power.settings, alpha=alpha)#
#
expected4$multivariate$tests$Wilks#
#               test.stat         F df      dfe         p          es ncp Power#
# size          0.8776957 0.9818783 12 233.1176 0.4668818 0.009250694   0  0.05#
# car           0.9361901 0.9831899  6 176.0000 0.4381451 0.007407486   0  0.05#
# city          0.9673939 0.9886822  3  88.0000 0.4019752 0.007587277   0  0.05#
# size:car      0.7745497 0.9815373 24 255.8280 0.4911317 0.015444015   0  0.05#
# size:city     0.8776957 0.9818783 12 233.1176 0.4668818 0.009250694   0  0.05#
# car:city      0.9361901 0.9831899  6 176.0000 0.4381451 0.007407486   0  0.05#
# size:car:city 0.7745497 0.9815373 24 255.8280 0.4911317 0.015444015   0  0.05#
power.settings.GPower <- list(ncp.method1="OS", ncp.method2="pop", Serlin=FALSE)#
expected5 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, power.settings=power.settings.GPower, alpha=alpha)#
expected5$multivariate$tests$Wilks#
#
#               test.stat         F df      dfe         p         es ncp Power#
# size          0.8776957 0.9818783 12 233.1176 0.4668818 0.04255319   0  0.05#
# car           0.9361901 0.9831899  6 176.0000 0.4381451 0.03243083   0  0.05#
# city          0.9673939 0.9886822  3  88.0000 0.4019752 0.03260608   0  0.05#
# size:car      0.7745497 0.9815373 24 255.8280 0.4911317 0.08163265   0  0.05#
# size:city     0.8776957 0.9818783 12 233.1176 0.4668818 0.04255319   0  0.05#
# car:city      0.9361901 0.9831899  6 176.0000 0.4381451 0.03243083   0  0.05#
# size:car:city 0.7745497 0.9815373 24 255.8280 0.4911317 0.08163265   0  0.05#
# G*Power calculate required values#
Wilks <- expected5$multivariate$tests$Wilks[,"test.stat"]#
model <- formula#
levs <- sapply(1:length(factors), function(ii) length(unique(factors[[ii]])))#
N <- n*prod(levs)#
k <- prod(levs)#
info <- terms(model)#
terms <- attr(info, "term.labels")#
n.terms <- length(terms)#
fac <- attr(info, "factors") #
mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
mat[mat == 0] = 1#
q <- apply(mat, 2, prod)#
m <- dim(muij)[2]#
p <- m#
#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- ANOVA.boot:::model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
Wilks.con <- ANOVA.boot:::Wilks.constants(N, k, p, q)#
# b <- sapply(q, max, p)#
#
s <- Wilks.con$s#
b <- Wilks.con$b#
# b for Serlin is different to b in ANOVA.boot:::Wilks.constants#
b.serlin <- sapply(q, max, p)#
Serlin.adj <- (N - 1)/(N - b.serlin - 1)#
df1 <- Wilks.con$df1#
df2 <- Wilks.con$df2#
#
es <- 1 - Wilks^(1/s) # not adjusted#
es#
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.04255319    0.03243083    0.03260608    0.08163265    0.04255319    0.03243083    0.08163265#
#
expected5$multivariate$effect.sizes[,"m.es.W"]#
#         size           car          city      size:car     size:city      car:city size:car:city #
#    0.04255319    0.03243083    0.03260608    0.08163265    0.04255319    0.03243083    0.08163265 #
es.adj <- 1 - (1 - es) * Serlin.adj#
es.adj#
#          size           car          city      size:car     size:city      car:city size:car:city #
#   0.009250694   0.007407486   0.007587277   0.015444015   0.009250694   0.007407486   0.015444015#
expected5$multivariate$effect.sizes[,"m.es.W.adj"]#
#          size           car          city      size:car     size:city      car:city size:car:city #
#   0.009250694   0.007407486   0.007587277   0.015444015   0.009250694   0.007407486   0.015444015#
# G*Power disagrees BUT I AM RECOMMENDING THE SERLIN ADJUSTED VALUES:#
# The approach of Muller and Peterson (1984) has found#
# widespread use; for instance, it has been adopted in the#
# SPSS software package. We nevertheless recommend the#
# approach of OBrien and Shieh (1999) because it has a#
# number of advantages: (1) Unlike the method of Muller#
# and Peterson, it provides the exact noncentral F distribution#
# whenever the hypothesis involves at most s = 1#
# positive eigenvalues; (2) its approximations for s > 1#
# eigenvalues are almost always more accurate than those#
# of Muller and Petersons method (which systematically#
# underestimates power); and (3) it provides a simpler form#
# of the noncentrality parameterthat is, lambda* N, where#
# lambda* is not a function of the total sample size.#
#
# what G*Power calls fsqr(U):#
fsqr.U <- (1 - (1 - es)^(s/b) )/(1 - es)^(s/b)#
#
# no. of eigenvalues : s#
# response variables : p #
# predictors 	   : q + 1 # ?#
#
# eg for size#
effect <- "size"#
Wilks[[effect]]#
# [1] 0.8776957#
q[[effect]]#
# [1] 4#
p#
# [1] 3#
fsqr.U[[effect]]#
# [1] 0.05054332#
#
# Post hoc: Compute achieved power - given alpha, sample size, and effect size #
#
# F tests - MANOVA: Special effects and interactions#
# Options:	Wilks U, Muller-Peterson Algorithm#
# Analysis:	Post hoc: Compute achieved power #
# Input:	Effect size f²(U)	=	0.0550655#
# 	a err prob					=	0.05#
# 	Total sample size				=	120#
# 	Number of groups				=	30#
# 	Number of predictors			=	4#
# 	Response variables			=	3#
# Output:	Noncentrality parameter ?	=	12.8367382#
# 	Critical F					=	1.7938771#
# 	Numerator df				=	12.0000000#
# 	Denominator df				=	233.1176#
# 	Power (1-ß err prob)			=	0.6136963#
# 	Wilks U					=	0.8677776#
#
expected5$multivariate$tests$Wilks[effect, "Power"]#
# [1] 0.7366695#
#
# agreement is ok (G*Power ends up with a different Wilks U which is odd#
#
# my default performs better for NULL#
expected4$multivariate$tests$Wilks[effect, "Power"]#
# [1] 0.05#
# Pillai#
#
Pillai <- expected5$multivariate$tests$Pillai[,"test.stat"] #
Pillai.con <- ANOVA.boot:::Pillai.constants(N, k, p, q)#
# #
#
s <- Pillai.con$s#
t <- Pillai.con$t#
u <- Pillai.con$u#
# b for Serlin is different to b in ANOVA.boot:::Wilks.constants#
b.serlin <- sapply(q, max, p)#
Serlin.adj <- (N - 1)/(N - b.serlin - 1)#
df1 <- Pillai.con$df1#
df2 <- Pillai.con$df2#
#
es = Pillai/s#
#
fsqr.V <- es/(1 - es)#
#
# IBM pg 548#
# The number of nonzero eigenvalues, s, is equal to min(p, n.h)#
n.h <-  q#
s <-  sapply(n.h, min, p)#
#
# n.e is degrees of freedom for error SCCP#
n.e <- N - k#
#
# b is max(p, n.h)#
b <- sapply(n.h, max, p)#
#
df1#
b * s#
#
df2#
s * (n.e - p + s) #
#
( n.e - p + s ) / b * Pillai / (s - Pillai)  # nb mistake ?? in IBM - s#
Pillai#
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.12765957    0.06521739    0.03296703    0.24489796    0.12765957    0.06521739    0.24489796 #
#
# predictors#
q#
fsqr.V #
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.04444444    0.03370787    0.03409091    0.08888889    0.04444444    0.03370787    0.08888889#
# G*Power#
#    0.04444444 	 0.03370786	   0.03409091    0.08888889	 0.04444444	   0.03370786   0.08888889#
Hotelling <- expected5$multivariate$tests$Hotelling[,"test.stat"] #
es <- expected5$multivariate$tests$Hotelling[,"es"]#
es/(1 - es)#
Hotelling.con <- ANOVA.boot:::Hotelling.constants(N, k, p, q)#
#
s <- Hotelling.con$s#
t <- Hotelling.con$t#
u <- Hotelling.con$u#
df1 <- Hotelling.con$df1#
df2 <- Hotelling.con$df2#
#######################################################################################################################################
#######################################################################################################################################
CI=0.95#
subset.names=c("MANOVA.effect.size", "ANOVA.effect.size")#
replacement = TRUE#
raw.return=FALSE#
Nreps=1e3 # Nreps=1e5#
N.dist=1e5#
dist="Normal"#
H0=FALSE#
return.average=TRUE#
p.adjust.method="Sidak-Holm"#
CI=0.95#
method.CI="perc"#
return.p=FALSE#
return.perms=TRUE#
TEST="Pillai"#
seed=42#
cov.mat=NULL#
#
# ptm <- proc.time()#
# MANOVA.sim.H1.2 <- MANOVA.MC(model=model, A=A, B=B, C=C, muij=muij, n=n, cov.mat=NULL, sdij=sdij, p=p, ar=ar, TYPE=TYPE, TEST=TEST, H0=H0, ANOVA=ANOVA, #
# 				ANOVA.effect.size=ANOVA.effect.size, show.power=show.power, alpha=alpha, p.adjust.method=p.adjust.method, factors=factors,#
# 				replacement=TRUE, return.average=TRUE, raw.return=raw.return, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps)#
# #
# proc.time() - ptm#
# #
rm( list = ls()[!(ls() %in% c('formula','longdata','muij', 'factors', 'n', 'cov.mat', 'p','ar','TYPE','TEST','ANOVA','ANOVA.effect.size','dist','show.power','alpha',#
				'p.adjust.method', 'replacement', 'return.average', 'raw.return', 'return.p', 'return.perms', 'CI', #
				'method.CI', 'N.dist', 'Nreps', 'seed'))] )#
p=0.3#
ptm <- proc.time()#
out <- sMANOVA(formula=formula, longdata=longdata, n=n, cov.mat=cov.mat, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
				dist=dist, alpha=alpha, p.adjust.method=p.adjust.method, replacement=replacement, return.average=return.average, #
				raw.return=raw.return, return.p=return.p, return.perms=FALSE, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)#
proc.time() - ptm#
#    user  system elapsed #
#  664.58    2.80  670.78#
#
out$multivariate$`p(F>Fcrit)`[1,]$uncorrected#
#          size           car          city      size:car     size:city      car:city size:car:city #
#         0.042         0.050         0.055         0.057         0.035         0.053         0.055 #
#
out$univariate$`p(F>Fcrit)`[1,]$uncorrected#
#                  [,1]    [,2]    [,3]#
# size          0.05162 0.04987 0.04980#
# car           0.05076 0.04998 0.04982#
# city          0.05114 0.04982 0.05075#
# size:car      0.05067 0.04912 0.05039#
# size:city     0.05069 0.04976 0.04969#
# car:city      0.04901 0.05032 0.05084#
# size:car:city 0.04959 0.05020 0.04956#
out$univariate$`p(F>Fcrit)`[1,]$`pr (Sidak-Holm)`#
#                  [,1]    [,2]    [,3]#
# size          0.00772 0.00734 0.00727#
# car           0.00780 0.00703 0.00744#
# city          0.00747 0.00786 0.00747#
# size:car      0.00777 0.00684 0.00724#
# size:city     0.00773 0.00780 0.00724#
# car:city      0.00757 0.00781 0.00782#
# size:car:city 0.00735 0.00721 0.00781#
#
out$univariate$`effect size`[1,]$os$theta.hat#
#
out.e <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
					ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha)#
#
out.e$univariate$os#
#               Y1 Y2 Y3#
# size           0  0  0#
# car            0  0  0#
# city           0  0  0#
# size:car       0  0  0#
# size:city      0  0  0#
# car:city       0  0  0#
# size:car:city  0  0  0#
#
# doing Pillai#
out$multivariate$`effect size`[1,]$`effect size`[,"m.es.V"]#
#
out.e$multivariate$effect.sizes[,"m.es.V"]#
#          size           car          city      size:car     size:city      car:city size:car:city #
#    0.04255319    0.03260870    0.03296703    0.08163265    0.04255319    0.03260870    0.08163265 #
out$multivariate$`effect size`[1,]$`effect size`[,"m.es.V.adj"]#
#
out.e$multivariate$effect.sizes[,"m.es.V.adj"]#
#          size           car          city      size:car     size:city      car:city size:car:city #
#   0.009250694   0.007589955   0.007957560   0.015444015   0.009250694   0.007589955   0.015444015#
#
# simple ANOVA#
longdata.simple <- list(mu=longdata$mu[, -c(5,6)],sd=longdata$sd[, -c(5,6)])#
#
ptm <- proc.time()#
out.simple <- sMANOVA(formula=formula, longdata=longdata.simple, n=n, cov.mat=cov.mat, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
				dist=dist, alpha=alpha, p.adjust.method=p.adjust.method, replacement=replacement, return.average=return.average, #
				raw.return=raw.return, return.p=return.p, return.perms=FALSE, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)#
proc.time() - ptm#
#
# error here#
out.simple$univariate$`effect size`[1,]$os#
                  theta.hat bias         se     ci.lower   ci.upper#
size          -4.544118e-04    0 0.02458232 -0.031360879 0.06279057#
car           -9.061782e-05    0 0.01617185 -0.016937015 0.04323036#
city           1.111495e-04    0 0.01240626 -0.009052992 0.03447138#
size:car      -1.493807e-03    0 0.03495854 -0.055763924 0.08277467#
size:city      1.607129e-03    0 0.02416156 -0.030951464 0.05990152#
car:city      -4.428358e-04    0 0.01656630 -0.017007497 0.04561201#
size:car:city -1.224009e-03    0 0.03405565 -0.052966153 0.07644643#
eMANOVA(formula=formula, longdata=longdata.simple, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha)#
#
# $ANOVA#
#               df  SS F ncp power os#
# size           4 100 1   0  0.05  0#
# car            2  50 1   0  0.05  0#
# city           1  25 1   0  0.05  0#
# size:car       8 200 1   0  0.05  0#
# size:city      4 100 1   0  0.05  0#
# car:city       2  50 1   0  0.05  0#
# size:car:city  8 200 1   0  0.05  0#
# #
# $error#
#   df   SS #
#   90 2250 #
# pMANOVA#
# inputs formula, longdata, es=NULL, effect=NULL#
#
effect="size:car"#
#
# main effect size : car#
longdata.orig=longdata#
#
size <- longdata$mu[,"size"]#
car <- longdata$mu[,"car"]#
city <- longdata$mu[,"city"]#
longdata$mu[,"Y1"] <- size*0.1 * car*0.1 * 100#
#
# longdata=longdata.orig#
# default#
power.settings <- list(ncp.method1 = "MP", ncp.method2 = "F value", Serlin = TRUE)#
TEST="Wilks"#
out.e <- eMANOVA(formula=formula, longdata=longdata, n=7, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
		ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha, power.settings=power.settings)#
#
out.e$multivariate$Wilks#
#               test.stat          F df      dfe         p        es      ncp     Power#
# size          0.6574770  6.7445235 12 471.2352 0.0000000 0.1134853 68.93428 0.9999968#
# car           0.7320819 10.0122680  6 356.0000 0.0000000 0.1319217 54.07361 0.9999881#
# city          0.9835168  0.9943929  3 178.0000 0.3967824 0.0021601  0.00000 0.0500000#
# size:car      0.8209293  1.5161376 24 516.8554 0.0560678 0.0263890 12.38730 0.4479376#
# size:city     0.9361901  0.9909637 12 471.2352 0.4563345 0.0026511  0.00000 0.0500000#
# car:city      0.9673939  0.9916307  6 356.0000 0.4306631 0.0021144  0.00000 0.0500000#
# size:car:city 0.8776957  0.9907862 24 516.8554 0.4766014 0.0044459  0.00000 0.0500000#
levs <- c(size=5,car=3, city=2)#
#
# because Serlin=TRUE in power settings, above table is returning the Serlin adjusted es#
#
out.e$multivariate$effect.sizes#
#                  m.es.W m.es.W.adj      m.os   m.os.adj#
# size          0.1304521  0.1134853 0.3286401  0.3019989#
# car           0.1443822  0.1319217 0.2599256  0.2446542#
# city          0.0164832  0.0021601 0.0116994 -0.0039879#
# size:car      0.0636564  0.0263890 0.1458014  0.0468228#
# size:city     0.0217391  0.0026511 0.0453357  0.0074522#
# car:city      0.0164381  0.0021144 0.0231511  0.0029939#
# size:car:city 0.0425532  0.0044459 0.0869913 -0.0188018#
#
eMANOVA(formula=formula, longdata=longdata, n=7, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
		ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha, power.settings=list(ncp.method1 = "MP", ncp.method2 = "F value", Serlin = FALSE))$multivariate$Wilks#
#
#               test.stat          F df      dfe         p        es      ncp     Power#
# size          0.6574770  6.7445235 12 471.2352 0.0000000 0.1304521 68.93428 0.9999968#
# car           0.7320819 10.0122680  6 356.0000 0.0000000 0.1443822 54.07361 0.9999881#
# city          0.9835168  0.9943929  3 178.0000 0.3967824 0.0164832  0.00000 0.0500000#
# size:car      0.8209293  1.5161376 24 516.8554 0.0560678 0.0636564 12.38730 0.4479376#
# size:city     0.9361901  0.9909637 12 471.2352 0.4563345 0.0217391  0.00000 0.0500000#
# car:city      0.9673939  0.9916307  6 356.0000 0.4306631 0.0164381  0.00000 0.0500000#
# size:car:city 0.8776957  0.9907862 24 516.8554 0.4766014 0.0425532  0.00000 0.0500000#
#
# values are same but now returns unadjusted effect size#
#######here#
es <- out.e$multivariate$effect.sizes[,"m.es.W"]#
#
es.adj <- out.e$multivariate$effect.sizes[,"m.es.W.adj"]#
out <- esMANOVA(formula=formula, es=es.adj, n=7, k=prod(levs), N.variables=3, TEST="Wilks", population=FALSE, Serlin=TRUE, dp=7)#
out#
#                      es    es(pop)   fsqr(U) fsqr(U)(pop)#
# size          0.1134853  0.0989349 0.1463535    0.1253865#
# car           0.1319217  0.1151956 0.1519698    0.1301933#
# city          0.0021601 -0.0000810 0.0021648   -0.0000810#
# size:car      0.0263890  0.0194670 0.0280489    0.0205429#
# size:city     0.0026511 -0.0001740 0.0030146   -0.0001972#
# car:city      0.0021144 -0.0001209 0.0021189   -0.0001209#
# size:car:city 0.0044459 -0.0003546 0.0046196   -0.0003667#
#
esMANOVA(formula=formula, es=out[, "es(pop)"], n=7, k=prod(levs), N.variables=3, TEST="Wilks", population=TRUE, Serlin=TRUE, dp=7)#
#
#                      es    es(pop)   fsqr(U) fsqr(U)(pop)#
# size          0.1134853  0.0989349 0.1463535    0.1253865#
# car           0.1319217  0.1151956 0.1519698    0.1301933#
# city          0.0021601 -0.0000810 0.0021648   -0.0000810#
# size:car      0.0263890  0.0194670 0.0280489    0.0205429#
# size:city     0.0026511 -0.0001740 0.0030146   -0.0001973#
# car:city      0.0021145 -0.0001209 0.0021189   -0.0001209#
# size:car:city 0.0044459 -0.0003546 0.0046196   -0.0003667#
# default no Serlin Adjust#
# Selin does not adjust population values#
# so population values are same as above#
#
esMANOVA(formula=formula, es=es, n=7, k=prod(levs), N.variables=3, TEST="Wilks", population=FALSE, dp=7)#
#                      es    es(pop)   fsqr(U) fsqr(U)(pop)#
# size          0.1304521  0.0989349 0.1717493    0.1253865#
# car           0.1443822  0.1151956 0.1687461    0.1301933#
# city          0.0164832 -0.0000810 0.0167594   -0.0000810#
# size:car      0.0636564  0.0194670 0.0704013    0.0205429#
# size:city     0.0217391 -0.0001740 0.0252348   -0.0001973#
# car:city      0.0164381 -0.0001210 0.0167128   -0.0001209#
# size:car:city 0.0425532 -0.0003547 0.0460068   -0.0003667#
#
esMANOVA(formula=formula, es=out[, "es(pop)"], n=7, k=prod(levs), N.variables=3, TEST="Wilks", population=TRUE, dp=7)#
#                      es    es(pop)   fsqr(U) fsqr(U)(pop)#
# size          0.1304520  0.0989349 0.1717492    0.1253865#
# car           0.1443822  0.1151956 0.1687461    0.1301933#
# city          0.0164832 -0.0000810 0.0167594   -0.0000810#
# size:car      0.0636564  0.0194670 0.0704014    0.0205429#
# size:city     0.0217391 -0.0001740 0.0252349   -0.0001973#
# car:city      0.0164382 -0.0001209 0.0167129   -0.0001209#
# size:car:city 0.0425533 -0.0003546 0.0460069   -0.0003667#
# to get population values#
#
out.e2 <- eMANOVA(formula=formula, longdata=longdata, n=1000, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
		ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha, power.settings=power.settings)#
#
out.e2$multivariate$Wilks[,"es"]#
#          size           car          city      size:car     size:city      car:city size:car:city #
#     0.1000020     0.1157129     0.0000001     0.0198365     0.0000001     0.0000001     0.0000002#
eMANOVA(formula=formula, longdata=longdata, n=1000, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
	ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha, power.settings=list(ncp.method1 = "MP", ncp.method2 = "F value", Serlin = FALSE))$multivariate$Wilks[,"es"]#
#          size           car          city      size:car     size:city      car:city size:car:city #
#     0.1001220     0.1158014     0.0001001     0.0200979     0.0001334     0.0001001     0.0002669 #
## HERE add input to pMANOVA.ff es entered is the POPULATION value or BIASED value#
# # Always returns actual biased value#
# default population=FALSE#
# if (population) es <- es.f(es.pop=es, N, k, p, q, Serlin.adj, TEST=TEST)[,"es"]#
#
# pMANOVA(formula, levs, N.variables=3, n=7, power=NULL, effect, es=0.026388978, population=FALSE, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7)#
#
pMANOVA(formula, levs, N.variables=3, n=7, power=NULL, effect, es=0.026388978, population=FALSE, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7, plot.graph=FALSE)#
#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.8209293    7.0000000  210.0000000    1.5384458   24.0000000  516.8553723    0.0263890    0.0194670    0.0280489    0.0205429   12.3873035    0.4479376    0.0500000    8.0000000    3.0000000 #
#
pMANOVA(formula, levs, N.variables=3, n=7, power=NULL, effect, es=0.026388978, population=FALSE, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7, plot.graph=TRUE)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.8209293    7.0000000  210.0000000    1.5384458   24.0000000  516.8553723    0.0263890    0.0194670    0.0280489    0.0205429   12.3873035    0.4479376    0.0500000    8.0000000    3.0000000 #
#
pMANOVA(formula, levs, N.variables=3, n=NULL, power=0.8, effect, es=0.02, population=TRUE, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7, plot.graph=FALSE)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.8752729   12.5264553  375.7936583    1.5282521   24.0000000  997.7074232    0.0225717    0.0200000    0.0238962    0.0211170   22.8964714    0.8000000    0.0500000    8.0000000    3.0000000 #
#
# G*Power#
# F tests - MANOVA: Special effects and interactions#
# Options:	Wilks U, O'Brien-Shieh Algorithm#
# Analysis:	A priori: Compute required sample size #
# Input:	Effect size f²(U)			=	0.0211170#
# 		α err prob				=	0.05#
# 		Power (1-β err prob)		=	0.8#
# 		Number of groups			=	30#
# 		Number of predictors		=	8#
# 		Response variables		=	3#
# Output:	Noncentrality parameter λ	=	22.9059010#
# 		Critical F				=	1.5283096#
# 		Numerator df			=	24.0000000#
# 		Denominator df			=	992.5053#
# 		Total sample size			=	374#
# 		Actual power			=	0.8001680#
# 		Wilks U				=	0.9411921#
pMANOVA(formula, levs, N.variables=3, n=NULL, power=0.8, effect, es=0.02, population=TRUE, TEST="Pillai", alpha=0.05, power.settings=power.settings, dp=7, plot.graph=FALSE)#
#       Pillai            n            N       F.crit           df          dfe           es      es(pop)      fsqr(V) fsqr(V)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.1304536   12.4585844  373.7575335    1.5278955   24.0000000 1031.2726004    0.0225059    0.0200000    0.0230241    0.0204082   22.8831143    0.8000000    0.0500000    8.0000000    3.0000000 #
#
# G*Power#
# F tests - MANOVA: Special effects and interactions#
# Options:	Pillai V, O'Brien-Shieh Algorithm#
# Analysis:	A priori: Compute required sample size #
# Input:	Effect size f²(V)			=	0.0204082#
# 		α err prob				=	0.05#
# 		Power (1-β err prob)		=	0.8#
# 		Number of groups			=	30#
# 		Number of predictors		=	8#
# 		Response variables		=	3#
# Output:	Noncentrality parameter λ	=	22.8980004#
# 		Critical F				=	1.5278880#
# 		Numerator df			=	24.0000000#
# 		Denominator df			=	1032#
# 		Total sample size			=	374#
# 		Actual power			=	0.8003501#
# 		Pillai V				=	0.0600001#
pMANOVA(formula, levs, N.variables=3, n=NULL, power=0.8, effect,  es=0.03708987, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7, plot.graph=FALSE)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.8076679    8.1499438  244.4983138    1.5350156   24.0000000  616.9109783    0.0370899    0.0308291    0.0398686    0.0329210   23.1498053    0.8000000    0.0500000    8.0000000    3.0000000 #
#
pMANOVA(formula, levs, N.variables=3, n=NULL, power=0.8, effect,  es=0.03708987, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7, plot.graph=TRUE)#
# if population is TRUE then es returned is the actual biased es#
# calculate from population value#
#
es.pop <- esMANOVA(formula=formula, es=0.0370899, n=8.1499438, k=prod(levs), N.variables=3, TEST=TEST, population=FALSE, Serlin=TRUE, dp=7)[effect, "es(pop)"]#
es.pop #
# [1] 0.0308291#
pMANOVA(formula, levs, N.variables=3, n=NULL, power=0.8, effect, es=es.pop, population=TRUE, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7, plot.graph=FALSE)#
#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.8076677    8.1499384  244.4981533    1.5350156   24.0000000  616.9105128    0.0370899    0.0308291    0.0398686    0.0329210   23.1498059    0.8000000    0.0500000    8.0000000    3.0000000 #
out.e <- eMANOVA(formula=formula, longdata=longdata, n=100, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
		ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha, power.settings=power.settings)#
#
out.e$multivariate$Wilks#
#               test.stat           F df      dfe         p        es       ncp Power#
# size          0.7245130  84.7649729 12 7852.881 0.0000000 0.1006508 1005.1797  1.00#
# car           0.7789461 131.6236572  6 5936.000 0.0000000 0.1165370  783.7419  1.00#
# city          0.9989906   0.9996631  3 2968.000 0.3919367 0.0000091    0.0000  0.05#
# size:car      0.9337330   8.5807945 24 8608.704 0.0000000 0.0199815  181.9391  1.00#
# size:city     0.9959705   0.9994538 12 7852.881 0.4463284 0.0000112    0.0000  0.05#
# car:city      0.9979825   0.9994948  6 5936.000 0.4236427 0.0000089    0.0000  0.05#
# size:car:city 0.9919625   0.9994426 24 8608.704 0.4625206 0.0000189    0.0000  0.05#
#
# make n large and es approaches the population parameter#
# es.pop is still biased (just a lot less)#
#
es <- out.e$multivariate$Wilks[,"es"]#
out <- esMANOVA(formula=formula, es=es, n=100, k=prod(levs), N.variables=3, TEST="Wilks", population=FALSE, dp=7)#
pMANOVA(formula, levs, N.variables=3, n=4, power=NULL, effect, es=0.10372967, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7)#
#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.5843124    4.0000000  120.0000000    1.5600255   24.0000000  255.8279904    0.1037297    0.0736032    0.1199428    0.0822916   28.0699765    0.8739101    0.0500000    8.0000000    3.0000000 #
#
#########
n=4#
#
out.s2 <- sMANOVA(formula=formula, longdata=longdata, n=n, cov.mat=cov.mat, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
				dist=dist, alpha=alpha, p.adjust.method=p.adjust.method, replacement=replacement, return.average=return.average, #
				raw.return=raw.return, return.p=return.p, return.perms=FALSE, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)#
#
out.s2$multivariate$`p(F>Fcrit)`[1,]$uncorrected[[effect]]#
# [1] 0.247#
power.settings <- list(ncp.method1 = "MP", ncp.method2 = "F value", Serlin = TRUE)#
out.e2 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
		ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha, power.settings=power.settings)#
#
es <- out.e2$multivariate$effect.sizes[effect,"m.es.W"]#
out.e2$multivariate$Wilks[effect, "Power"]#
# [1] 0.2208859#
out.e2.pop <- eMANOVA(formula=formula, longdata=longdata, n=1000, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
		ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha, power.settings=power.settings)#
es.pop=out.e2.pop$multivariate$effect.sizes[effect,"m.es.W"]#
es.pop#
# [1] 0.0200979#
#
esMANOVA(formula=formula, es=es, n=n, k=prod(levs), N.variables=3, TEST="Wilks", population=FALSE, Serlin=FALSE, dp=7)[effect,]#
#           es      es(pop)      fsqr(U) fsqr(U)(pop) #
#    0.1037297    0.0185879    0.1199429    0.0195974#
esMANOVA(formula=formula, es=es.pop, n=n, k=prod(levs), N.variables=3, TEST="Wilks", population=TRUE, Serlin=FALSE, dp=7)[effect,]#
#           es      es(pop)      fsqr(U) fsqr(U)(pop) #
#    0.1054030    0.0200979    0.1221098    0.0212226#
power.settings <- list(ncp.method1 = "OS", ncp.method2 = "pop", Serlin = FALSE)#
#
# if setting 2 is pop then es is assumed to be the population value#
pMANOVA(formula, levs, N.variables=3, n=n, power=NULL, effect, es=es.pop, population=TRUE, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.7159493    4.0000000  120.0000000    1.5600255   24.0000000  255.8279904    0.1054030    0.0200979    0.1221098    0.0212226    7.3862254    0.2449918    0.0500000    8.0000000    3.0000000 #
power.settings <- list(ncp.method1 = "MP", ncp.method2 = "F value", Serlin = FALSE)#
pMANOVA(formula, levs, N.variables=3, n=n, power=NULL, effect, es=es,  population = FALSE, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.7199743    4.0000000  120.0000000    1.5600255   24.0000000  255.8279904    0.1037297    0.0185879    0.1199429    0.0195974    6.6847425    0.2208862    0.0500000    8.0000000    3.0000000 #
#
power.settings <- list(ncp.method1 = "MP", ncp.method2 = "F value", Serlin = TRUE)#
es.adj <- out.e2$multivariate$effect.sizes[effect,"m.es.W.adj"]#
#
pMANOVA(formula, levs, N.variables=3, n=n, power=NULL, effect, es=es.adj,  population=FALSE, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.7199744    4.0000000  120.0000000    1.5600255   24.0000000  255.8279904    0.0391336    0.0185879    0.0421565    0.0195973    6.6847294    0.2208858    0.0500000    8.0000000    3.0000000 #
pMANOVA(formula, levs, N.variables=3, n=NULL, power=0.8, effect, es=es.adj, population=FALSE, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.7987749    7.7925602  233.7768061    1.5359562   24.0000000  585.8153439    0.0391336    0.0322579    0.0421565    0.0344985   23.1850406    0.8000000    0.0500000    8.0000000    3.0000000 #
# if G*Power assuming you enter the population effect size??#
# what is population effect size:#
#
power.settings <- list(ncp.method1 = "OS", ncp.method2 = "pop", Serlin = FALSE)#
out.e3 <- eMANOVA(formula=formula, longdata=longdata, n=1000, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
		ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha, power.settings=power.settings)#
#
es.pop <- out.e3$multivariate$effect.sizes[effect,"m.es.W"]#
#
pMANOVA(formula, levs, N.variables=3, n=n, power=NULL, effect, es=es.pop, population=TRUE, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.7159493    4.0000000  120.0000000    1.5600255   24.0000000  255.8279904    0.1054030    0.0200979    0.1221098    0.0212226    7.3862254    0.2449918    0.0500000    8.0000000    3.0000000 #
#
esMANOVA(formula=formula, es=es.pop, n=1000, k=prod(levs), N.variables=3, TEST="Wilks", population=TRUE, Serlin=FALSE, dp=7)[effect,]#
#           es      es(pop)      fsqr(U) fsqr(U)(pop) #
#    0.0203737    0.0200979    0.0215199    0.0212226#
#  tests - MANOVA: Special effects and interactions#
# Options:	Wilks U, O'Brien-Shieh Algorithm#
# Analysis:	Post hoc: Compute achieved power #
# Input:	Effect size f²(U)			=	0.0212226#
# 		α err prob				=	0.05#
# 		Total sample size			=	120#
# 		Number of groups			=	30#
# 		Number of predictors		=	8#
# 		Response variables		=	3#
# Output:	Noncentrality parameter λ	=	7.3862396#
# 		Critical F				=	1.5600255#
# 		Numerator df			=	24.0000000#
# 		Denominator df			=	255.828#
# 		Power (1-β err prob)		=	0.2449923#
# 		Wilks U				=	0.9409098#
#
# their Wilks is the 'pop' Wilks#
# G*Power is returning wilks <- (1 - es.pop)^s; mine is sample wilks (1 - es)^s#
#
power.settings <- list(ncp.method1 = "MP", ncp.method2 = "F value", Serlin = TRUE)#
es <- out.e2$multivariate$effect.sizes[effect,"m.es.W.adj"]#
pMANOVA(formula, levs, N.variables=3, n=4, power=NULL, effect, es=es, population=FALSE, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7)#
#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.7199744    4.0000000  120.0000000    1.5600255   24.0000000  255.8279904    0.0391336    0.0185879    0.0421565    0.0195973    6.6847294    0.2208858    0.0500000    8.0000000    3.0000000 #
out.e2 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
		ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha, power.settings=power.settings)#
out.e2$multivariate$Wilks[effect,"Power"]#
# [1] 0.2208859#
#
es.adj <- out.e2$multivariate$effect.sizes[effect,"m.es.W.adj"]#
pMANOVA(formula, levs, N.variables=3, n=4, power=NULL, effect, es=es.adj, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.7199744    4.0000000  120.0000000    1.5600255   24.0000000  255.8279904    0.0391336    0.0185879    0.0421565    0.0195973    6.6847294    0.2208858    0.0500000    8.0000000    3.0000000#
es <- out.e2$multivariate$effect.sizes[effect,"m.es.W"]#
power.settings <- list(ncp.method1 = "MP", ncp.method2 = "F value", Serlin = FALSE)#
#
pMANOVA(formula, levs, N.variables=3, n=NULL, power=0.8, effect, es=es, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7, plot.graph=FALSE)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.7199743    5.6131401  168.3942045    1.5448874   24.0000000  396.1859070    0.1037297    0.0450089    0.1199429    0.0487891   23.5196733    0.8000001    0.0500000    8.0000000    3.0000000 #
pMANOVA(formula, levs, N.variables=3, n=NULL, power=0.8, effect, es=es, TEST=TEST, alpha=0.05/7, power.settings=power.settings, dp=7, plot.graph=TRUE)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.7199743    6.5246460  195.7393807    1.8869171   24.0000000  475.4952376    0.1037297    0.0537586    0.1199429    0.0588220   33.0322617    0.8000000    0.0071429    8.0000000    3.0000000 #
esMANOVA(formula, es, n=6.5246460, k=prod(levs), N.variables=3, TEST="Wilks", population=FALSE, Serlin=FALSE, dp=7)[effect,]#
#           es      es(pop)      fsqr(U) fsqr(U)(pop) #
#    0.1037297    0.0537586    0.1199429    0.0588220 #
esMANOVA(formula, es=0.0537586, n=6.5246460, k=prod(levs), N.variables=3, TEST="Wilks", population=TRUE, Serlin=FALSE, dp=7)[effect,]#
#           es      es(pop)      fsqr(U) fsqr(U)(pop) #
#    0.1037297    0.0537586    0.1199429    0.0588220#
# power.settings <- list(ncp.method1 = "MP", ncp.method2 = "F value", Serlin = FALSE)#
#
es.pop <- 0.0537586 #
#
pMANOVA(formula, levs, N.variables=3, n=NULL, power=0.8, effect, es=es.pop, population=TRUE, TEST=TEST, alpha=0.05/7, power.settings=power.settings, dp=7, plot.graph=TRUE)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.7199741    6.5246404  195.7392110    1.8869172   24.0000000  475.4947454    0.1037298    0.0537586    0.1199430    0.0588220   33.0322617    0.8000000    0.0071429    8.0000000    3.0000000 #
power.settings.GPower <- list(ncp.method1="OS", ncp.method2="pop", Serlin=FALSE)#
#
pMANOVA(formula, levs, N.variables=3, n=NULL, power=0.8, effect, es=es, population=FALSE, TEST=TEST, alpha=0.05/7, power.settings=power.settings.GPower, dp=7, plot.graph=TRUE)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.7199743    6.4910710  194.7321286    1.8871863   24.0000000  472.5739001    0.1037297    0.0534828    0.1199429    0.0585030   33.0414433    0.8000000    0.0071429    8.0000000    3.0000000  #
esMANOVA(formula, es, n=6.4910710, k=prod(levs), N.variables=3, TEST="Wilks", population=FALSE, Serlin=FALSE, dp=7)[effect,]#
#          es      es(pop)      fsqr(U) fsqr(U)(pop) #
#    0.1037297    0.0534828    0.1199429    0.0585030 #
#
es.pop <- 0.0534828#
#
pMANOVA(formula, levs, N.variables=3, n=NULL, power=0.8, effect, es=es.pop, population=TRUE, TEST=TEST, alpha=0.05/7, power.settings=power.settings.GPower, dp=7, plot.graph=TRUE)#
#        Wilks            n            N       F.crit           df          dfe           es      es(pop)      fsqr(U) fsqr(U)(pop)          ncp        power        alpha       N.pred        N.var #
#    0.7199746    6.4910764  194.7322928    1.8871863   24.0000000  472.5743763    0.1037296    0.0534828    0.1199427    0.0585029   33.0414397    0.8000000    0.0071429    8.0000000    3.0000000 #
# simulate changes in n vs power#
# compare with pMANOVA.f using my settings and G*Power#
#
n.range <- seq(3,15,1)#
#
out <- lapply(1:length(n.range), function(ii){#
	sMANOVA(formula=formula, longdata=longdata, n=n.range[ii], cov.mat=cov.mat, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
				dist=dist, alpha=alpha, p.adjust.method=p.adjust.method, replacement=replacement, return.average=return.average, #
				raw.return=raw.return, return.p=return.p, return.perms=FALSE, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)#
})#
#
power.s <- sapply(1:length(n.range), function(ii) out[[ii]]$multivariate$`p(F>Fcrit)`[1,]$uncorrected[[effect]] )#
effect.s <- t( sapply(1:length(n.range), function(ii) out[[ii]]$multivariate$`effect size`[1,]$`effect size`[effect, ] ) )#
#
# es=effect.s[ii,"m.es.W.adj"][[1]]#
#
power.settings <- list(ncp.method1="MP", ncp.method2="F value", Serlin=TRUE)#
#
power.e1 <- t( sapply(1:length(n.range), function(ii){#
		pMANOVA(formula, levs, N.variables=3, n=n.range[ii], power=NULL, effect, es=effect.s[ii,"m.es.W.adj"][[1]], TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7, plot.graph=FALSE)#
#
	})#
)#
#
power.e1#
#           Wilks  n   N   F.crit df       dfe        es   es(pop)   fsqr(U) fsqr(U)(pop)       ncp     power alpha N.pred N.var#
#  [1,] 0.6260631  3  90 1.582057 24  168.8189 0.0600364 0.0208616 0.0661376    0.0220465  5.582794 0.1791898  0.05      8     3#
#  [2,] 0.7130554  4 120 1.560026 24  255.8280 0.0422215 0.0211877 0.0456321    0.0223986  7.640264 0.2539194  0.05      8     3#
#  [3,] 0.7642414  5 150 1.549181 24  342.8371 0.0338512 0.0205469 0.0362633    0.0217068  9.302383 0.3203117  0.05      8     3#
#  [4,] 0.7995210  6 180 1.542727 24  429.8462 0.0284461 0.0192446 0.0303006    0.0203035 10.472870 0.3694634  0.05      8     3#
#  [5,] 0.8188677  7 210 1.538446 24  516.8554 0.0272047 0.0202056 0.0289405    0.0213386 12.867155 0.4667625  0.05      8     3#
#  [6,] 0.8340462  8 240 1.535398 24  603.8645 0.0260964 0.0205592 0.0277294    0.0217200 14.989672 0.5506930  0.05      8     3#
#  [7,] 0.8479081  9 270 1.533119 24  690.8736 0.0244983 0.0200317 0.0259879    0.0211512 16.439444 0.6054767  0.05      8     3#
#  [8,] 0.8603763 10 300 1.531349 24  777.8828 0.0227455 0.0190832 0.0240845    0.0201298 17.398494 0.6402820  0.05      8     3#
#  [9,] 0.8658991 11 330 1.529935 24  864.8919 0.0231078 0.0199330 0.0244774    0.0210448 20.021639 0.7238481  0.05      8     3#
# [10,] 0.8716986 12 360 1.528779 24  951.9010 0.0229665 0.0201981 0.0243241    0.0213306 22.150517 0.7817625  0.05      8     3#
# [11,] 0.8769212 13 390 1.527818 24 1038.9101 0.0227370 0.0202974 0.0240753    0.0214377 24.127792 0.8273138  0.05      8     3#
# [12,] 0.8832193 14 420 1.527004 24 1125.9193 0.0218735 0.0197323 0.0231401    0.0208286 25.255227 0.8500945  0.05      8     3#
# [13,] 0.8865756 15 450 1.526308 24 1212.9284 0.0219081 0.0199743 0.0231776    0.0210894 27.407037 0.8865310  0.05      8     3#
power.settings <- list(ncp.method1="MP", ncp.method2="F value", Serlin=FALSE)#
power.e1 <- t( sapply(1:length(n.range), function(ii){#
		pMANOVA(formula, levs, N.variables=3, n=n.range[ii], power=NULL, effect, es=effect.s[ii,"m.es.W"][[1]], population=FALSE, TEST=TEST, alpha=0.05, power.settings=power.settings, dp=7, plot.graph=FALSE)#
#
	})#
)#
#
power.e1#
#           Wilks  n   N   F.crit df       dfe        es   es(pop)   fsqr(U) fsqr(U)(pop)       ncp     power alpha N.pred N.var#
#  [1,] 0.6260631  3  90 1.582057 24  168.8189 0.1445275 0.0208616 0.1752339    0.0220465  5.582794 0.1791898  0.05      8     3#
#  [2,] 0.7130554  4 120 1.560026 24  255.8280 0.1066100 0.0211877 0.1236779    0.0223986  7.640264 0.2539194  0.05      8     3#
#  [3,] 0.7642414  5 150 1.549181 24  342.8371 0.0857250 0.0205469 0.0971376    0.0217068  9.302383 0.3203117  0.05      8     3#
#  [4,] 0.7995210  6 180 1.542727 24  429.8462 0.0718675 0.0192446 0.0801981    0.0203035 10.472870 0.3694634  0.05      8     3#
#  [5,] 0.8188677  7 210 1.538446 24  516.8554 0.0644409 0.0202056 0.0713297    0.0213386 12.867155 0.4667625  0.05      8     3#
#  [6,] 0.8340462  8 240 1.535398 24  603.8645 0.0586957 0.0205592 0.0645669    0.0217200 14.989672 0.5506930  0.05      8     3#
#  [7,] 0.8479081  9 270 1.533119 24  690.8736 0.0535095 0.0200317 0.0585338    0.0211512 16.439444 0.6054767  0.05      8     3#
#  [8,] 0.8603763 10 300 1.531349 24  777.8828 0.0488928 0.0190832 0.0532195    0.0201298 17.398494 0.6402820  0.05      8     3#
#  [9,] 0.8658991 11 330 1.529935 24  864.8919 0.0468621 0.0199330 0.0508984    0.0210448 20.021639 0.7238481  0.05      8     3#
# [10,] 0.8716986 12 360 1.528779 24  951.9010 0.0447389 0.0201981 0.0484825    0.0213306 22.150517 0.7817625  0.05      8     3#
# [11,] 0.8769212 13 390 1.527818 24 1038.9101 0.0428349 0.0202974 0.0463253    0.0214377 24.127792 0.8273138  0.05      8     3#
# [12,] 0.8832193 14 420 1.527004 24 1125.9193 0.0405489 0.0197323 0.0437467    0.0208286 25.255227 0.8500945  0.05      8     3#
# [13,] 0.8865756 15 450 1.526308 24 1212.9284 0.0393351 0.0199743 0.0423826    0.0210894 27.407037 0.8865310  0.05      8     3#
#
# power same but now returning non adjusted biased values#
power.settings.GPower <- list(ncp.method1="OS", ncp.method2="pop", Serlin=FALSE)#
#
power.e2 <- t( sapply(1:length(n.range), function(ii){#
		pMANOVA(formula, levs, N.variables=3, n=n.range[ii], power=NULL, effect, es=effect.s[ii,"m.es.W"][[1]], population=FALSE, TEST=TEST, alpha=0.05, power.settings=power.settings.GPower, dp=7, plot.graph=FALSE)#
	})#
)#
power.e2#
#           Wilks  n   N   F.crit df       dfe        es   es(pop)   fsqr(U) fsqr(U)(pop)       ncp     power alpha N.pred N.var#
#  [1,] 0.6260631  3  90 1.582057 24  168.8189 0.1445275 0.0208616 0.1752339    0.0220465  5.754736 0.1843973  0.05      8     3#
#  [2,] 0.7130554  4 120 1.560026 24  255.8280 0.1066100 0.0211877 0.1236779    0.0223986  7.795543 0.2594237  0.05      8     3#
#  [3,] 0.7642414  5 150 1.549181 24  342.8371 0.0857250 0.0205469 0.0971376    0.0217068  9.443461 0.3256875  0.05      8     3#
#  [4,] 0.7995210  6 180 1.542727 24  429.8462 0.0718675 0.0192446 0.0801981    0.0203035 10.599550 0.3744288  0.05      8     3#
#  [5,] 0.8188677  7 210 1.538446 24  516.8554 0.0644409 0.0202056 0.0713297    0.0213386 12.996594 0.4718191  0.05      8     3#
#  [6,] 0.8340462  8 240 1.535398 24  603.8645 0.0586957 0.0205592 0.0645669    0.0217200 15.118736 0.5554944  0.05      8     3#
#  [7,] 0.8479081  9 270 1.533119 24  690.8736 0.0535095 0.0200317 0.0585338    0.0211512 16.563165 0.6098329  0.05      8     3#
#  [8,] 0.8603763 10 300 1.531349 24  777.8828 0.0488928 0.0190832 0.0532195    0.0201298 17.514785 0.6441948  0.05      8     3#
#  [9,] 0.8658991 11 330 1.529935 24  864.8919 0.0468621 0.0199330 0.0508984    0.0210448 20.142001 0.7273040  0.05      8     3#
# [10,] 0.8716986 12 360 1.528779 24  951.9010 0.0447389 0.0201981 0.0484825    0.0213306 22.271505 0.7847211  0.05      8     3#
# [11,] 0.8769212 13 390 1.527818 24 1038.9101 0.0428349 0.0202974 0.0463253    0.0214377 24.248543 0.8297995  0.05      8     3#
# [12,] 0.8832193 14 420 1.527004 24 1125.9193 0.0405489 0.0197323 0.0437467    0.0208286 25.371854 0.8522495  0.05      8     3#
# [13,] 0.8865756 15 450 1.526308 24 1212.9284 0.0393351 0.0199743 0.0423826    0.0210894 27.524521 0.8882695  0.05      8     3#
es.mat <- t( sapply(1:length(n.range), function(ii){#
	esMANOVA(formula, es=effect.s[ii,"m.es.W"][[1]], n=n.range[ii], k=prod(levs), N.variables=3, TEST="Wilks", population=FALSE, Serlin=FALSE, dp=7)[effect, ]#
	})#
)#
#
# G*Power recommends#
power.settings.GPower <- list(ncp.method1="OS", ncp.method2="pop", Serlin=FALSE)#
power.e3 <- t( sapply(1:length(n.range), function(ii){#
		pMANOVA(formula, levs, N.variables=3, n=n.range[ii], power=NULL, effect, es=es.mat[ii,"es(pop)"][[1]], population=TRUE, TEST=TEST, alpha=0.05, power.settings=power.settings.GPower, dp=7, plot.graph=FALSE)#
	})#
)#
power.e3#
#
#           Wilks  n   N   F.crit df       dfe        es   es(pop)   fsqr(U) fsqr(U)(pop)       ncp     power alpha N.pred N.var#
#  [1,] 0.6260632  3  90 1.582057 24  168.8189 0.1445275 0.0208616 0.1752339    0.0220465  5.754734 0.1843972  0.05      8     3#
#  [2,] 0.7130553  4 120 1.560026 24  255.8280 0.1066100 0.0211877 0.1236779    0.0223987  7.795560 0.2594243  0.05      8     3#
#  [3,] 0.7642414  5 150 1.549181 24  342.8371 0.0857250 0.0205469 0.0971376    0.0217068  9.443450 0.3256871  0.05      8     3#
#  [4,] 0.7995210  6 180 1.542727 24  429.8462 0.0718676 0.0192446 0.0801981    0.0203035 10.599551 0.3744288  0.05      8     3#
#  [5,] 0.8188676  7 210 1.538446 24  516.8554 0.0644409 0.0202056 0.0713298    0.0213387 12.996615 0.4718199  0.05      8     3#
#  [6,] 0.8340462  8 240 1.535398 24  603.8645 0.0586957 0.0205592 0.0645670    0.0217201 15.118758 0.5554952  0.05      8     3#
#  [7,] 0.8479082  9 270 1.533119 24  690.8736 0.0535094 0.0200317 0.0585337    0.0211512 16.563128 0.6098316  0.05      8     3#
#  [8,] 0.8603761 10 300 1.531349 24  777.8828 0.0488928 0.0190832 0.0532195    0.0201299 17.514826 0.6441962  0.05      8     3#
#  [9,] 0.8658991 11 330 1.529935 24  864.8919 0.0468621 0.0199330 0.0508984    0.0210448 20.142014 0.7273044  0.05      8     3#
# [10,] 0.8716987 12 360 1.528779 24  951.9010 0.0447388 0.0201981 0.0484824    0.0213306 22.271467 0.7847202  0.05      8     3#
# [11,] 0.8769212 13 390 1.527818 24 1038.9101 0.0428349 0.0202974 0.0463253    0.0214377 24.248541 0.8297994  0.05      8     3#
# [12,] 0.8832192 14 420 1.527004 24 1125.9193 0.0405489 0.0197323 0.0437467    0.0208286 25.371890 0.8522502  0.05      8     3#
# [13,] 0.8865757 15 450 1.526308 24 1212.9284 0.0393350 0.0199743 0.0423825    0.0210893 27.524472 0.8882688  0.05      8     3#
# G*Power values using population fsqr(U)#
#
es.mat[,"fsqr(U)(pop)"]#
# [1] 0.0220465 0.0223986 0.0217068 0.0203035 0.0213386 0.0217200 0.0211512 0.0201298 0.0210448 0.0213306 0.0214377 0.0208286 0.0210894#
#
# from G*Power#
# 0.1843974 0.2594233 0.3256871#
# what are simulated population values#
# TEST="Pillai"#
out.pop <- sMANOVA(formula=formula, longdata=longdata, n=1000, cov.mat=cov.mat, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, ANOVA.effect.size=ANOVA.effect.size, #
	dist=dist, alpha=alpha, p.adjust.method=p.adjust.method, replacement=replacement, return.average=return.average, #
	raw.return=raw.return, return.p=return.p, return.perms=FALSE, CI=CI, method.CI=method.CI, N.dist=N.dist, Nreps=Nreps, seed=seed)#
#
out.pop$multivariate$`effect size`[1,]$`effect size`[effect, ] #
#
out.pop$multivariate$`p(F>Fcrit)`[1,]$uncorrected[[effect]] #
#
# n=1000 above#
#     m.es.W m.es.W.adj       m.os   m.os.adj #
# 0.02005168 0.01979028 0.05870161 0.05793811#
out.e1.pop <- eMANOVA(formula=formula, longdata=longdata, n=1000, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
		ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha, #
		power.settings=power.settings)#
#
out.e1.pop$multivariate$effect.sizes[effect, ] #
#     m.es.W m.es.W.adj       m.os   m.os.adj #
# 0.02009786 0.01983648 0.05883710 0.05807371#
out.e2.pop <- eMANOVA(formula=formula, longdata=longdata, n=1000, p=p, ar=ar, TYPE=TYPE, TEST=TEST, ANOVA=ANOVA, #
		ANOVA.effect.size=ANOVA.effect.size, show.power=TRUE, alpha=alpha, #
		power.settings=power.settings.GPower )#
#
out.e2.pop$multivariate$effect.sizes[effect, ] #
#     m.es.W m.es.W.adj       m.os   m.os.adj #
# 0.02009786 0.01983648 0.05883710 0.05807371#
#
# method differnce is for power NOT es#
plot.f <- function(x,y,main=paste(""), pop=NULL){#
	n.max <- max(x)#
	es.max <- 0.05*ceiling(20*max(y))#
	fit = spline(x, y, n = 2000, method = "natural") # c("periodic", "natural", "fmm", "hyman")#
	plot(x, y, col = "slateblue", #
		main = main,  font.main = 1, #
		cex.main = 1, bty = "n", xlab = "group sample size", #
		ylab = "effect size", xlim = c(0, 5 * ceiling(n.max/5)), #
		ylim =c(0, es.max),  tck = -0.025, las = 1, pch = 16)#
	lines(fit, col = "slateblue")#
	lines(c(min(x),max(x)), c(pop,pop), lwd = 1, col = "indianred", lty = 3)#
}#
#
dev.new(width=15 ,height=4,noRStudioGD=TRUE)#
par(mfrow=c(1,3), ps=10, cex = 0.9, cex.main = 0.9)#
par(mar = c(5, 4, 4, 4) + 0.25)#
es.pop <- out.pop$multivariate$`effect size`[1,]$`effect size`[effect, 1]#
plot.f(x=n.range,y=effect.s[,1],main=paste("simulation"), pop=es.pop)#
plot.f(x=n.range,y=power.e2[,"es"],main=paste("simulation"), pop=es.pop)#
plot.f(x=n.range,y=power.e1[,"es"], main=paste("Serlin adjusted"), pop=es.pop)#
#
effect.s[,1]#
power.e2[,"es"]#
power.e1[,"es"]#
#
# compare powers#
#
es.pop <- out.e1.pop$multivariate$effect.sizes[effect, 1] #
#
power.e3 <- t( sapply(1:length(n.range), function(ii){#
		pMANOVA(formula, levs, N.variables=3, n=n.range[ii], power=NULL, effect, es=es.pop, population=TRUE, TEST=TEST, alpha=0.05, power.settings=power.settings.GPower, dp=7, plot.graph=FALSE)#
	})#
)#
power.e3#
dev.new(width=15 ,height=4,noRStudioGD=TRUE)#
par(mfrow=c(1,3), ps=10, cex = 0.9, cex.main = 0.9)#
par(mar = c(5, 4, 4, 4) + 0.25)#
#
plot(n.range, power.s, col = "slateblue", main = NULL,  font.main = 1, #
	cex.main = 1, bty = "n", xlab = "group sample size", #
	ylab = "power", xlim = c(0, 15), #
	ylim = c(0, 1), tck = -0.025, las = 1)#
#
plot(n.range, power.e1[,"power"], col = "slateblue", main = NULL,  font.main = 1, #
	cex.main = 1, bty = "n", xlab = "group sample size", #
	ylab = "power", xlim = c(0, 15), #
	ylim = c(0, 1), tck = -0.025, las = 1)#
# G*Power#
plot(n.range, power.e3[,"power"], col = "slateblue", main = NULL,  font.main = 1, #
	cex.main = 1, bty = "n", xlab = "group sample size", #
	ylab = "power", xlim = c(0, 15), #
	ylim = c(0, 1), tck = -0.025, las = 1)#
cor(power.s,power.e1[,"power"])#
#
cor(power.s,power.e2[,"power"])#
# function to convert pop values to biased values#
#
es.pop <- out.e2.pop$multivariate$effect.sizes[effect, 1] #
#################
#
# Simple ANOVA#
#
longdata.simple <- list(mu=longdata$mu[, -c(5,6)],sd=longdata$sd[, -c(5,6)])#
n=3#
#
out.e <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="os", show.power=TRUE, alpha=alpha)#
# check with sMANOVA#
#
out.s <- sMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, ANOVA.effect.size="os", Nreps=Nreps)#
out.s$univariate$`effect size`[1,]$os$theta.hat#
out.s$univariate$`effect size`[1,]$os$theta.hat#
out.e$univariate$os#
# longdata1=longdata#
#
out.simple <- eMANOVA(formula=formula, longdata=longdata.simple, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)#
#
out.simple$effect.sizes#
out.simple.pop <- eMANOVA(formula=formula, longdata=longdata.simple, n=1e3, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)#
#
out.simple.pop$effect.sizes#
#
# eMANOVA wrong output for simple I AM HERE 26th Sep 2023
TYPE = 'II'#
Nreps=1e4#
#
out.e1 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="os", show.power=TRUE, alpha=alpha)#
longdata2 <- list(mu=longdata$mu[, -6],sd=longdata$sd[, -6])#
#
out.e2 <- eMANOVA(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="os", show.power=TRUE, alpha=alpha)#
longdata3 <- list(mu=longdata$mu[, -c(5,6)],sd=longdata$sd[, -c(5,6)])#
#
out.e3 <- eMANOVA(formula=formula, longdata=longdata3, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="os", show.power=TRUE, alpha=alpha)#
#
out.e2$multivariate$SSPH#
#
out.e1$multivariate$SSPH#
out.s1 <- sMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, ANOVA.effect.size="os", Nreps=Nreps)#
out.s2 <- sMANOVA(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, ANOVA.effect.size="os", Nreps=Nreps)#
out.s3 <- sMANOVA(formula=formula, longdata=longdata3, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, ANOVA.effect.size="os", Nreps=Nreps)#
#
out.s1$univariate$`effect size`[1,]$os$theta.hat#
out.s2$univariate$`effect size`[1,]$os$theta.hat#
out.s3$univariate$`effect size`[1,]$os#
out.e <- eMANOVA(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
out.e
TYPE = 'II'#
Nreps=1e4#
#
out.e1 <- eMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="os", show.power=TRUE, alpha=alpha)#
longdata2 <- list(mu=longdata$mu[, -6],sd=longdata$sd[, -6])#
#
out.e2 <- eMANOVA(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="os", show.power=TRUE, alpha=alpha)#
longdata3 <- list(mu=longdata$mu[, -c(5,6)],sd=longdata$sd[, -c(5,6)])#
#
out.e3 <- eMANOVA(formula=formula, longdata=longdata3, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="os", show.power=TRUE, alpha=alpha)#
#
out.e2$multivariate$SSPH#
#
out.e1$multivariate$SSPH#
out.s1 <- sMANOVA(formula=formula, longdata=longdata, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, ANOVA.effect.size="os", Nreps=Nreps)#
out.s2 <- sMANOVA(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, ANOVA.effect.size="os", Nreps=Nreps)#
out.s3 <- sMANOVA(formula=formula, longdata=longdata3, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, ANOVA.effect.size="os", Nreps=Nreps)#
#
out.s1$univariate$`effect size`[1,]$os$theta.hat#
out.s2$univariate$`effect size`[1,]$os$theta.hat#
out.s3$univariate$`effect size`[1,]$os#
out.e <- eMANOVA(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="os", show.power=TRUE, alpha=alpha)
out.e
longdata=longdata2
eMANOVA
longdata.sd <- longdata$sd#
    longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
    info <- terms(formula, "Error")#
    var <- attr(info, "variables")[[1L + 1]]#
    terms <- attr(info, "term.labels")#
    groups <- terms[attr(info, "order") == 1]#
    n.groups <- length(groups)#
    factors <- lapply(1:n.groups, function(ii) rep(longdata[, #
        groups[ii]], each = n))#
    names(factors) <- groups#
    factors <- lapply(factors, factor)#
    muij <- longdata[, -which(colnames(longdata) %in% groups)]#
    sdij <- longdata.sd[, -which(colnames(longdata.sd) %in% groups)]#
    if (dim(longdata)[2] - n.groups == 1) {#
        muij <- matrix(muij, ncol = 1)#
        sdij <- matrix(sdij, ncol = 1)#
    }
expected.MANOVA(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)
dp=6
expected.MANOVA(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)
ANOVA.effect.size
ANOVA.effect.size='all'
expected.MANOVA(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)
out.e <- eMANOVA(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
out.e
eMANOVA
longdata
expected.MANOVA(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)
out.e1
out.e <- eMANOVA(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
out.e
eMANOVA
expected.MANOVA
eMANOVA
eMANOVA.f <- #
function (formula, longdata, n, p = 0, ar = TRUE, TYPE = "II", #
    TEST = "Wilks", ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    power.settings = list(ncp.method1 = "OS", ncp.method2 = "pop", #
        Serlin = FALSE), alpha = 0.05, dp = 7) #
{#
    longdata.sd <- longdata$sd#
    longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
    info <- terms(formula, "Error")#
    var <- attr(info, "variables")[[1L + 1]]#
    terms <- attr(info, "term.labels")#
    groups <- terms[attr(info, "order") == 1]#
    n.groups <- length(groups)#
    factors <- lapply(1:n.groups, function(ii) rep(longdata[, #
        groups[ii]], each = n))#
    names(factors) <- groups#
    factors <- lapply(factors, factor)#
    muij <- longdata[, -which(colnames(longdata) %in% groups)]#
    sdij <- longdata.sd[, -which(colnames(longdata.sd) %in% groups)]#
    if (dim(longdata)[2] - n.groups == 1) {#
        muij <- matrix(muij, ncol = 1)#
        sdij <- matrix(sdij, ncol = 1)#
    }#
    expected.MANOVA(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)#
}#
expected.MANOVA.f <- #
function (model, muij, sdij, n, p, ar = FALSE, TYPE = "II", TEST = "Wilks", #
    ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    alpha = 0.05, dp = 7, power.settings = list(ncp.method1 = "MP", #
        ncp.method2 = "pop", Serlin = TRUE), factors = list(), #
    ...) #
{#
    ncp.method1 <- power.settings$ncp.method1#
    ncp.method2 <- power.settings$ncp.method2#
    Serlin <- power.settings$Serlin#
    levs <- sapply(factors, nlevels)#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    cov.list <- if (N.var == 1) #
        as.list(sdij)#
    else lapply(1:N.groups, function(iii) cov.mat.rm(sdij[iii, #
        ], p = p, ar = ar))#
    if (!exists("TEST")) #
        TEST = "all"#
    info <- terms(model)#
    terms <- attr(info, "term.labels")#
    n.terms <- length(terms)#
    fac <- attr(info, "factors")#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
    p <- nrow(b)#
    I.p <- diag(p)#
    assign <- attr(X, "assign")#
    if (TYPE == "II") {#
        hm <- lapply(1:n.terms, function(iii) {#
            hm.fun(term = terms[iii], terms, fac, assign, I.p)#
        })#
    }#
    else if (TYPE == "III") {#
        intercept = TRUE#
        hm <- lapply(2:(n.terms + 1), function(iii) {#
            subs <- which(assign == iii - intercept)#
            I.p[subs, , drop = FALSE]#
        })#
    }#
    names(hm) <- terms#
    mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
    mat[mat == 0] = 1#
    q <- apply(mat, 2, prod)#
    p <- N.var#
    k <- z.rank#
    F_tests <- list()#
    if (N.var == 1) {#
        TEST = "Wilks"#
    }#
    if (TEST == "all") {#
        F_tests <- c(F_Pillai, F_Wilks, F_Hotelling, F_Roys)#
        test.names <- c("Pillai", "Wilks", "Hotelling", "Roy's")#
    }#
    else {#
        if (TEST == "Pillai") {#
            F_tests[[1]] <- F_Pillai#
            test.names <- "Pillai"#
        }#
        else if (TEST == "Wilks") {#
            F_tests[[1]] <- F_Wilks#
            test.names <- "Wilks"#
        }#
        else if (TEST == "Hotelling") {#
            F_tests[[1]] <- F_Hotelling#
            test.names <- "Hotelling"#
        }#
        else if (TEST == "Roys") {#
            F_tests[[1]] <- F_Roys#
            test.names <- "Roy's"#
        }#
    }#
    N.tests <- length(test.names)#
    df <- apply(mat, 2, prod)#
    dfe <- N - sum(df) - 1#
    cov.mat <- Reduce("+", cov.list)/k#
    SSCP <- E.SSCP.f(Y = Y, b = b, df = df, dfe = dfe, cov.mat = cov.mat, #
        V = V, W = W, X = X, hm = hm, TYPE = TYPE, n.terms = n.terms, #
        terms = terms)#
    SSPH <- SSCP$SSPH#
    SSPE <- SSCP$SSPE#
    if (!is.matrix(SSPE)) #
        SSPE <- matrix(SSPE)#
    test.stats <- t(sapply(1:n.terms, function(iii) {#
        test.statistics(H = SSPH[[iii]], E = SSPE)#
    }))#
    colnames(test.stats) = c("Pillai", "Wilks", "Hotelling", #
        "Roy's")#
    rownames(test.stats) = terms#
    if (!TEST == "all") {#
        test.stats <- matrix(test.stats[, test.names], ncol = 1)#
    }#
    summary <- MANOVA.summary(test.stats = test.stats, N.tests = N.tests, #
        terms = terms, F_tests = F_tests, N = N, k = k, p = p, #
        q = q, alpha = alpha, ncp.method1 = ncp.method1, ncp.method2 = ncp.method2, #
        Serlin = Serlin)#
    if (!show.power) #
        summary <- lapply(1:length(summary), function(iii) summary[[iii]][, #
            !colnames(summary[[iii]]) %in% c("ncp", "Power")])#
    names(summary) <- test.names#
    if (N.var == 1) {#
        summary <- if (length(factors) == 1) #
            summary$Wilks[!names(summary$Wilks) %in% c("test.stat", #
                "df", "dfe", "es")]#
        else summary$Wilks[, !colnames(summary$Wilks) %in% c("test.stat", #
            "df", "dfe", "es")]#
        SS <- do.call(c, SSPH)#
        SSe <- SSPE#
        dfe <- N - k#
        F <- if (length(factors) == 1) #
            summary[["F"]]#
        else summary[, "F"]#
        if (show.power) {#
            ncp <- df * (F - 1)#
            ncp[ncp < 0] = 0#
            power <- pf(qf((1 - alpha), df, dfe), df, dfe, ncp = ncp, #
                lower = FALSE)#
            SS.table <- cbind(df, SS, F, ncp, power)#
        }#
        else {#
            SS.table <- cbind(df, SS, F)#
        }#
        SS.table <- round.f(SS.table, digits = dp)#
        error <- round.f(c(df = dfe, SS = SSe), digits = dp)#
        effect.sizes <- ANOVA.effect.sizes(F = F, N = N, df.mat = df, #
            dfe = dfe, k = k, n.terms = n.terms, N.var = N.var, #
            ANOVA.effect.size = ANOVA.effect.size)#
        if (ANOVA.effect.size == "all") {#
            effect.sizes <- round.f(do.call(cbind, effect.sizes), #
                digits = dp)#
            return(list(ANOVA = SS.table, error = error, effect.sizes = effect.sizes))#
        }#
        else {#
            effect.sizes <- round.f(effect.sizes, digits = dp)#
            SS.table <- cbind(SS.table, effect.sizes)#
            colnames(SS.table)[length(colnames(SS.table))] = eval(parse(text = "ANOVA.effect.size"))#
            return(list(ANOVA = SS.table, error = error))#
        }#
    }#
    MANOVA.eff.sizes <- MANOVA.effect.sizes.summary(SSPH = SSPH, #
        SSPE = SSPE, N = N, p = p, q = q, TEST = TEST)#
    rownames(MANOVA.eff.sizes) <- terms#
    if (!TEST == "all") {#
        output <- list(round.f(summary[[1]], digits = dp), round.f(MANOVA.eff.sizes, #
            digits = dp))#
        names(output) <- c(eval(parse(text = "TEST")), "effect.sizes")#
    }#
    else {#
        summary <- lapply(summary, round.f, digits = dp)#
        output <- list(tests = summary, effect.sizes = round.f(MANOVA.eff.sizes, #
            digits = dp))#
    }#
    SSPH <- lapply(SSPH, round.f, digits = dp)#
    SSPE <- round.f(SSPE, digits = dp)#
    output <- c(output, list(SSPH = SSPH, SSPE = SSPE))#
    if (ANOVA) {#
        summary2 <- ANOVA.summary(SSPH = SSPH, SSPE = SSPE, N = N, #
            df = df, dfe = dfe, k = k, terms = terms, n.terms = n.terms, #
            N.var = N.var, ANOVA.effect.size = ANOVA.effect.size, #
            show.power = show.power, alpha = alpha)#
#        summary2 <- if (ANOVA.effect.size != "all") #
#            lapply(summary2, round.f, digits = dp)#
#        else c(lapply(summary2[1:3], round.f, digits = dp), effect.sizes = lapply(summary2[[4]], #
#            round.f, digits = dp))#
        output <- list(multivariate = output, univariate = summary2)#
    }#
    return(output)#
}
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
out.e
expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)
model.matrix.f <- ANOVA.boot:::model.matrix.f
expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)
round.f <- ANOVA.boot:::round.f
expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
oiut.e
out.e
eMANOVA
expected.MANOVA
longdata.sd <- longdata$sd#
    longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
    info <- terms(formula, "Error")#
    var <- attr(info, "variables")[[1L + 1]]#
    terms <- attr(info, "term.labels")#
    groups <- terms[attr(info, "order") == 1]#
    n.groups <- length(groups)#
    factors <- lapply(1:n.groups, function(ii) rep(longdata[, #
        groups[ii]], each = n))#
    names(factors) <- groups#
    factors <- lapply(factors, factor)#
    muij <- longdata[, -which(colnames(longdata) %in% groups)]#
    sdij <- longdata.sd[, -which(colnames(longdata.sd) %in% groups)]#
    if (dim(longdata)[2] - n.groups == 1) {#
        muij <- matrix(muij, ncol = 1)#
        sdij <- matrix(sdij, ncol = 1)#
    }#
    output <- expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)
longdata=longdata2
longdata.sd <- longdata$sd#
    longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
    info <- terms(formula, "Error")#
    var <- attr(info, "variables")[[1L + 1]]#
    terms <- attr(info, "term.labels")#
    groups <- terms[attr(info, "order") == 1]#
    n.groups <- length(groups)#
    factors <- lapply(1:n.groups, function(ii) rep(longdata[, #
        groups[ii]], each = n))#
    names(factors) <- groups#
    factors <- lapply(factors, factor)#
    muij <- longdata[, -which(colnames(longdata) %in% groups)]#
    sdij <- longdata.sd[, -which(colnames(longdata.sd) %in% groups)]#
    if (dim(longdata)[2] - n.groups == 1) {#
        muij <- matrix(muij, ncol = 1)#
        sdij <- matrix(sdij, ncol = 1)#
    }#
    output <- expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)
output
eMANOVA.f <- #
function (formula, longdata, n, p = 0, ar = TRUE, TYPE = "II", #
    TEST = "Wilks", ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    power.settings = list(ncp.method1 = "OS", ncp.method2 = "pop", #
        Serlin = FALSE), alpha = 0.05, dp = 7) #
{#
    longdata.sd <- longdata$sd#
    longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
    info <- terms(formula, "Error")#
    var <- attr(info, "variables")[[1L + 1]]#
    terms <- attr(info, "term.labels")#
    groups <- terms[attr(info, "order") == 1]#
    n.groups <- length(groups)#
    factors <- lapply(1:n.groups, function(ii) rep(longdata[, #
        groups[ii]], each = n))#
    names(factors) <- groups#
    factors <- lapply(factors, factor)#
    muij <- longdata[, -which(colnames(longdata) %in% groups)]#
    sdij <- longdata.sd[, -which(colnames(longdata.sd) %in% groups)]#
    if (dim(longdata)[2] - n.groups == 1) {#
        muij <- matrix(muij, ncol = 1)#
        sdij <- matrix(sdij, ncol = 1)#
    }#
    output <- expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)#
    return(output)#
}#
expected.MANOVA.f <- #
function (model, muij, sdij, n, p, ar = FALSE, TYPE = "II", TEST = "Wilks", #
    ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    alpha = 0.05, dp = 7, power.settings = list(ncp.method1 = "MP", #
        ncp.method2 = "pop", Serlin = TRUE), factors = list(), #
    ...) #
{#
    ncp.method1 <- power.settings$ncp.method1#
    ncp.method2 <- power.settings$ncp.method2#
    Serlin <- power.settings$Serlin#
    levs <- sapply(factors, nlevels)#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    cov.list <- if (N.var == 1) #
        as.list(sdij)#
    else lapply(1:N.groups, function(iii) cov.mat.rm(sdij[iii, #
        ], p = p, ar = ar))#
    if (!exists("TEST")) #
        TEST = "all"#
    info <- terms(model)#
    terms <- attr(info, "term.labels")#
    n.terms <- length(terms)#
    fac <- attr(info, "factors")#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
    p <- nrow(b)#
    I.p <- diag(p)#
    assign <- attr(X, "assign")#
    if (TYPE == "II") {#
        hm <- lapply(1:n.terms, function(iii) {#
            hm.fun(term = terms[iii], terms, fac, assign, I.p)#
        })#
    }#
    else if (TYPE == "III") {#
        intercept = TRUE#
        hm <- lapply(2:(n.terms + 1), function(iii) {#
            subs <- which(assign == iii - intercept)#
            I.p[subs, , drop = FALSE]#
        })#
    }#
    names(hm) <- terms#
    mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
    mat[mat == 0] = 1#
    q <- apply(mat, 2, prod)#
    p <- N.var#
    k <- z.rank#
    F_tests <- list()#
    if (N.var == 1) {#
        TEST = "Wilks"#
    }#
    if (TEST == "all") {#
        F_tests <- c(F_Pillai, F_Wilks, F_Hotelling, F_Roys)#
        test.names <- c("Pillai", "Wilks", "Hotelling", "Roy's")#
    }#
    else {#
        if (TEST == "Pillai") {#
            F_tests[[1]] <- F_Pillai#
            test.names <- "Pillai"#
        }#
        else if (TEST == "Wilks") {#
            F_tests[[1]] <- F_Wilks#
            test.names <- "Wilks"#
        }#
        else if (TEST == "Hotelling") {#
            F_tests[[1]] <- F_Hotelling#
            test.names <- "Hotelling"#
        }#
        else if (TEST == "Roys") {#
            F_tests[[1]] <- F_Roys#
            test.names <- "Roy's"#
        }#
    }#
    N.tests <- length(test.names)#
    df <- apply(mat, 2, prod)#
    dfe <- N - sum(df) - 1#
    cov.mat <- Reduce("+", cov.list)/k#
    SSCP <- E.SSCP.f(Y = Y, b = b, df = df, dfe = dfe, cov.mat = cov.mat, #
        V = V, W = W, X = X, hm = hm, TYPE = TYPE, n.terms = n.terms, #
        terms = terms)#
    SSPH <- SSCP$SSPH#
    SSPE <- SSCP$SSPE#
    if (!is.matrix(SSPE)) #
        SSPE <- matrix(SSPE)#
    test.stats <- t(sapply(1:n.terms, function(iii) {#
        test.statistics(H = SSPH[[iii]], E = SSPE)#
    }))#
    colnames(test.stats) = c("Pillai", "Wilks", "Hotelling", #
        "Roy's")#
    rownames(test.stats) = terms#
    if (!TEST == "all") {#
        test.stats <- matrix(test.stats[, test.names], ncol = 1)#
    }#
    summary <- MANOVA.summary(test.stats = test.stats, N.tests = N.tests, #
        terms = terms, F_tests = F_tests, N = N, k = k, p = p, #
        q = q, alpha = alpha, ncp.method1 = ncp.method1, ncp.method2 = ncp.method2, #
        Serlin = Serlin)#
    if (!show.power) #
        summary <- lapply(1:length(summary), function(iii) summary[[iii]][, #
            !colnames(summary[[iii]]) %in% c("ncp", "Power")])#
    names(summary) <- test.names#
    if (N.var == 1) {#
        summary <- if (length(factors) == 1) #
            summary$Wilks[!names(summary$Wilks) %in% c("test.stat", #
                "df", "dfe", "es")]#
        else summary$Wilks[, !colnames(summary$Wilks) %in% c("test.stat", #
            "df", "dfe", "es")]#
        SS <- do.call(c, SSPH)#
        SSe <- SSPE#
        dfe <- N - k#
        F <- if (length(factors) == 1) #
            summary[["F"]]#
        else summary[, "F"]#
        if (show.power) {#
            ncp <- df * (F - 1)#
            ncp[ncp < 0] = 0#
            power <- pf(qf((1 - alpha), df, dfe), df, dfe, ncp = ncp, #
                lower = FALSE)#
            SS.table <- cbind(df, SS, F, ncp, power)#
        }#
        else {#
            SS.table <- cbind(df, SS, F)#
        }#
        SS.table <- round.f(SS.table, digits = dp)#
        error <- round.f(c(df = dfe, SS = SSe), digits = dp)#
        effect.sizes <- ANOVA.effect.sizes(F = F, N = N, df.mat = df, #
            dfe = dfe, k = k, n.terms = n.terms, N.var = N.var, #
            ANOVA.effect.size = ANOVA.effect.size)#
        if (ANOVA.effect.size == "all") {#
            effect.sizes <- round.f(do.call(cbind, effect.sizes), #
                digits = dp)#
            return(list(ANOVA = SS.table, error = error, effect.sizes = effect.sizes))#
        }#
        else {#
            effect.sizes <- round.f(effect.sizes, digits = dp)#
            SS.table <- cbind(SS.table, effect.sizes)#
            colnames(SS.table)[length(colnames(SS.table))] = eval(parse(text = "ANOVA.effect.size"))#
            return(list(ANOVA = SS.table, error = error))#
        }#
    }#
    MANOVA.eff.sizes <- MANOVA.effect.sizes.summary(SSPH = SSPH, #
        SSPE = SSPE, N = N, p = p, q = q, TEST = TEST)#
    rownames(MANOVA.eff.sizes) <- terms#
    if (!TEST == "all") {#
        output <- list(round.f(summary[[1]], digits = dp), round.f(MANOVA.eff.sizes, #
            digits = dp))#
        names(output) <- c(eval(parse(text = "TEST")), "effect.sizes")#
    }#
    else {#
        summary <- lapply(summary, round.f, digits = dp)#
        output <- list(tests = summary, effect.sizes = round.f(MANOVA.eff.sizes, #
            digits = dp))#
    }#
    SSPH <- lapply(SSPH, round.f, digits = dp)#
    SSPE <- round.f(SSPE, digits = dp)#
    output <- c(output, list(SSPH = SSPH, SSPE = SSPE))#
    if (ANOVA) {#
        summary2 <- ANOVA.summary(SSPH = SSPH, SSPE = SSPE, N = N, #
            df = df, dfe = dfe, k = k, terms = terms, n.terms = n.terms, #
            N.var = N.var, ANOVA.effect.size = ANOVA.effect.size, #
            show.power = show.power, alpha = alpha)#
        summary2 <- if (ANOVA.effect.size != "all") #
            lapply(summary2, round.f, digits = dp)#
        else c(lapply(summary2[1:3], round.f, digits = dp), effect.sizes = lapply(summary2[[4]], #
            round.f, digits = dp))#
        output <- list(multivariate = output, univariate = summary2)#
    }#
    return(output)#
}
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
out.e
ANOVA.summary
round.f
model=formula
ncp.method1 <- power.settings$ncp.method1#
    ncp.method2 <- power.settings$ncp.method2#
    Serlin <- power.settings$Serlin#
    levs <- sapply(factors, nlevels)#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    cov.list <- if (N.var == 1) #
        as.list(sdij)#
    else lapply(1:N.groups, function(iii) cov.mat.rm(sdij[iii, #
        ], p = p, ar = ar))#
    if (!exists("TEST")) #
        TEST = "all"#
    info <- terms(model)#
    terms <- attr(info, "term.labels")#
    n.terms <- length(terms)#
    fac <- attr(info, "factors")#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
    p <- nrow(b)#
    I.p <- diag(p)#
    assign <- attr(X, "assign")#
    if (TYPE == "II") {#
        hm <- lapply(1:n.terms, function(iii) {#
            hm.fun(term = terms[iii], terms, fac, assign, I.p)#
        })#
    }#
    else if (TYPE == "III") {#
        intercept = TRUE#
        hm <- lapply(2:(n.terms + 1), function(iii) {#
            subs <- which(assign == iii - intercept)#
            I.p[subs, , drop = FALSE]#
        })#
    }#
    names(hm) <- terms#
    mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
    mat[mat == 0] = 1#
    q <- apply(mat, 2, prod)#
    p <- N.var#
    k <- z.rank#
    F_tests <- list()#
    if (N.var == 1) {#
        TEST = "Wilks"#
    }#
    if (TEST == "all") {#
        F_tests <- c(F_Pillai, F_Wilks, F_Hotelling, F_Roys)#
        test.names <- c("Pillai", "Wilks", "Hotelling", "Roy's")#
    }#
    else {#
        if (TEST == "Pillai") {#
            F_tests[[1]] <- F_Pillai#
            test.names <- "Pillai"#
        }#
        else if (TEST == "Wilks") {#
            F_tests[[1]] <- F_Wilks#
            test.names <- "Wilks"#
        }#
        else if (TEST == "Hotelling") {#
            F_tests[[1]] <- F_Hotelling#
            test.names <- "Hotelling"#
        }#
        else if (TEST == "Roys") {#
            F_tests[[1]] <- F_Roys#
            test.names <- "Roy's"#
        }#
    }#
    N.tests <- length(test.names)#
    df <- apply(mat, 2, prod)#
    dfe <- N - sum(df) - 1#
    cov.mat <- Reduce("+", cov.list)/k#
    SSCP <- E.SSCP.f(Y = Y, b = b, df = df, dfe = dfe, cov.mat = cov.mat, #
        V = V, W = W, X = X, hm = hm, TYPE = TYPE, n.terms = n.terms, #
        terms = terms)#
    SSPH <- SSCP$SSPH#
    SSPE <- SSCP$SSPE#
    if (!is.matrix(SSPE)) #
        SSPE <- matrix(SSPE)#
    test.stats <- t(sapply(1:n.terms, function(iii) {#
        test.statistics(H = SSPH[[iii]], E = SSPE)#
    }))#
    colnames(test.stats) = c("Pillai", "Wilks", "Hotelling", #
        "Roy's")#
    rownames(test.stats) = terms#
    if (!TEST == "all") {#
        test.stats <- matrix(test.stats[, test.names], ncol = 1)#
    }#
    summary <- MANOVA.summary(test.stats = test.stats, N.tests = N.tests, #
        terms = terms, F_tests = F_tests, N = N, k = k, p = p, #
        q = q, alpha = alpha, ncp.method1 = ncp.method1, ncp.method2 = ncp.method2, #
        Serlin = Serlin)#
    if (!show.power) #
        summary <- lapply(1:length(summary), function(iii) summary[[iii]][, #
            !colnames(summary[[iii]]) %in% c("ncp", "Power")])#
    names(summary) <- test.names#
    if (N.var == 1) {#
        summary <- if (length(factors) == 1) #
            summary$Wilks[!names(summary$Wilks) %in% c("test.stat", #
                "df", "dfe", "es")]#
        else summary$Wilks[, !colnames(summary$Wilks) %in% c("test.stat", #
            "df", "dfe", "es")]#
        SS <- do.call(c, SSPH)#
        SSe <- SSPE#
        dfe <- N - k#
        F <- if (length(factors) == 1) #
            summary[["F"]]#
        else summary[, "F"]#
        if (show.power) {#
            ncp <- df * (F - 1)#
            ncp[ncp < 0] = 0#
            power <- pf(qf((1 - alpha), df, dfe), df, dfe, ncp = ncp, #
                lower = FALSE)#
            SS.table <- cbind(df, SS, F, ncp, power)#
        }#
        else {#
            SS.table <- cbind(df, SS, F)#
        }#
        SS.table <- round.f(SS.table, digits = dp)#
        error <- round.f(c(df = dfe, SS = SSe), digits = dp)#
        effect.sizes <- ANOVA.effect.sizes(F = F, N = N, df.mat = df, #
            dfe = dfe, k = k, n.terms = n.terms, N.var = N.var, #
            ANOVA.effect.size = ANOVA.effect.size)#
        if (ANOVA.effect.size == "all") {#
            effect.sizes <- round.f(do.call(cbind, effect.sizes), #
                digits = dp)#
            return(list(ANOVA = SS.table, error = error, effect.sizes = effect.sizes))#
        }#
        else {#
            effect.sizes <- round.f(effect.sizes, digits = dp)#
            SS.table <- cbind(SS.table, effect.sizes)#
            colnames(SS.table)[length(colnames(SS.table))] = eval(parse(text = "ANOVA.effect.size"))#
            return(list(ANOVA = SS.table, error = error))#
        }#
    }#
    MANOVA.eff.sizes <- MANOVA.effect.sizes.summary(SSPH = SSPH, #
        SSPE = SSPE, N = N, p = p, q = q, TEST = TEST)#
    rownames(MANOVA.eff.sizes) <- terms
ncp.method1 <- power.settings$ncp.method1#
    ncp.method2 <- power.settings$ncp.method2#
    Serlin <- power.settings$Serlin#
    levs <- sapply(factors, nlevels)#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    cov.list <- if (N.var == 1) #
        as.list(sdij)#
    else lapply(1:N.groups, function(iii) cov.mat.rm(sdij[iii, #
        ], p = p, ar = ar))#
    if (!exists("TEST")) #
        TEST = "all"#
    info <- terms(model)#
    terms <- attr(info, "term.labels")#
    n.terms <- length(terms)#
    fac <- attr(info, "factors")#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
    p <- nrow(b)#
    I.p <- diag(p)#
    assign <- attr(X, "assign")#
    if (TYPE == "II") {#
        hm <- lapply(1:n.terms, function(iii) {#
            hm.fun(term = terms[iii], terms, fac, assign, I.p)#
        })#
    }else if (TYPE == "III") {#
        intercept = TRUE#
        hm <- lapply(2:(n.terms + 1), function(iii) {#
            subs <- which(assign == iii - intercept)#
            I.p[subs, , drop = FALSE]#
        })#
    }#
    names(hm) <- terms#
    mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
    mat[mat == 0] = 1#
    q <- apply(mat, 2, prod)#
    p <- N.var#
    k <- z.rank#
    F_tests <- list()#
    if (N.var == 1) {#
        TEST = "Wilks"#
    }#
    if (TEST == "all") {#
        F_tests <- c(F_Pillai, F_Wilks, F_Hotelling, F_Roys)#
        test.names <- c("Pillai", "Wilks", "Hotelling", "Roy's")#
    }else {#
        if (TEST == "Pillai") {#
            F_tests[[1]] <- F_Pillai#
            test.names <- "Pillai"#
        }#
        else if (TEST == "Wilks") {#
            F_tests[[1]] <- F_Wilks#
            test.names <- "Wilks"#
        }#
        else if (TEST == "Hotelling") {#
            F_tests[[1]] <- F_Hotelling#
            test.names <- "Hotelling"#
        }#
        else if (TEST == "Roys") {#
            F_tests[[1]] <- F_Roys#
            test.names <- "Roy's"#
        }#
    }
ncp.method1 <- power.settings$ncp.method1#
    ncp.method2 <- power.settings$ncp.method2#
    Serlin <- power.settings$Serlin#
    levs <- sapply(factors, nlevels)#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    cov.list <- if (N.var == 1) as.list(sdij) else lapply(1:N.groups, function(iii) cov.mat.rm(sdij[iii, ], p = p, ar = ar))#
    if (!exists("TEST")) #
        TEST = "all"#
    info <- terms(model)#
    terms <- attr(info, "term.labels")#
    n.terms <- length(terms)#
    fac <- attr(info, "factors")#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
    p <- nrow(b)#
    I.p <- diag(p)#
    assign <- attr(X, "assign")#
    if (TYPE == "II") {#
        hm <- lapply(1:n.terms, function(iii) {#
            hm.fun(term = terms[iii], terms, fac, assign, I.p)#
        })#
    }else if (TYPE == "III") {#
        intercept = TRUE#
        hm <- lapply(2:(n.terms + 1), function(iii) {#
            subs <- which(assign == iii - intercept)#
            I.p[subs, , drop = FALSE]#
        })#
    }#
    names(hm) <- terms#
    mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
    mat[mat == 0] = 1#
    q <- apply(mat, 2, prod)#
    p <- N.var#
    k <- z.rank#
    F_tests <- list()#
    if (N.var == 1) {#
        TEST = "Wilks"#
    }#
    if (TEST == "all") {#
        F_tests <- c(F_Pillai, F_Wilks, F_Hotelling, F_Roys)#
        test.names <- c("Pillai", "Wilks", "Hotelling", "Roy's")#
    }else {#
        if (TEST == "Pillai") {#
            F_tests[[1]] <- F_Pillai#
            test.names <- "Pillai"#
        }#
        else if (TEST == "Wilks") {#
            F_tests[[1]] <- F_Wilks#
            test.names <- "Wilks"#
        }#
        else if (TEST == "Hotelling") {#
            F_tests[[1]] <- F_Hotelling#
            test.names <- "Hotelling"#
        }#
        else if (TEST == "Roys") {#
            F_tests[[1]] <- F_Roys#
            test.names <- "Roy's"#
        }#
    }#
    N.tests <- length(test.names)#
    df <- apply(mat, 2, prod)#
    dfe <- N - sum(df) - 1#
    cov.mat <- Reduce("+", cov.list)/k#
    SSCP <- E.SSCP.f(Y = Y, b = b, df = df, dfe = dfe, cov.mat = cov.mat, #
        V = V, W = W, X = X, hm = hm, TYPE = TYPE, n.terms = n.terms, #
        terms = terms)#
    SSPH <- SSCP$SSPH#
    SSPE <- SSCP$SSPE#
    if (!is.matrix(SSPE)) #
        SSPE <- matrix(SSPE)#
    test.stats <- t(sapply(1:n.terms, function(iii) {#
        test.statistics(H = SSPH[[iii]], E = SSPE)#
    }))#
    colnames(test.stats) = c("Pillai", "Wilks", "Hotelling", #
        "Roy's")#
    rownames(test.stats) = terms#
    if (!TEST == "all") {#
        test.stats <- matrix(test.stats[, test.names], ncol = 1)#
    }#
    summary <- MANOVA.summary(test.stats = test.stats, N.tests = N.tests, #
        terms = terms, F_tests = F_tests, N = N, k = k, p = p, #
        q = q, alpha = alpha, ncp.method1 = ncp.method1, ncp.method2 = ncp.method2, #
        Serlin = Serlin)#
    if (!show.power) #
        summary <- lapply(1:length(summary), function(iii) summary[[iii]][, #
            !colnames(summary[[iii]]) %in% c("ncp", "Power")])#
    names(summary) <- test.names#
    if (N.var == 1) {#
        summary <- if (length(factors) == 1) #
            summary$Wilks[!names(summary$Wilks) %in% c("test.stat", #
                "df", "dfe", "es")]#
        else summary$Wilks[, !colnames(summary$Wilks) %in% c("test.stat", #
            "df", "dfe", "es")]#
        SS <- do.call(c, SSPH)#
        SSe <- SSPE#
        dfe <- N - k#
        F <- if (length(factors) == 1) #
            summary[["F"]]#
        else summary[, "F"]#
        if (show.power) {#
            ncp <- df * (F - 1)#
            ncp[ncp < 0] = 0#
            power <- pf(qf((1 - alpha), df, dfe), df, dfe, ncp = ncp, #
                lower = FALSE)#
            SS.table <- cbind(df, SS, F, ncp, power)#
        }else {#
            SS.table <- cbind(df, SS, F)#
        }#
        SS.table <- round.f(SS.table, digits = dp)#
        error <- round.f(c(df = dfe, SS = SSe), digits = dp)#
        effect.sizes <- ANOVA.effect.sizes(F = F, N = N, df.mat = df, #
            dfe = dfe, k = k, n.terms = n.terms, N.var = N.var, #
            ANOVA.effect.size = ANOVA.effect.size)#
        if (ANOVA.effect.size == "all") {#
            effect.sizes <- round.f(do.call(cbind, effect.sizes), #
                digits = dp)#
            return(list(ANOVA = SS.table, error = error, effect.sizes = effect.sizes))#
        }else {#
            effect.sizes <- round.f(effect.sizes, digits = dp)#
            SS.table <- cbind(SS.table, effect.sizes)#
            colnames(SS.table)[length(colnames(SS.table))] = eval(parse(text = "ANOVA.effect.size"))#
            return(list(ANOVA = SS.table, error = error))#
        }#
    }#
    MANOVA.eff.sizes <- MANOVA.effect.sizes.summary(SSPH = SSPH, #
        SSPE = SSPE, N = N, p = p, q = q, TEST = TEST)#
    rownames(MANOVA.eff.sizes) <- terms#
    if (!TEST == "all") {#
        output <- list(round.f(summary[[1]], digits = dp), round.f(MANOVA.eff.sizes, #
            digits = dp))#
        names(output) <- c(eval(parse(text = "TEST")), "effect.sizes")#
    }#
    else {#
        summary <- lapply(summary, round.f, digits = dp)#
        output <- list(tests = summary, effect.sizes = round.f(MANOVA.eff.sizes, #
            digits = dp))#
    }#
    SSPH <- lapply(SSPH, round.f, digits = dp)#
    SSPE <- round.f(SSPE, digits = dp)#
    output <- c(output, list(SSPH = SSPH, SSPE = SSPE))
MANOVA.eff.sizes <- MANOVA.effect.sizes.summary(SSPH = SSPH, #
        SSPE = SSPE, N = N, p = p, q = q, TEST = TEST)#
    rownames(MANOVA.eff.sizes) <- terms#
    if (!TEST == "all") {#
        output <- list(round.f(summary[[1]], digits = dp), round.f(MANOVA.eff.sizes, #
            digits = dp))#
        names(output) <- c(eval(parse(text = "TEST")), "effect.sizes")#
    }else {#
        summary <- lapply(summary, round.f, digits = dp)#
        output <- list(tests = summary, effect.sizes = round.f(MANOVA.eff.sizes, #
            digits = dp))#
    }#
    SSPH <- lapply(SSPH, round.f, digits = dp)#
    SSPE <- round.f(SSPE, digits = dp)#
    output <- c(output, list(SSPH = SSPH, SSPE = SSPE))
summary2 <- ANOVA.summary(SSPH = SSPH, SSPE = SSPE, N = N, #
            df = df, dfe = dfe, k = k, terms = terms, n.terms = n.terms, #
            N.var = N.var, ANOVA.effect.size = ANOVA.effect.size, #
            show.power = show.power, alpha = alpha)
summary
summary2
round.f(summary2$effect.sizes,dp)
summary2$effect.sizes
round.f(summary2[[2]],dp)
round.f(summary2[[4]],dp)
round.f(summary2[4],dp)
lapply(summary2[[4]], #
            round.f, digits = dp)
c(lapply(summary2[1:3], round.f, digits = dp), effect.sizes = lapply(summary2[[4]], #
            round.f, digits = dp))
ANOVA.summary
ANOVA.effect.sizes
eval(parse(text = "ANOVA.effect.size"))
expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)
eMANOVA(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
ANOVA.effect.size
ANOVA.effect.sizes
libbrary(ANOVA.boot)
library(ANOVA.boot)
ANOVA.effect.sizes
ANOVA.effect.size
eMANOVA.f <- #
function (formula, longdata, n, p = 0, ar = TRUE, TYPE = "II", #
    TEST = "Wilks", ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    power.settings = list(ncp.method1 = "OS", ncp.method2 = "pop", #
        Serlin = FALSE), alpha = 0.05, dp = 7) #
{#
    longdata.sd <- longdata$sd#
    longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
    info <- terms(formula, "Error")#
    var <- attr(info, "variables")[[1L + 1]]#
    terms <- attr(info, "term.labels")#
    groups <- terms[attr(info, "order") == 1]#
    n.groups <- length(groups)#
    factors <- lapply(1:n.groups, function(ii) rep(longdata[, #
        groups[ii]], each = n))#
    names(factors) <- groups#
    factors <- lapply(factors, factor)#
    muij <- longdata[, -which(colnames(longdata) %in% groups)]#
    sdij <- longdata.sd[, -which(colnames(longdata.sd) %in% groups)]#
    if (dim(longdata)[2] - n.groups == 1) {#
        muij <- matrix(muij, ncol = 1)#
        sdij <- matrix(sdij, ncol = 1)#
    }#
    output <- expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)#
    print(output)#
    return(output)#
}
out.e <- eMANOVA(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
eMANOVA.f <- #
function (formula, longdata, n, p = 0, ar = TRUE, TYPE = "II", #
    TEST = "Wilks", ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    power.settings = list(ncp.method1 = "OS", ncp.method2 = "pop", #
        Serlin = FALSE), alpha = 0.05, dp = 7) #
{#
    longdata.sd <- longdata$sd#
    longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
    info <- terms(formula, "Error")#
    var <- attr(info, "variables")[[1L + 1]]#
    terms <- attr(info, "term.labels")#
    groups <- terms[attr(info, "order") == 1]#
    n.groups <- length(groups)#
    factors <- lapply(1:n.groups, function(ii) rep(longdata[, #
        groups[ii]], each = n))#
    names(factors) <- groups#
    factors <- lapply(factors, factor)#
    muij <- longdata[, -which(colnames(longdata) %in% groups)]#
    sdij <- longdata.sd[, -which(colnames(longdata.sd) %in% groups)]#
    if (dim(longdata)[2] - n.groups == 1) {#
        muij <- matrix(muij, ncol = 1)#
        sdij <- matrix(sdij, ncol = 1)#
    }#
    output <- expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)#
    print(output)#
    return(output)#
}
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
eMANOVA.f <- #
function (formula, longdata, n, p = 0, ar = TRUE, TYPE = "II", #
    TEST = "Wilks", ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    power.settings = list(ncp.method1 = "OS", ncp.method2 = "pop", #
        Serlin = FALSE), alpha = 0.05, dp = 7) #
{#
    longdata.sd <- longdata$sd#
    longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
    info <- terms(formula, "Error")#
    var <- attr(info, "variables")[[1L + 1]]#
    terms <- attr(info, "term.labels")#
    groups <- terms[attr(info, "order") == 1]#
    n.groups <- length(groups)#
    factors <- lapply(1:n.groups, function(ii) rep(longdata[, #
        groups[ii]], each = n))#
    names(factors) <- groups#
    factors <- lapply(factors, factor)#
    muij <- longdata[, -which(colnames(longdata) %in% groups)]#
    sdij <- longdata.sd[, -which(colnames(longdata.sd) %in% groups)]#
    if (dim(longdata)[2] - n.groups == 1) {#
        muij <- matrix(muij, ncol = 1)#
        sdij <- matrix(sdij, ncol = 1)#
    }#
    output <- expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)#
    return(output)#
}#
expected.MANOVA.f <- #
function (model, muij, sdij, n, p, ar = FALSE, TYPE = "II", TEST = "Wilks", #
    ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    alpha = 0.05, dp = 7, power.settings = list(ncp.method1 = "MP", #
        ncp.method2 = "pop", Serlin = TRUE), factors = list(), #
    ...) #
{#
    ncp.method1 <- power.settings$ncp.method1#
    ncp.method2 <- power.settings$ncp.method2#
    Serlin <- power.settings$Serlin#
    levs <- sapply(factors, nlevels)#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    cov.list <- if (N.var == 1) as.list(sdij) else lapply(1:N.groups, function(iii) cov.mat.rm(sdij[iii, ], p = p, ar = ar))#
    if (!exists("TEST")) #
        TEST = "all"#
    info <- terms(model)#
    terms <- attr(info, "term.labels")#
    n.terms <- length(terms)#
    fac <- attr(info, "factors")#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
    p <- nrow(b)#
    I.p <- diag(p)#
    assign <- attr(X, "assign")#
    if (TYPE == "II") {#
        hm <- lapply(1:n.terms, function(iii) {#
            hm.fun(term = terms[iii], terms, fac, assign, I.p)#
        })#
    }else if (TYPE == "III") {#
        intercept = TRUE#
        hm <- lapply(2:(n.terms + 1), function(iii) {#
            subs <- which(assign == iii - intercept)#
            I.p[subs, , drop = FALSE]#
        })#
    }#
    names(hm) <- terms#
    mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
    mat[mat == 0] = 1#
    q <- apply(mat, 2, prod)#
    p <- N.var#
    k <- z.rank#
    F_tests <- list()#
    if (N.var == 1) {#
        TEST = "Wilks"#
    }#
    if (TEST == "all") {#
        F_tests <- c(F_Pillai, F_Wilks, F_Hotelling, F_Roys)#
        test.names <- c("Pillai", "Wilks", "Hotelling", "Roy's")#
    }else {#
        if (TEST == "Pillai") {#
            F_tests[[1]] <- F_Pillai#
            test.names <- "Pillai"#
        }#
        else if (TEST == "Wilks") {#
            F_tests[[1]] <- F_Wilks#
            test.names <- "Wilks"#
        }#
        else if (TEST == "Hotelling") {#
            F_tests[[1]] <- F_Hotelling#
            test.names <- "Hotelling"#
        }#
        else if (TEST == "Roys") {#
            F_tests[[1]] <- F_Roys#
            test.names <- "Roy's"#
        }#
    }#
    N.tests <- length(test.names)#
    df <- apply(mat, 2, prod)#
    dfe <- N - sum(df) - 1#
    cov.mat <- Reduce("+", cov.list)/k#
    SSCP <- E.SSCP.f(Y = Y, b = b, df = df, dfe = dfe, cov.mat = cov.mat, #
        V = V, W = W, X = X, hm = hm, TYPE = TYPE, n.terms = n.terms, #
        terms = terms)#
    SSPH <- SSCP$SSPH#
    SSPE <- SSCP$SSPE#
    if (!is.matrix(SSPE)) #
        SSPE <- matrix(SSPE)#
    test.stats <- t(sapply(1:n.terms, function(iii) {#
        test.statistics(H = SSPH[[iii]], E = SSPE)#
    }))#
    colnames(test.stats) = c("Pillai", "Wilks", "Hotelling", #
        "Roy's")#
    rownames(test.stats) = terms#
    if (!TEST == "all") {#
        test.stats <- matrix(test.stats[, test.names], ncol = 1)#
    }#
    summary <- MANOVA.summary(test.stats = test.stats, N.tests = N.tests, #
        terms = terms, F_tests = F_tests, N = N, k = k, p = p, #
        q = q, alpha = alpha, ncp.method1 = ncp.method1, ncp.method2 = ncp.method2, #
        Serlin = Serlin)#
    if (!show.power) #
        summary <- lapply(1:length(summary), function(iii) summary[[iii]][, #
            !colnames(summary[[iii]]) %in% c("ncp", "Power")])#
    names(summary) <- test.names#
    if (N.var == 1) {#
        summary <- if (length(factors) == 1) #
            summary$Wilks[!names(summary$Wilks) %in% c("test.stat", #
                "df", "dfe", "es")]#
        else summary$Wilks[, !colnames(summary$Wilks) %in% c("test.stat", #
            "df", "dfe", "es")]#
        SS <- do.call(c, SSPH)#
        SSe <- SSPE#
        dfe <- N - k#
        F <- if (length(factors) == 1) #
            summary[["F"]]#
        else summary[, "F"]#
        if (show.power) {#
            ncp <- df * (F - 1)#
            ncp[ncp < 0] = 0#
            power <- pf(qf((1 - alpha), df, dfe), df, dfe, ncp = ncp, #
                lower = FALSE)#
            SS.table <- cbind(df, SS, F, ncp, power)#
        }else {#
            SS.table <- cbind(df, SS, F)#
        }#
        SS.table <- round.f(SS.table, digits = dp)#
        error <- round.f(c(df = dfe, SS = SSe), digits = dp)#
        effect.sizes <- ANOVA.effect.sizes(F = F, N = N, df.mat = df, #
            dfe = dfe, k = k, n.terms = n.terms, N.var = N.var, #
            ANOVA.effect.size = ANOVA.effect.size)#
        if (ANOVA.effect.size == "all") {#
            effect.sizes <- round.f(do.call(cbind, effect.sizes), #
                digits = dp)#
            return(list(ANOVA = SS.table, error = error, effect.sizes = effect.sizes))#
        }else {#
            effect.sizes <- round.f(effect.sizes, digits = dp)#
            SS.table <- cbind(SS.table, effect.sizes)#
            colnames(SS.table)[length(colnames(SS.table))] = eval(parse(text = "ANOVA.effect.size"))#
            return(list(ANOVA = SS.table, error = error))#
        }#
    }#
    MANOVA.eff.sizes <- MANOVA.effect.sizes.summary(SSPH = SSPH, #
        SSPE = SSPE, N = N, p = p, q = q, TEST = TEST)#
    rownames(MANOVA.eff.sizes) <- terms#
    if (!TEST == "all") {#
        output <- list(round.f(summary[[1]], digits = dp), round.f(MANOVA.eff.sizes, #
            digits = dp))#
        names(output) <- c(eval(parse(text = "TEST")), "effect.sizes")#
    }else {#
        summary <- lapply(summary, round.f, digits = dp)#
        output <- list(tests = summary, effect.sizes = round.f(MANOVA.eff.sizes, #
            digits = dp))#
    }#
    SSPH <- lapply(SSPH, round.f, digits = dp)#
    SSPE <- round.f(SSPE, digits = dp)#
    output <- c(output, list(SSPH = SSPH, SSPE = SSPE))#
    if (ANOVA) {#
        summary2 <- ANOVA.summary(SSPH = SSPH, SSPE = SSPE, N = N, #
            df = df, dfe = dfe, k = k, terms = terms, n.terms = n.terms, #
            N.var = N.var, ANOVA.effect.size = ANOVA.effect.size, #
            show.power = show.power, alpha = alpha)#
        summary2 <- if (ANOVA.effect.size != "all") #
            lapply(summary2, round.f, digits = dp)#
        else c(lapply(summary2[1:3], round.f, digits = dp), effect.sizes = lapply(summary2[[4]], #
            round.f, digits = dp))#
        output <- list(multivariate = output, univariate = summary2)#
    }#
    print(output)#
    return(output)#
}
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
sMANOVA
nlevels
factors
effect.sizes
es
expected.MANOVA.f <- #
function (model, muij, sdij, n, p, ar = FALSE, TYPE = "II", TEST = "Wilks", #
    ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    alpha = 0.05, dp = 7, power.settings = list(ncp.method1 = "MP", #
        ncp.method2 = "pop", Serlin = TRUE), factors = list(), #
    ...) #
{#
    ncp.method1 <- power.settings$ncp.method1#
    ncp.method2 <- power.settings$ncp.method2#
    Serlin <- power.settings$Serlin#
    levs <- sapply(factors, nlevels)#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    cov.list <- if (N.var == 1) as.list(sdij) else lapply(1:N.groups, function(iii) cov.mat.rm(sdij[iii, ], p = p, ar = ar))#
    if (!exists("TEST")) #
        TEST = "all"#
    info <- terms(model)#
    terms <- attr(info, "term.labels")#
    n.terms <- length(terms)#
    fac <- attr(info, "factors")#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
    p <- nrow(b)#
    I.p <- diag(p)#
    assign <- attr(X, "assign")#
    if (TYPE == "II") {#
        hm <- lapply(1:n.terms, function(iii) {#
            hm.fun(term = terms[iii], terms, fac, assign, I.p)#
        })#
    }else if (TYPE == "III") {#
        intercept = TRUE#
        hm <- lapply(2:(n.terms + 1), function(iii) {#
            subs <- which(assign == iii - intercept)#
            I.p[subs, , drop = FALSE]#
        })#
    }#
    names(hm) <- terms#
    mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
    mat[mat == 0] = 1#
    q <- apply(mat, 2, prod)#
    p <- N.var#
    k <- z.rank#
    F_tests <- list()#
    if (N.var == 1) {#
        TEST = "Wilks"#
    }#
    if (TEST == "all") {#
        F_tests <- c(F_Pillai, F_Wilks, F_Hotelling, F_Roys)#
        test.names <- c("Pillai", "Wilks", "Hotelling", "Roy's")#
    }else {#
        if (TEST == "Pillai") {#
            F_tests[[1]] <- F_Pillai#
            test.names <- "Pillai"#
        }#
        else if (TEST == "Wilks") {#
            F_tests[[1]] <- F_Wilks#
            test.names <- "Wilks"#
        }#
        else if (TEST == "Hotelling") {#
            F_tests[[1]] <- F_Hotelling#
            test.names <- "Hotelling"#
        }#
        else if (TEST == "Roys") {#
            F_tests[[1]] <- F_Roys#
            test.names <- "Roy's"#
        }#
    }#
    N.tests <- length(test.names)#
    df <- apply(mat, 2, prod)#
    dfe <- N - sum(df) - 1#
    cov.mat <- Reduce("+", cov.list)/k#
    SSCP <- E.SSCP.f(Y = Y, b = b, df = df, dfe = dfe, cov.mat = cov.mat, #
        V = V, W = W, X = X, hm = hm, TYPE = TYPE, n.terms = n.terms, #
        terms = terms)#
    SSPH <- SSCP$SSPH#
    SSPE <- SSCP$SSPE#
    if (!is.matrix(SSPE)) #
        SSPE <- matrix(SSPE)#
    test.stats <- t(sapply(1:n.terms, function(iii) {#
        test.statistics(H = SSPH[[iii]], E = SSPE)#
    }))#
    colnames(test.stats) = c("Pillai", "Wilks", "Hotelling", #
        "Roy's")#
    rownames(test.stats) = terms#
    if (!TEST == "all") {#
        test.stats <- matrix(test.stats[, test.names], ncol = 1)#
    }#
    summary <- MANOVA.summary(test.stats = test.stats, N.tests = N.tests, #
        terms = terms, F_tests = F_tests, N = N, k = k, p = p, #
        q = q, alpha = alpha, ncp.method1 = ncp.method1, ncp.method2 = ncp.method2, #
        Serlin = Serlin)#
    if (!show.power) #
        summary <- lapply(1:length(summary), function(iii) summary[[iii]][, #
            !colnames(summary[[iii]]) %in% c("ncp", "Power")])#
    names(summary) <- test.names#
    if (N.var == 1) {#
        summary <- if (length(factors) == 1) #
            summary$Wilks[!names(summary$Wilks) %in% c("test.stat", #
                "df", "dfe", "es")]#
        else summary$Wilks[, !colnames(summary$Wilks) %in% c("test.stat", #
            "df", "dfe", "es")]#
        SS <- do.call(c, SSPH)#
        SSe <- SSPE#
        dfe <- N - k#
        F <- if (length(factors) == 1) #
            summary[["F"]]#
        else summary[, "F"]#
        if (show.power) {#
            ncp <- df * (F - 1)#
            ncp[ncp < 0] = 0#
            power <- pf(qf((1 - alpha), df, dfe), df, dfe, ncp = ncp, #
                lower = FALSE)#
            SS.table <- cbind(df, SS, F, ncp, power)#
        }else {#
            SS.table <- cbind(df, SS, F)#
        }#
        SS.table <- round.f(SS.table, digits = dp)#
        error <- round.f(c(df = dfe, SS = SSe), digits = dp)#
        effect.sizes <- ANOVA.effect.sizes(F = F, N = N, df.mat = df, #
            dfe = dfe, k = k, n.terms = n.terms, N.var = N.var, #
            ANOVA.effect.size = ANOVA.effect.size)#
        if (ANOVA.effect.size == "all") {#
            effect.sizes <- round.f(do.call(cbind, effect.sizes), #
                digits = dp)#
            return(list(ANOVA = SS.table, error = error, effect.sizes = effect.sizes))#
        }else {#
            effect.sizes <- round.f(effect.sizes, digits = dp)#
            SS.table <- cbind(SS.table, effect.sizes)#
            colnames(SS.table)[length(colnames(SS.table))] = eval(parse(text = "ANOVA.effect.size"))#
            return(list(ANOVA = SS.table, error = error))#
        }#
    }#
    MANOVA.eff.sizes <- MANOVA.effect.sizes.summary(SSPH = SSPH, #
        SSPE = SSPE, N = N, p = p, q = q, TEST = TEST)#
    rownames(MANOVA.eff.sizes) <- terms#
    if (!TEST == "all") {#
        output <- list(round.f(summary[[1]], digits = dp), round.f(MANOVA.eff.sizes, #
            digits = dp))#
        names(output) <- c(eval(parse(text = "TEST")), "effect.sizes")#
    }else {#
        summary <- lapply(summary, round.f, digits = dp)#
        output <- list(tests = summary, effect.sizes = round.f(MANOVA.eff.sizes, #
            digits = dp))#
    }#
    SSPH <- lapply(SSPH, round.f, digits = dp)#
    SSPE <- round.f(SSPE, digits = dp)#
    output <- c(output, list(SSPH = SSPH, SSPE = SSPE))#
    if (ANOVA) {#
        print(list(SSPH = SSPH, SSPE = SSPE, N = N, #
            df = df, dfe = dfe, k = k, terms = terms, n.terms = n.terms, #
            N.var = N.var, ANOVA.effect.size = ANOVA.effect.size, #
            show.power = show.power, alpha = alpha))#
        summary2 <- ANOVA.summary(SSPH = SSPH, SSPE = SSPE, N = N, #
            df = df, dfe = dfe, k = k, terms = terms, n.terms = n.terms, #
            N.var = N.var, ANOVA.effect.size = ANOVA.effect.size, #
            show.power = show.power, alpha = alpha)#
        summary2 <- if (ANOVA.effect.size != "all") #
            lapply(summary2, round.f, digits = dp)#
        else c(lapply(summary2[1:3], round.f, digits = dp), effect.sizes = lapply(summary2[[4]], #
            round.f, digits = dp))#
        output <- list(multivariate = output, univariate = summary2)#
    }#
#
    return(output)#
}
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
out.e
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
out.e
eMANOVA.f <- #
function (formula, longdata, n, p = 0, ar = TRUE, TYPE = "II", #
    TEST = "Wilks", ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    power.settings = list(ncp.method1 = "OS", ncp.method2 = "pop", #
        Serlin = FALSE), alpha = 0.05, dp = 7) #
{#
    longdata.sd <- longdata$sd#
    longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
    info <- terms(formula, "Error")#
    var <- attr(info, "variables")[[1L + 1]]#
    terms <- attr(info, "term.labels")#
    groups <- terms[attr(info, "order") == 1]#
    n.groups <- length(groups)#
    factors <- lapply(1:n.groups, function(ii) rep(longdata[, #
        groups[ii]], each = n))#
    names(factors) <- groups#
    factors <- lapply(factors, factor)#
    muij <- longdata[, -which(colnames(longdata) %in% groups)]#
    sdij <- longdata.sd[, -which(colnames(longdata.sd) %in% groups)]#
    if (dim(longdata)[2] - n.groups == 1) {#
        muij <- matrix(muij, ncol = 1)#
        sdij <- matrix(sdij, ncol = 1)#
    }#
    output <- expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)#
    return(output)#
}#
expected.MANOVA.f <- #
function (model, muij, sdij, n, p, ar = FALSE, TYPE = "II", TEST = "Wilks", #
    ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    alpha = 0.05, dp = 7, power.settings = list(ncp.method1 = "MP", #
        ncp.method2 = "pop", Serlin = TRUE), factors = list(), #
    ...) #
{#
    ncp.method1 <- power.settings$ncp.method1#
    ncp.method2 <- power.settings$ncp.method2#
    Serlin <- power.settings$Serlin#
    levs <- sapply(factors, nlevels)#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    cov.list <- if (N.var == 1) as.list(sdij) else lapply(1:N.groups, function(iii) cov.mat.rm(sdij[iii, ], p = p, ar = ar))#
    if (!exists("TEST")) #
        TEST = "all"#
    info <- terms(model)#
    terms <- attr(info, "term.labels")#
    n.terms <- length(terms)#
    fac <- attr(info, "factors")#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
    p <- nrow(b)#
    I.p <- diag(p)#
    assign <- attr(X, "assign")#
    if (TYPE == "II") {#
        hm <- lapply(1:n.terms, function(iii) {#
            hm.fun(term = terms[iii], terms, fac, assign, I.p)#
        })#
    }else if (TYPE == "III") {#
        intercept = TRUE#
        hm <- lapply(2:(n.terms + 1), function(iii) {#
            subs <- which(assign == iii - intercept)#
            I.p[subs, , drop = FALSE]#
        })#
    }#
    names(hm) <- terms#
    mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
    mat[mat == 0] = 1#
    q <- apply(mat, 2, prod)#
    p <- N.var#
    k <- z.rank#
    F_tests <- list()#
    if (N.var == 1) {#
        TEST = "Wilks"#
    }#
    if (TEST == "all") {#
        F_tests <- c(F_Pillai, F_Wilks, F_Hotelling, F_Roys)#
        test.names <- c("Pillai", "Wilks", "Hotelling", "Roy's")#
    }else {#
        if (TEST == "Pillai") {#
            F_tests[[1]] <- F_Pillai#
            test.names <- "Pillai"#
        }#
        else if (TEST == "Wilks") {#
            F_tests[[1]] <- F_Wilks#
            test.names <- "Wilks"#
        }#
        else if (TEST == "Hotelling") {#
            F_tests[[1]] <- F_Hotelling#
            test.names <- "Hotelling"#
        }#
        else if (TEST == "Roys") {#
            F_tests[[1]] <- F_Roys#
            test.names <- "Roy's"#
        }#
    }#
    N.tests <- length(test.names)#
    df <- apply(mat, 2, prod)#
    dfe <- N - sum(df) - 1#
    cov.mat <- Reduce("+", cov.list)/k#
    SSCP <- E.SSCP.f(Y = Y, b = b, df = df, dfe = dfe, cov.mat = cov.mat, #
        V = V, W = W, X = X, hm = hm, TYPE = TYPE, n.terms = n.terms, #
        terms = terms)#
    SSPH <- SSCP$SSPH#
    SSPE <- SSCP$SSPE#
    if (!is.matrix(SSPE)) #
        SSPE <- matrix(SSPE)#
    test.stats <- t(sapply(1:n.terms, function(iii) {#
        test.statistics(H = SSPH[[iii]], E = SSPE)#
    }))#
    colnames(test.stats) = c("Pillai", "Wilks", "Hotelling", #
        "Roy's")#
    rownames(test.stats) = terms#
    if (!TEST == "all") {#
        test.stats <- matrix(test.stats[, test.names], ncol = 1)#
    }#
    summary <- MANOVA.summary(test.stats = test.stats, N.tests = N.tests, #
        terms = terms, F_tests = F_tests, N = N, k = k, p = p, #
        q = q, alpha = alpha, ncp.method1 = ncp.method1, ncp.method2 = ncp.method2, #
        Serlin = Serlin)#
    if (!show.power) #
        summary <- lapply(1:length(summary), function(iii) summary[[iii]][, #
            !colnames(summary[[iii]]) %in% c("ncp", "Power")])#
    names(summary) <- test.names#
    if (N.var == 1) {#
        summary <- if (length(factors) == 1) #
            summary$Wilks[!names(summary$Wilks) %in% c("test.stat", #
                "df", "dfe", "es")]#
        else summary$Wilks[, !colnames(summary$Wilks) %in% c("test.stat", #
            "df", "dfe", "es")]#
        SS <- do.call(c, SSPH)#
        SSe <- SSPE#
        dfe <- N - k#
        F <- if (length(factors) == 1) #
            summary[["F"]]#
        else summary[, "F"]#
        if (show.power) {#
            ncp <- df * (F - 1)#
            ncp[ncp < 0] = 0#
            power <- pf(qf((1 - alpha), df, dfe), df, dfe, ncp = ncp, #
                lower = FALSE)#
            SS.table <- cbind(df, SS, F, ncp, power)#
        }else {#
            SS.table <- cbind(df, SS, F)#
        }#
        SS.table <- round.f(SS.table, digits = dp)#
        error <- round.f(c(df = dfe, SS = SSe), digits = dp)#
        effect.sizes <- ANOVA.effect.sizes(F = F, N = N, df.mat = df, #
            dfe = dfe, k = k, n.terms = n.terms, N.var = N.var, #
            ANOVA.effect.size = ANOVA.effect.size)#
        if (ANOVA.effect.size == "all") {#
            effect.sizes <- round.f(do.call(cbind, effect.sizes), #
                digits = dp)#
            return(list(ANOVA = SS.table, error = error, effect.sizes = effect.sizes))#
        }else {#
            effect.sizes <- round.f(effect.sizes, digits = dp)#
            SS.table <- cbind(SS.table, effect.sizes)#
            colnames(SS.table)[length(colnames(SS.table))] = eval(parse(text = "ANOVA.effect.size"))#
            return(list(ANOVA = SS.table, error = error))#
        }#
    }#
    MANOVA.eff.sizes <- MANOVA.effect.sizes.summary(SSPH = SSPH, #
        SSPE = SSPE, N = N, p = p, q = q, TEST = TEST)#
    rownames(MANOVA.eff.sizes) <- terms#
    if (!TEST == "all") {#
        output <- list(round.f(summary[[1]], digits = dp), round.f(MANOVA.eff.sizes, #
            digits = dp))#
        names(output) <- c(eval(parse(text = "TEST")), "effect.sizes")#
    }else {#
        summary <- lapply(summary, round.f, digits = dp)#
        output <- list(tests = summary, effect.sizes = round.f(MANOVA.eff.sizes, #
            digits = dp))#
    }#
    SSPH <- lapply(SSPH, round.f, digits = dp)#
    SSPE <- round.f(SSPE, digits = dp)#
    output <- c(output, list(SSPH = SSPH, SSPE = SSPE))#
    if (ANOVA) {#
        summary2 <- ANOVA.summary(SSPH = SSPH, SSPE = SSPE, N = N, #
            df = df, dfe = dfe, k = k, terms = terms, n.terms = n.terms, #
            N.var = N.var, ANOVA.effect.size = ANOVA.effect.size, #
            show.power = show.power, alpha = alpha)#
        print(summary)#
        summary2 <- if (ANOVA.effect.size != "all") #
            lapply(summary2, round.f, digits = dp)#
        else c(lapply(summary2[1:3], round.f, digits = dp), effect.sizes = lapply(summary2[[4]], #
            round.f, digits = dp))#
        output <- list(multivariate = output, univariate = summary2)#
    }#
#
    return(output)#
}
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
longdata2
ANOVA
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
eMANOVA.f <- #
function (formula, longdata, n, p = 0, ar = TRUE, TYPE = "II", #
    TEST = "Wilks", ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    power.settings = list(ncp.method1 = "OS", ncp.method2 = "pop", #
        Serlin = FALSE), alpha = 0.05, dp = 7) #
{#
    longdata.sd <- longdata$sd#
    longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
    info <- terms(formula, "Error")#
    var <- attr(info, "variables")[[1L + 1]]#
    terms <- attr(info, "term.labels")#
    groups <- terms[attr(info, "order") == 1]#
    n.groups <- length(groups)#
    factors <- lapply(1:n.groups, function(ii) rep(longdata[, #
        groups[ii]], each = n))#
    names(factors) <- groups#
    factors <- lapply(factors, factor)#
    muij <- longdata[, -which(colnames(longdata) %in% groups)]#
    sdij <- longdata.sd[, -which(colnames(longdata.sd) %in% groups)]#
    if (dim(longdata)[2] - n.groups == 1) {#
        muij <- matrix(muij, ncol = 1)#
        sdij <- matrix(sdij, ncol = 1)#
    }#
    output <- expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)#
    return(output)#
}#
expected.MANOVA.f <- #
function (model, muij, sdij, n, p, ar = FALSE, TYPE = "II", TEST = "Wilks", #
    ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    alpha = 0.05, dp = 7, power.settings = list(ncp.method1 = "MP", #
        ncp.method2 = "pop", Serlin = TRUE), factors = list(), #
    ...) #
{#
    ncp.method1 <- power.settings$ncp.method1#
    ncp.method2 <- power.settings$ncp.method2#
    Serlin <- power.settings$Serlin#
    levs <- sapply(factors, nlevels)#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    cov.list <- if (N.var == 1) as.list(sdij) else lapply(1:N.groups, function(iii) cov.mat.rm(sdij[iii, ], p = p, ar = ar))#
    if (!exists("TEST")) #
        TEST = "all"#
    info <- terms(model)#
    terms <- attr(info, "term.labels")#
    n.terms <- length(terms)#
    fac <- attr(info, "factors")#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
    p <- nrow(b)#
    I.p <- diag(p)#
    assign <- attr(X, "assign")#
    if (TYPE == "II") {#
        hm <- lapply(1:n.terms, function(iii) {#
            hm.fun(term = terms[iii], terms, fac, assign, I.p)#
        })#
    }else if (TYPE == "III") {#
        intercept = TRUE#
        hm <- lapply(2:(n.terms + 1), function(iii) {#
            subs <- which(assign == iii - intercept)#
            I.p[subs, , drop = FALSE]#
        })#
    }#
    names(hm) <- terms#
    mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
    mat[mat == 0] = 1#
    q <- apply(mat, 2, prod)#
    p <- N.var#
    k <- z.rank#
    F_tests <- list()#
    if (N.var == 1) {#
        TEST = "Wilks"#
    }#
    if (TEST == "all") {#
        F_tests <- c(F_Pillai, F_Wilks, F_Hotelling, F_Roys)#
        test.names <- c("Pillai", "Wilks", "Hotelling", "Roy's")#
    }else {#
        if (TEST == "Pillai") {#
            F_tests[[1]] <- F_Pillai#
            test.names <- "Pillai"#
        }#
        else if (TEST == "Wilks") {#
            F_tests[[1]] <- F_Wilks#
            test.names <- "Wilks"#
        }#
        else if (TEST == "Hotelling") {#
            F_tests[[1]] <- F_Hotelling#
            test.names <- "Hotelling"#
        }#
        else if (TEST == "Roys") {#
            F_tests[[1]] <- F_Roys#
            test.names <- "Roy's"#
        }#
    }#
    N.tests <- length(test.names)#
    df <- apply(mat, 2, prod)#
    dfe <- N - sum(df) - 1#
    cov.mat <- Reduce("+", cov.list)/k#
    SSCP <- E.SSCP.f(Y = Y, b = b, df = df, dfe = dfe, cov.mat = cov.mat, #
        V = V, W = W, X = X, hm = hm, TYPE = TYPE, n.terms = n.terms, #
        terms = terms)#
    SSPH <- SSCP$SSPH#
    SSPE <- SSCP$SSPE#
    if (!is.matrix(SSPE)) #
        SSPE <- matrix(SSPE)#
    test.stats <- t(sapply(1:n.terms, function(iii) {#
        test.statistics(H = SSPH[[iii]], E = SSPE)#
    }))#
    colnames(test.stats) = c("Pillai", "Wilks", "Hotelling", #
        "Roy's")#
    rownames(test.stats) = terms#
    if (!TEST == "all") {#
        test.stats <- matrix(test.stats[, test.names], ncol = 1)#
    }#
    summary <- MANOVA.summary(test.stats = test.stats, N.tests = N.tests, #
        terms = terms, F_tests = F_tests, N = N, k = k, p = p, #
        q = q, alpha = alpha, ncp.method1 = ncp.method1, ncp.method2 = ncp.method2, #
        Serlin = Serlin)#
    if (!show.power) #
        summary <- lapply(1:length(summary), function(iii) summary[[iii]][, #
            !colnames(summary[[iii]]) %in% c("ncp", "Power")])#
    names(summary) <- test.names#
    if (N.var == 1) {#
        summary <- if (length(factors) == 1) #
            summary$Wilks[!names(summary$Wilks) %in% c("test.stat", #
                "df", "dfe", "es")]#
        else summary$Wilks[, !colnames(summary$Wilks) %in% c("test.stat", #
            "df", "dfe", "es")]#
        SS <- do.call(c, SSPH)#
        SSe <- SSPE#
        dfe <- N - k#
        F <- if (length(factors) == 1) #
            summary[["F"]]#
        else summary[, "F"]#
        if (show.power) {#
            ncp <- df * (F - 1)#
            ncp[ncp < 0] = 0#
            power <- pf(qf((1 - alpha), df, dfe), df, dfe, ncp = ncp, #
                lower = FALSE)#
            SS.table <- cbind(df, SS, F, ncp, power)#
        }else {#
            SS.table <- cbind(df, SS, F)#
        }#
        SS.table <- round.f(SS.table, digits = dp)#
        error <- round.f(c(df = dfe, SS = SSe), digits = dp)#
        effect.sizes <- ANOVA.effect.sizes(F = F, N = N, df.mat = df, #
            dfe = dfe, k = k, n.terms = n.terms, N.var = N.var, #
            ANOVA.effect.size = ANOVA.effect.size)#
        if (ANOVA.effect.size == "all") {#
            effect.sizes <- round.f(do.call(cbind, effect.sizes), #
                digits = dp)#
            return(list(ANOVA = SS.table, error = error, effect.sizes = effect.sizes))#
        }else {#
            effect.sizes <- round.f(effect.sizes, digits = dp)#
            SS.table <- cbind(SS.table, effect.sizes)#
            colnames(SS.table)[length(colnames(SS.table))] = eval(parse(text = "ANOVA.effect.size"))#
            return(list(ANOVA = SS.table, error = error))#
        }#
    }#
    MANOVA.eff.sizes <- MANOVA.effect.sizes.summary(SSPH = SSPH, #
        SSPE = SSPE, N = N, p = p, q = q, TEST = TEST)#
    rownames(MANOVA.eff.sizes) <- terms#
    if (!TEST == "all") {#
        output <- list(round.f(summary[[1]], digits = dp), round.f(MANOVA.eff.sizes, #
            digits = dp))#
        names(output) <- c(eval(parse(text = "TEST")), "effect.sizes")#
    }else {#
        summary <- lapply(summary, round.f, digits = dp)#
        output <- list(tests = summary, effect.sizes = round.f(MANOVA.eff.sizes, #
            digits = dp))#
    }#
    SSPH <- lapply(SSPH, round.f, digits = dp)#
    SSPE <- round.f(SSPE, digits = dp)#
    output <- c(output, list(SSPH = SSPH, SSPE = SSPE))#
    if (ANOVA) {#
        summary2 <- ANOVA.summary(SSPH = SSPH, SSPE = SSPE, N = N, #
            df = df, dfe = dfe, k = k, terms = terms, n.terms = n.terms, #
            N.var = N.var, ANOVA.effect.size = ANOVA.effect.size, #
            show.power = show.power, alpha = alpha)#
        print(summary2)#
        summary2 <- if (ANOVA.effect.size != "all") #
            lapply(summary2, round.f, digits = dp)#
        else c(lapply(summary2[1:3], round.f, digits = dp), effect.sizes = lapply(summary2[[4]], #
            round.f, digits = dp))#
        output <- list(multivariate = output, univariate = summary2)#
    }#
#
    return(output)#
}
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
eMANOVA.f <- #
function (formula, longdata, n, p = 0, ar = TRUE, TYPE = "II", #
    TEST = "Wilks", ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    power.settings = list(ncp.method1 = "OS", ncp.method2 = "pop", #
        Serlin = FALSE), alpha = 0.05, dp = 7) #
{#
    longdata.sd <- longdata$sd#
    longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
    info <- terms(formula, "Error")#
    var <- attr(info, "variables")[[1L + 1]]#
    terms <- attr(info, "term.labels")#
    groups <- terms[attr(info, "order") == 1]#
    n.groups <- length(groups)#
    factors <- lapply(1:n.groups, function(ii) rep(longdata[, #
        groups[ii]], each = n))#
    names(factors) <- groups#
    factors <- lapply(factors, factor)#
    muij <- longdata[, -which(colnames(longdata) %in% groups)]#
    sdij <- longdata.sd[, -which(colnames(longdata.sd) %in% groups)]#
    if (dim(longdata)[2] - n.groups == 1) {#
        muij <- matrix(muij, ncol = 1)#
        sdij <- matrix(sdij, ncol = 1)#
    }#
    output <- expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)#
    return(output)#
}#
expected.MANOVA.f <- #
function (model, muij, sdij, n, p, ar = FALSE, TYPE = "II", TEST = "Wilks", #
    ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    alpha = 0.05, dp = 7, power.settings = list(ncp.method1 = "MP", #
        ncp.method2 = "pop", Serlin = TRUE), factors = list(), #
    ...) #
{#
    ncp.method1 <- power.settings$ncp.method1#
    ncp.method2 <- power.settings$ncp.method2#
    Serlin <- power.settings$Serlin#
    levs <- sapply(factors, nlevels)#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    cov.list <- if (N.var == 1) as.list(sdij) else lapply(1:N.groups, function(iii) cov.mat.rm(sdij[iii, ], p = p, ar = ar))#
    if (!exists("TEST")) #
        TEST = "all"#
    info <- terms(model)#
    terms <- attr(info, "term.labels")#
    n.terms <- length(terms)#
    fac <- attr(info, "factors")#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
    p <- nrow(b)#
    I.p <- diag(p)#
    assign <- attr(X, "assign")#
    if (TYPE == "II") {#
        hm <- lapply(1:n.terms, function(iii) {#
            hm.fun(term = terms[iii], terms, fac, assign, I.p)#
        })#
    }else if (TYPE == "III") {#
        intercept = TRUE#
        hm <- lapply(2:(n.terms + 1), function(iii) {#
            subs <- which(assign == iii - intercept)#
            I.p[subs, , drop = FALSE]#
        })#
    }#
    names(hm) <- terms#
    mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
    mat[mat == 0] = 1#
    q <- apply(mat, 2, prod)#
    p <- N.var#
    k <- z.rank#
    F_tests <- list()#
    if (N.var == 1) {#
        TEST = "Wilks"#
    }#
    if (TEST == "all") {#
        F_tests <- c(F_Pillai, F_Wilks, F_Hotelling, F_Roys)#
        test.names <- c("Pillai", "Wilks", "Hotelling", "Roy's")#
    }else {#
        if (TEST == "Pillai") {#
            F_tests[[1]] <- F_Pillai#
            test.names <- "Pillai"#
        }#
        else if (TEST == "Wilks") {#
            F_tests[[1]] <- F_Wilks#
            test.names <- "Wilks"#
        }#
        else if (TEST == "Hotelling") {#
            F_tests[[1]] <- F_Hotelling#
            test.names <- "Hotelling"#
        }#
        else if (TEST == "Roys") {#
            F_tests[[1]] <- F_Roys#
            test.names <- "Roy's"#
        }#
    }#
    N.tests <- length(test.names)#
    df <- apply(mat, 2, prod)#
    dfe <- N - sum(df) - 1#
    cov.mat <- Reduce("+", cov.list)/k#
    SSCP <- E.SSCP.f(Y = Y, b = b, df = df, dfe = dfe, cov.mat = cov.mat, #
        V = V, W = W, X = X, hm = hm, TYPE = TYPE, n.terms = n.terms, #
        terms = terms)#
    SSPH <- SSCP$SSPH#
    SSPE <- SSCP$SSPE#
    if (!is.matrix(SSPE)) #
        SSPE <- matrix(SSPE)#
    test.stats <- t(sapply(1:n.terms, function(iii) {#
        test.statistics(H = SSPH[[iii]], E = SSPE)#
    }))#
    colnames(test.stats) = c("Pillai", "Wilks", "Hotelling", #
        "Roy's")#
    rownames(test.stats) = terms#
    if (!TEST == "all") {#
        test.stats <- matrix(test.stats[, test.names], ncol = 1)#
    }#
    summary <- MANOVA.summary(test.stats = test.stats, N.tests = N.tests, #
        terms = terms, F_tests = F_tests, N = N, k = k, p = p, #
        q = q, alpha = alpha, ncp.method1 = ncp.method1, ncp.method2 = ncp.method2, #
        Serlin = Serlin)#
    if (!show.power) #
        summary <- lapply(1:length(summary), function(iii) summary[[iii]][, #
            !colnames(summary[[iii]]) %in% c("ncp", "Power")])#
    names(summary) <- test.names#
    if (N.var == 1) {#
        summary <- if (length(factors) == 1) #
            summary$Wilks[!names(summary$Wilks) %in% c("test.stat", #
                "df", "dfe", "es")]#
        else summary$Wilks[, !colnames(summary$Wilks) %in% c("test.stat", #
            "df", "dfe", "es")]#
        SS <- do.call(c, SSPH)#
        SSe <- SSPE#
        dfe <- N - k#
        F <- if (length(factors) == 1) #
            summary[["F"]]#
        else summary[, "F"]#
        if (show.power) {#
            ncp <- df * (F - 1)#
            ncp[ncp < 0] = 0#
            power <- pf(qf((1 - alpha), df, dfe), df, dfe, ncp = ncp, #
                lower = FALSE)#
            SS.table <- cbind(df, SS, F, ncp, power)#
        }else {#
            SS.table <- cbind(df, SS, F)#
        }#
        SS.table <- round.f(SS.table, digits = dp)#
        error <- round.f(c(df = dfe, SS = SSe), digits = dp)#
        effect.sizes <- ANOVA.effect.sizes(F = F, N = N, df.mat = df, #
            dfe = dfe, k = k, n.terms = n.terms, N.var = N.var, #
            ANOVA.effect.size = ANOVA.effect.size)#
        if (ANOVA.effect.size == "all") {#
            effect.sizes <- round.f(do.call(cbind, effect.sizes), #
                digits = dp)#
            return(list(ANOVA = SS.table, error = error, effect.sizes = effect.sizes))#
        }else {#
            effect.sizes <- round.f(effect.sizes, digits = dp)#
            SS.table <- cbind(SS.table, effect.sizes)#
            colnames(SS.table)[length(colnames(SS.table))] = eval(parse(text = "ANOVA.effect.size"))#
            return(list(ANOVA = SS.table, error = error))#
        }#
    }#
    MANOVA.eff.sizes <- MANOVA.effect.sizes.summary(SSPH = SSPH, #
        SSPE = SSPE, N = N, p = p, q = q, TEST = TEST)#
    rownames(MANOVA.eff.sizes) <- terms#
    if (!TEST == "all") {#
        output <- list(round.f(summary[[1]], digits = dp), round.f(MANOVA.eff.sizes, #
            digits = dp))#
        names(output) <- c(eval(parse(text = "TEST")), "effect.sizes")#
    }else {#
        summary <- lapply(summary, round.f, digits = dp)#
        output <- list(tests = summary, effect.sizes = round.f(MANOVA.eff.sizes, #
            digits = dp))#
    }#
    SSPH <- lapply(SSPH, round.f, digits = dp)#
    SSPE <- round.f(SSPE, digits = dp)#
    output <- c(output, list(SSPH = SSPH, SSPE = SSPE))#
    if (ANOVA) {#
        summary2 <- ANOVA.summary(SSPH = SSPH, SSPE = SSPE, N = N, #
            df = df, dfe = dfe, k = k, terms = terms, n.terms = n.terms, #
            N.var = N.var, ANOVA.effect.size = ANOVA.effect.size, #
            show.power = show.power, alpha = alpha)#
        print(summary2)#
        summary2 <- if (ANOVA.effect.size != "all") #
            lapply(summary2, round.f, digits = dp)#
        else c(lapply(summary2[1:3], round.f, digits = dp), effect.sizes = lapply(summary2[[4]], #
            round.f, digits = dp))#
        print(summary2)#
        output <- list(multivariate = output, univariate = summary2)#
    }#
#
    return(output)#
}
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
summary2
summary2 <- if (ANOVA.effect.size != "all") #
            lapply(summary2, round.f, digits = dp)#
        else c(lapply(summary2[1:3], round.f, digits = dp), effect.sizes = lapply(summary2[[4]], #
            round.f, digits = dp))
summary2 <- if (ANOVA.effect.size != "all") lapply(summary2, round.f, digits = dp) else c(lapply(summary2[1:3], round.f, digits = dp), effect.sizes = lapply(summary2[[4]], round.f, digits = dp))
summary2
summary2 <- ANOVA.summary(SSPH = SSPH, SSPE = SSPE, N = N, #
            df = df, dfe = dfe, k = k, terms = terms, n.terms = n.terms, #
            N.var = N.var, ANOVA.effect.size = ANOVA.effect.size, #
            show.power = show.power, alpha = alpha)#
        print(summary2)#
        summary2 <- if (ANOVA.effect.size != "all") lapply(summary2, round.f, digits = dp) else c(lapply(summary2[1:3], round.f, digits = dp), effect.sizes = lapply(summary2[[4]], round.f, digits = dp))#
        print(summary2)
summary2 <- if (ANOVA.effect.size != "all") lapply(summary2, ANOVA.boot:::round.f, digits = dp) else c(lapply(summary2[1:3], ANOVA.boot:::round.f, digits = dp), effect.sizes = lapply(summary2[[4]], ANOVA.boot:::round.f, digits = dp))
summary2
(ANOVA.effect.size != "all")
summary2 <- ANOVA.summary(SSPH = SSPH, SSPE = SSPE, N = N, #
            df = df, dfe = dfe, k = k, terms = terms, n.terms = n.terms, #
            N.var = N.var, ANOVA.effect.size = ANOVA.effect.size, #
            show.power = show.power, alpha = alpha)
summary
summary2
round.f
eMANOVA.f <- #
function (formula, longdata, n, p = 0, ar = TRUE, TYPE = "II", #
    TEST = "Wilks", ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    power.settings = list(ncp.method1 = "OS", ncp.method2 = "pop", #
        Serlin = FALSE), alpha = 0.05, dp = 7) #
{#
    longdata.sd <- longdata$sd#
    longdata <- longdata[[-which(names(longdata) %in% "sd")]]#
    info <- terms(formula, "Error")#
    var <- attr(info, "variables")[[1L + 1]]#
    terms <- attr(info, "term.labels")#
    groups <- terms[attr(info, "order") == 1]#
    n.groups <- length(groups)#
    factors <- lapply(1:n.groups, function(ii) rep(longdata[, #
        groups[ii]], each = n))#
    names(factors) <- groups#
    factors <- lapply(factors, factor)#
    muij <- longdata[, -which(colnames(longdata) %in% groups)]#
    sdij <- longdata.sd[, -which(colnames(longdata.sd) %in% groups)]#
    if (dim(longdata)[2] - n.groups == 1) {#
        muij <- matrix(muij, ncol = 1)#
        sdij <- matrix(sdij, ncol = 1)#
    }#
    output <- expected.MANOVA.f(model = formula, muij = muij, sdij = sdij, #
        factors = factors, n = n, p = p, ar = ar, TYPE = TYPE, #
        TEST = TEST, ANOVA = ANOVA, ANOVA.effect.size = ANOVA.effect.size, #
        show.power = show.power, power.settings = power.settings, #
        alpha = alpha, dp = dp)#
    return(output)#
}#
expected.MANOVA.f <- #
function (model, muij, sdij, n, p, ar = FALSE, TYPE = "II", TEST = "Wilks", #
    ANOVA = TRUE, ANOVA.effect.size = "os", show.power = FALSE, #
    alpha = 0.05, dp = 7, power.settings = list(ncp.method1 = "MP", #
        ncp.method2 = "pop", Serlin = TRUE), factors = list(), #
    ...) #
{#
    ncp.method1 <- power.settings$ncp.method1#
    ncp.method2 <- power.settings$ncp.method2#
    Serlin <- power.settings$Serlin#
    levs <- sapply(factors, nlevels)#
    N.groups <- dim(muij)[1]#
    N.var <- dim(muij)[2]#
    cov.list <- if (N.var == 1) as.list(sdij) else lapply(1:N.groups, function(iii) cov.mat.rm(sdij[iii, ], p = p, ar = ar))#
    if (!exists("TEST")) #
        TEST = "all"#
    info <- terms(model)#
    terms <- attr(info, "term.labels")#
    n.terms <- length(terms)#
    fac <- attr(info, "factors")#
    Y <- muij[rep(1:N.groups, each = n), ]#
    if (N.var == 1) #
        Y <- matrix(Y, ncol = 1)#
    out <- model.matrix.f(info, Y = Y, factors = factors)#
    X <- out$X#
    groups <- out$groups#
    n.levs <- out$n#
    N <- dim(Y)[1]#
    W <- diag(N)#
    V <- solve((t(X) %*% W %*% X))#
    XX <- solve(t(X) %*% X)#
    b <- XX %*% t(X) %*% Y#
    z.rank <- dim(t(X) %*% Y)[1]#
    p <- nrow(b)#
    I.p <- diag(p)#
    assign <- attr(X, "assign")#
    if (TYPE == "II") {#
        hm <- lapply(1:n.terms, function(iii) {#
            hm.fun(term = terms[iii], terms, fac, assign, I.p)#
        })#
    }else if (TYPE == "III") {#
        intercept = TRUE#
        hm <- lapply(2:(n.terms + 1), function(iii) {#
            subs <- which(assign == iii - intercept)#
            I.p[subs, , drop = FALSE]#
        })#
    }#
    names(hm) <- terms#
    mat <- fac[-1, ] * matrix(rep(levs - 1, n.terms), ncol = n.terms)#
    mat[mat == 0] = 1#
    q <- apply(mat, 2, prod)#
    p <- N.var#
    k <- z.rank#
    F_tests <- list()#
    if (N.var == 1) {#
        TEST = "Wilks"#
    }#
    if (TEST == "all") {#
        F_tests <- c(F_Pillai, F_Wilks, F_Hotelling, F_Roys)#
        test.names <- c("Pillai", "Wilks", "Hotelling", "Roy's")#
    }else {#
        if (TEST == "Pillai") {#
            F_tests[[1]] <- F_Pillai#
            test.names <- "Pillai"#
        }#
        else if (TEST == "Wilks") {#
            F_tests[[1]] <- F_Wilks#
            test.names <- "Wilks"#
        }#
        else if (TEST == "Hotelling") {#
            F_tests[[1]] <- F_Hotelling#
            test.names <- "Hotelling"#
        }#
        else if (TEST == "Roys") {#
            F_tests[[1]] <- F_Roys#
            test.names <- "Roy's"#
        }#
    }#
    N.tests <- length(test.names)#
    df <- apply(mat, 2, prod)#
    dfe <- N - sum(df) - 1#
    cov.mat <- Reduce("+", cov.list)/k#
    SSCP <- E.SSCP.f(Y = Y, b = b, df = df, dfe = dfe, cov.mat = cov.mat, #
        V = V, W = W, X = X, hm = hm, TYPE = TYPE, n.terms = n.terms, #
        terms = terms)#
    SSPH <- SSCP$SSPH#
    SSPE <- SSCP$SSPE#
    if (!is.matrix(SSPE)) #
        SSPE <- matrix(SSPE)#
    test.stats <- t(sapply(1:n.terms, function(iii) {#
        test.statistics(H = SSPH[[iii]], E = SSPE)#
    }))#
    colnames(test.stats) = c("Pillai", "Wilks", "Hotelling", #
        "Roy's")#
    rownames(test.stats) = terms#
    if (!TEST == "all") {#
        test.stats <- matrix(test.stats[, test.names], ncol = 1)#
    }#
    summary <- MANOVA.summary(test.stats = test.stats, N.tests = N.tests, #
        terms = terms, F_tests = F_tests, N = N, k = k, p = p, #
        q = q, alpha = alpha, ncp.method1 = ncp.method1, ncp.method2 = ncp.method2, #
        Serlin = Serlin)#
    if (!show.power) #
        summary <- lapply(1:length(summary), function(iii) summary[[iii]][, #
            !colnames(summary[[iii]]) %in% c("ncp", "Power")])#
    names(summary) <- test.names#
    if (N.var == 1) {#
        summary <- if (length(factors) == 1) #
            summary$Wilks[!names(summary$Wilks) %in% c("test.stat", #
                "df", "dfe", "es")]#
        else summary$Wilks[, !colnames(summary$Wilks) %in% c("test.stat", #
            "df", "dfe", "es")]#
        SS <- do.call(c, SSPH)#
        SSe <- SSPE#
        dfe <- N - k#
        F <- if (length(factors) == 1) #
            summary[["F"]]#
        else summary[, "F"]#
        if (show.power) {#
            ncp <- df * (F - 1)#
            ncp[ncp < 0] = 0#
            power <- pf(qf((1 - alpha), df, dfe), df, dfe, ncp = ncp, #
                lower = FALSE)#
            SS.table <- cbind(df, SS, F, ncp, power)#
        }else {#
            SS.table <- cbind(df, SS, F)#
        }#
        SS.table <- round.f(SS.table, digits = dp)#
        error <- round.f(c(df = dfe, SS = SSe), digits = dp)#
        effect.sizes <- ANOVA.effect.sizes(F = F, N = N, df.mat = df, #
            dfe = dfe, k = k, n.terms = n.terms, N.var = N.var, #
            ANOVA.effect.size = ANOVA.effect.size)#
        if (ANOVA.effect.size == "all") {#
            effect.sizes <- round.f(do.call(cbind, effect.sizes), #
                digits = dp)#
            return(list(ANOVA = SS.table, error = error, effect.sizes = effect.sizes))#
        }else {#
            effect.sizes <- round.f(effect.sizes, digits = dp)#
            SS.table <- cbind(SS.table, effect.sizes)#
            colnames(SS.table)[length(colnames(SS.table))] = eval(parse(text = "ANOVA.effect.size"))#
            return(list(ANOVA = SS.table, error = error))#
        }#
    }#
    MANOVA.eff.sizes <- MANOVA.effect.sizes.summary(SSPH = SSPH, #
        SSPE = SSPE, N = N, p = p, q = q, TEST = TEST)#
    rownames(MANOVA.eff.sizes) <- terms#
    if (!TEST == "all") {#
        output <- list(round.f(summary[[1]], digits = dp), round.f(MANOVA.eff.sizes, #
            digits = dp))#
        names(output) <- c(eval(parse(text = "TEST")), "effect.sizes")#
    }else {#
        summary <- lapply(summary, round.f, digits = dp)#
        output <- list(tests = summary, effect.sizes = round.f(MANOVA.eff.sizes, #
            digits = dp))#
    }#
    SSPH <- lapply(SSPH, round.f, digits = dp)#
    SSPE <- round.f(SSPE, digits = dp)#
    output <- c(output, list(SSPH = SSPH, SSPE = SSPE))#
    if (ANOVA) {#
        summary2 <- ANOVA.summary(SSPH = SSPH, SSPE = SSPE, N = N, #
            df = df, dfe = dfe, k = k, terms = terms, n.terms = n.terms, #
            N.var = N.var, ANOVA.effect.size = ANOVA.effect.size, #
            show.power = show.power, alpha = alpha)#
        summary2 <- if (ANOVA.effect.size != "all") lapply(summary2, round.f, digits = dp) else list(`sum of squares` = round.f(summary2$`sum of squares`, dp), F = round.f(summary2$F, dp), `Pr(>F)` = round.f(summary2$`Pr(>F)`, dp), effect.sizes = lapply(summary2$effect.sizes, round.f, dp))#
	    output <- list(multivariate = output, univariate = summary2)#
    }#
#
    return(output)#
}
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
out.e
dp
dp=2
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha)
out.e
out.e <- eMANOVA.f(formula=formula, longdata=longdata2, n=n, p=p, ar=ar, TYPE=TYPE, TEST="Wilks", ANOVA=ANOVA, #
	ANOVA.effect.size="all", show.power=TRUE, alpha=alpha, dp=2)
out.e
##################################
# requires R#
# download from https://cran.r-project.org/#
# As stated:#
# Note: the use of X11 (including tcltk) requires XQuartz (version 2.8.5 or later). #
# Always re-install XQuartz when upgrading your macOS to a new major version. #
#
# this code should pull data from csv files and analyse it/produce boxplots etc and recreate relevant parts of the figures#
# returns svg files that are then used to produce figures in Adobe Illustrator#
# Vernon Clarke : vernon.clarke@northwestern.edu#
#
#### MAIN CODE#
rm( list=ls(all=TRUE ) )#
load_required_packages <- function(packages){#
  new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]#
  if (length(new.packages)) install.packages(new.packages)#
  invisible(lapply(packages, library, character.only=TRUE))#
}#
#
required.packages <- c('MuMIn', 'svglite', 'lme4')#
load_required_packages(required.packages)#
#
plotsave = TRUE # if positive then dumps svgs into working folder#
#
mypath <- '/documents/Work/Final Figures/R analysis for boxplots and stats/figs and csv files' # alter this line to find csv files#
wd <- paste0(getwd(), mypath)#
setwd(wd)
wd
####################################################### code to create figures ####################################################### #
#    customised function to create boxplots#
#    In R's quantile() function, there are 9 types of quantile algorithms, named type 1 to type 9. #
#    These methods are defined to give different treatments for the lower and upper tails #
#    and whether they should be exclusive or inclusive. #
#    Type 1: Inverse of empirical distribution function.#
#    Type 2: Similar to type 1 but with averaging at discontinuities.#
#    Type 3: SAS definition: nearest even order statistic.#
#    Type 4: Linear interpolation of the empirical cdf.#
#    Type 5: Piecewise linear function where the knots are the values of order statistics.#
#    Type 6: Linear interpolation of the expectations based on the order statistics (default).#
#    Type 7: Linear interpolation of the modes based on the order statistics.#
#    Type 8: Linear interpolation between the points that capture the α percent and 1-α percent of the data.#
#    Type 9: Linear interpolation of the approximate medians for order statistics.   #
#    quantile.inc in excel is 7 #
#    NOTE not using R function boxplot to make whisker and box because this is NOT the method used by most graphics software#
#    the r function boxplot calls stats::fivenum to calculate the medium iqr and min and max; based on Tukey's five-number summary definition#
#    John Tukey's "hinges," which are used in his five-number summary and for drawing boxplots, are similar to quartiles but can be calculated in a way that's slightly different from any#
#    of the standard quantile methods in R. Tukey's original definition involved using the median to split the data set and then finding the median of the lower and upper halves. If the#
#    data set or data half contains an odd number of points, the median is included in both halves.#
#    How Tukey's hinges are usually computed:#
#    1. The lower hinge is the median of the lower half of the data set (not including the overall median if the number of data points is odd).#
#    2. The upper hinge is the median of the upper half of the data set (again not including the overall median if the number of data points is odd).#
#    This method is somewhat akin to R's Type 1 method for calculating quantiles, also known as the "inverted empirical distribution function." #
#    The `quantile` function in R with the option `type=1` #
#    in R's default boxplot(), the applied method is close to, but not exactly the same as, Tukey's original method for hinges. #
#    GraphPad Prism generally calculates quartiles using the method that is commonly taught, which corresponds to "Type 7" in R's quantile() function#
#    R default and also here is type=6; should produce similar results to GraphPad#
#
custom_boxplot <- function(data, wid=1, cap=0.5, xlab = 'membrane potential (mV)', #
                           ylab = 'PSP amplitude (mV)', xrange=c(-70,-50), yrange=c(-10,15), #
                           lwd=0.8, type=6) {#
    x <- data$x#
    y <- data$y#
    unique_x <- unique(data$x)#
    xrange <- xrange + c(-wid, wid)#
    plot(1, type="n", ylim=yrange, xlim=xrange, xlab=xlab, ylab=ylab, xaxt="n", yaxt="n", bty='n', lwd=lwd)#
#
    for (i in 1:length(unique_x)) {#
        current_x <- unique_x[i]#
        d <- data$y[data$x == current_x]#
        q1 <- quantile(d, probs=0.25, type=type)#
        q3 <- quantile(d, probs=0.75, type=type)#
        iqr <- q3 - q1  # Calculate IQR#
        lower_bound <- q1 - 1.5 * iqr  # Lower bound for outliers#
        upper_bound <- q3 + 1.5 * iqr  # Upper bound for outliers#
        # Exclude outliers#
        d_filtered <- d[d >= lower_bound & d <= upper_bound]#
#
        median_val <- median(d_filtered)#
        min_val <- min(d_filtered)#
        max_val <- max(d_filtered)#
        rect(current_x - wid, q1, current_x + wid, q3, col="white", lwd=lwd)#
        segments(current_x, q1, current_x, min_val, lwd=lwd)#
        segments(current_x, q3, current_x, max_val, lwd=lwd)#
        segments(current_x - cap, min_val, current_x + cap, min_val, lwd=lwd)#
        segments(current_x - cap, max_val, current_x + cap, max_val, lwd=lwd)#
        segments(current_x - wid*1.1, median_val, current_x + wid*1.1, median_val, col="black", lwd=3*lwd)#
    }#
    axis(1, at=unique_x, labels=unique_x)#
    axis(2)#
}#
#
#     notes on random mixed effects model#
#     y ~ x + (1|s):#
#     formula specifies how the dependent variable y is modeled in relation to the predictor variable x and the random effect of the subject s #
#     y: This is the dependent variable you are trying to model or predict.#
#     ~: The tilde separates the dependent variable from the independent variables and random effects.#
#     x: This is the independent (or fixed-effect) variable. The model will estimate how y varies with x.#
#     +: The plus sign indicates that you are including more terms in the model.#
#     (1|s): This is a random intercept for subject s. In other words, each subject is allowed to have its own baseline value of y that is randomly distributed around the overall mean of y.#
# if random effects model is singular#
isSingular.fun <- function(formula, data){#
	mod <- suppressMessages(lmer(formula=formula, data=data))#
	isSingular(mod)#
	} #
fun.plot = function(data, wid=1, cap=0.5, xlab = 'membrane potential (mV)', ylab = 'PSP amplitude (mV)', xrange=c(-70,-50), yrange=c(-10,15), lwd=0.8, amount=0.5, p.cex=0.25, type=6){#
	# Fit the model using lme4#
	# model_lmer <- lmer(y ~ x + (1|s))#
	x <- data$x#
	y <- data$y#
	s <- data$s#
	formula  <- y ~ x + (1|s)#
	mixed <- !isSingular.fun(formula, data)#
	mod <-  if (mixed) lmer(y ~ x + (1|s)) else lm(y ~ x)#
	formula <- if (!mixed) y ~ x else formula#
	cat("model is ", format(formula), "\n")#
	print(summary(mod))#
#
	if (mixed){#
		fixed_effects <- fixef(mod)#
		m <- fixed_effects[[2]]#
		c <- fixed_effects[[1]]#
	}else{#
		coeffs <- coef(mod)#
		m <- coeffs[[2]]#
		c <- coeffs[[1]]#
	}#
	# x intercept#
	cat("x intercept is ", format(-c/m), "mV", "\n")#
	# In the context of linear mixed models, Rsqr can be a bit more complex to define and interpret than in standard linear regression. #
	# There are actually two commonly reported Rsqr values for linear mixed models:#
#
	#     Marginal R2: Represents the variance explained by the fixed effects alone.	#
	#     Conditional R2: Represents the variance explained by both the fixed and random effects.#
	# use MuMIn to evaluate r2 if necessary#
	r2_values <- r.squaredGLMM(mod)#
	# print(r2_values)#
    cat("rsqr (marginal) ", format(r2_values[1]), " rsqr (conditional) ", format(r2_values[2]))#
	# cat("rsqr (conditional) ", format(r2_values[2]))#
	# 	 The boxplot function creates a box-and-whisker plot, which is a standardized way of displaying the distribution of data based on a five-number summary:#
	#    Minimum: The smallest data point, including any outliers.#
	#    First quartile (Q1): The data point below which 25% of the data fall.#
	#    Median (Q2 or second quartile): The data point that divides the data into two halves. 50% of the data fall below the median, and 50% of the data fall above it.#
	#    Third quartile (Q3): The data point below which 75% of the data fall.#
	#    Maximum: The largest data point, including any outliers.#
#
	# Add a column to data for jittered x-values#
	set.seed(42)#
	data$x_jitter <- jitter(data$x, amount=amount)#
	# Boxplots for each x value with outliers shown#
	custom_boxplot(data, wid=wid, cap=cap, xlab=xlab, ylab=ylab, xrange=xrange, yrange=yrange, lwd=lwd, type=type)#
	# Plot individual data points with reduced jitter, reduced size, and unfilled circles without x and y axes#
	points(data$x_jitter, data$y, pch=19, bg="transparent", col="darkgray", lwd=lwd/2, cex=p.cex)#
	# Connect data points within subjects with gray dotted lines#
	line=TRUE#
	if (line){#
		subjects <- unique(data$s)#
		for(subj in subjects){#
  			subset_data <- data[data$s == subj, ]#
  			lines(subset_data$x_jitter, subset_data$y, col="darkgray", lwd=lwd, lty=3)  # lty=2 for dotted line#
		}#
	}#
	# Predict y values using the model for new data with matching grouping factor levels#
	y_pred <- m * unique(x) + c#
	# Add the line of best fit#
	lines(unique(x), y_pred, col="black", lwd=lwd, lty=1)#
	# list(reversal=-c/m, r2_values =r2_values)	#
}#
#
# simple import function if NA is zero imports all exlcude excludes those subjects s#
import.fun <- function(name, exclude=NA){#
  df <- read.csv(paste0(name, '.csv'))#
  # Exclude rows based on 's' values#
  if (!is.na(exclude[1])) {  # Check if the first element of 'exclude' is not NA#
    df <- df[!(df$s %in% exclude), ]#
  }#
  # Assuming the first two columns are always 's' and 'x'#
  fixed_colnames <- c('s', 'x')#
  # Check the number of remaining columns after 's' and 'x'#
  num_y_cols <- ncol(df) - length(fixed_colnames)#
  if (num_y_cols == 1) {#
    y_colnames <- 'y'#
  } else {#
    y_colnames <- paste0('y', 1:num_y_cols)#
  }#
  colnames(df) <- c(fixed_colnames, y_colnames)#
  return(df)#
}#
# import data sets from stored csv#
# data for fig 2#
#
data2F <- import.fun('data2F')#
data1 <- data2F[, c("s", "x", "y1")]; colnames(data1)[3] <- "y"#
data2 <- data2F[, c("s", "x", "y2")]; colnames(data2)[3] <- "y"#
data3 <- data2F[, c("s", "x", "y3")]; colnames(data3)[3] <- "y"#
#
data2C <- import.fun('data2C')#
data4 <- data2C[, c("s", "x", "y1")]; colnames(data4)[3] <- "y"#
data5 <- data2C[, c("s", "x", "y2")]; colnames(data5)[3] <- "y"#
#
data6 <- import.fun('data2G')#
data7 <- import.fun('data2J')#
#
# Fig3C#
data8 <- import.fun('data3CA')#
data9 <- import.fun('data3CB')#
#
# Fig3G#
data3F <- import.fun('data3F')#
data10 <- data3F[, c("s", "x", "y1")]; colnames(data10)[3] <- "y"#
data11 <- data3F[, c("s", "x", "y2")]; colnames(data11)[3] <- "y"#
#
# data for fig4 #
data4E <- import.fun('data12')#
data12 <- data4E[, c("s", "x", "y1")]; colnames(data12)[3] <- "y"#
data13 <- data4E[, c("s", "x", "y2")]; colnames(data13)[3] <- "y"#
#
# data for figS1 #
dataS1 <- read.csv('data14.csv')#
colnames(dataS1) = c('A+B', 'C')#
#
# plot figures#
#
# FIG2C#
dev.new(width=6 ,height=4,noRStudioGD=TRUE)#
par(mar=c(1, 1, 1, 1), mfrow=c(1,2), oma = c(2, 2, 2, 0), ps=10, cex = 0.9, cex.main = 0.9)#
fun.plot(data4, ylab='PSC amplitude (pA)', yrange=c(-20,25), p.cex=0.6)#
fun.plot(data5, yrange=c(-20,25), p.cex=0.6)#
#
# FIG2C statistics; reporting x intecept (mV), gradient (x in fixed effects table/coefficients if lm) + rsqr (marginal)#
#
# model is  y ~ x + (1 | s) #
# Linear mixed model fit by REML ['lmerMod']#
# Formula: y ~ x + (1 | s)#
# #
# REML criterion at convergence: 133.7#
# #
# Scaled residuals: #
#      Min       1Q   Median       3Q      Max #
# -1.60033 -0.65121  0.03389  0.45512  2.00762 #
# #
# Random effects:#
#  Groups   Name        Variance Std.Dev.#
#  s        (Intercept)  4.723   2.173   #
#  Residual             10.125   3.182   #
# Number of obs: 25, groups:  s, 5#
# #
# Fixed effects:#
#             Estimate Std. Error t value#
# (Intercept)   53.880      5.524   9.754#
# x              0.964      0.090  10.711#
# #
# Correlation of Fixed Effects:#
#   (Intr)#
# x 0.978 #
# x intercept is  -55.89212 mV #
# rsqr (marginal)  0.7652421  rsqr (conditional)  0.8399144#
# model is  y ~ x #
# #
# Call:#
# lm(formula = y ~ x)#
# #
# Residuals:#
#    Min     1Q Median     3Q    Max #
#  -2.27  -1.74  -0.27   1.29   5.20 #
# #
# Coefficients:#
#             Estimate Std. Error t value Pr(>|t|)    #
# (Intercept) 42.10000    3.58113   11.76 3.33e-11 ***#
# x            0.70600    0.05928   11.91 2.57e-11 ***#
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
# #
# Residual standard error: 2.096 on 23 degrees of freedom#
# Multiple R-squared:  0.8605,	Adjusted R-squared:  0.8544 #
# F-statistic: 141.9 on 1 and 23 DF,  p-value: 2.566e-11#
# #
# x intercept is  -59.63173 mV #
# rsqr (marginal)  0.8553001  rsqr (conditional)  0.8553001#
# FIG2F#
dev.new(width=9 ,height=4,noRStudioGD=TRUE)#
par(mar=c(1, 1, 1, 1), mfrow=c(1,3), oma = c(2, 2, 2, 0), ps=10, cex = 0.9, cex.main = 0.9)#
fun.plot(data1, p.cex=0.6)#
fun.plot(data2, p.cex=0.6)#
fun.plot(data3, p.cex=0.6)#
# FIG2C statistics; reporting x intecept (mV), gradient (x in fixed effects table/coefficients if lm) + rsqr (marginal)#
#
# data1#
# model is  y ~ x + (1 | s) #
# Linear mixed model fit by REML ['lmerMod']#
# Formula: y ~ x + (1 | s)#
# #
# REML criterion at convergence: 95.1#
# #
# Scaled residuals: #
#     Min      1Q  Median      3Q     Max #
# -1.3959 -0.7732 -0.1343  0.8783  1.9779 #
# #
# Random effects:#
#  Groups   Name        Variance Std.Dev.#
#  s        (Intercept) 0.1413   0.3758  #
#  Residual             2.2187   1.4895  #
# Number of obs: 25, groups:  s, 5#
# #
# Fixed effects:#
#             Estimate Std. Error t value#
# (Intercept) 46.44000    2.55085   18.21#
# x            0.75400    0.04213   17.90#
# #
# Correlation of Fixed Effects:#
#   (Intr)#
# x 0.991 #
# x intercept is  -61.59151 mV #
# rsqr (marginal)  0.9261828  rsqr (conditional)  0.9306014#
#
# data2#
# model is  y ~ x #
# #
# Call:#
# lm(formula = y ~ x)#
# #
# Residuals:#
#    Min     1Q Median     3Q    Max #
#  -3.58  -0.60  -0.08   0.96   2.96 #
# #
# Coefficients:#
#             Estimate Std. Error t value Pr(>|t|)    #
# (Intercept) 43.32000    2.73269   15.85 7.15e-14 ***#
# x            0.70400    0.04523   15.56 1.05e-13 ***#
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
# #
# Residual standard error: 1.599 on 23 degrees of freedom#
# Multiple R-squared:  0.9133,	Adjusted R-squared:  0.9095 #
# F-statistic: 242.2 on 1 and 23 DF,  p-value: 1.053e-13#
# #
# x intercept is  -61.53409 mV #
# rsqr (marginal)  0.9098581  rsqr (conditional)  0.9098581#
#
# data3#
# model is  y ~ x #
# #
# Call:#
# lm(formula = y ~ x)#
# #
# Residuals:#
#    Min     1Q Median     3Q    Max #
#  -3.14  -0.90  -0.14   0.88   2.84 #
# #
# Coefficients:#
#             Estimate Std. Error t value Pr(>|t|)    #
# (Intercept) 46.26000    2.38701   19.38 9.60e-16 ***#
# x            0.75200    0.03951   19.03 1.42e-15 ***#
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
# #
# Residual standard error: 1.397 on 23 degrees of freedom#
# Multiple R-squared:  0.9403,	Adjusted R-squared:  0.9377 #
# F-statistic: 362.3 on 1 and 23 DF,  p-value: 1.42e-15#
# #
# x intercept is  -61.51596 mV #
# rsqr (marginal)  0.9378657  rsqr (conditional)  0.937865#
# FIG2GJ#
dev.new(width=6 ,height=4,noRStudioGD=TRUE)#
par(mar=c(1, 1, 1, 1), mfrow=c(1,2), oma = c(2, 2, 2, 0), ps=10, cex = 0.9, cex.main = 0.9)#
fun.plot(data6, wid=0.25, cap=0.125, xrange=c(0.5, 2.5), yrange=c(-70, -55), amount=0.05, p.cex=0.6)#
fun.plot(data7, wid=0.25, cap=0.125, xrange=c(0.5, 2.5), yrange=c(-70, -55), amount=0.05, p.cex=0.6)#
# FIG2GJ statistics; originally 2 sided Wilcoxon#
# Perform the Wilcoxon Signed-Rank Test#
fun.wilcox2 <- function(data, paired=TRUE, alternative='two.sided', exact=NULL){#
	x <- data[data$x == 1,][order(data[data$x == 1,]$s),]$y#
	y <- data[data$x == 2,][order(data[data$x == 2,]$s),]$y#
	wilcox.test(x, y, paired = paired, alternative=alternative, exact=exact)#
	}#
# Fig 2G:#
# test switches to exact=FALSE is there are ties#
# you can show this with Fig J (set exact = FALSE and get different)#
# you can show this with Fig 2G (set exact = FALSE and do not get error AND same result (as default will automatically switch from exact=TRUE to FALSE)#
#
fun.wilcox2(data6)#
# 	Wilcoxon signed rank test with continuity correction#
# #
# data:  x and y#
# V = 11, p-value = 0.4076#
# alternative hypothesis: true location shift is not equal to 0#
# #
# Warning message:#
# In wilcox.test.default(x, y, paired = paired, alternative = alternative,  :#
#   cannot compute exact p-value with ties#
# Fig 2J:#
fun.wilcox2(data7) # 2-sided#
# 	Wilcoxon signed rank test with continuity correction#
# #
# data:  x and y#
# V = 21, p-value = 0.03552#
# alternative hypothesis: true location shift is not equal to 0#
# #
# Warning message:#
# In wilcox.test.default(x, y, paired = paired, alternative = alternative,  :#
#   cannot compute exact p-value with ties#
# FIG3C#
dev.new(width=6 ,height=4,noRStudioGD=TRUE)#
par(mar=c(1, 1, 1, 1), mfrow=c(1,2), oma = c(2, 2, 2, 0), ps=10, cex = 0.9, cex.main = 0.9)#
fun.plot(data8, wid=0.25, cap=0.125, xrange=c(0.5, 2.5), yrange=c(0, 5), amount=0.05, p.cex=0.6)#
fun.plot(data9, wid=0.25, cap=0.125, xrange=c(0.5, 2.5), yrange=c(0, 5), amount=0.05, p.cex=0.6)#
#
# stats#
fun.wilcox2(data8)#
# 	Wilcoxon signed rank exact test#
# #
# data:  x and y#
# V = 36, p-value = 0.007813#
# alternative hypothesis: true location shift is not equal to 0#
#
fun.wilcox2(data9)#
# 	Wilcoxon signed rank exact test#
# #
# data:  x and y#
# V = 21, p-value = 0.03125#
# alternative hypothesis: true location shift is not equal to 0#
#
# FIG3F#
dev.new(width=6 ,height=4,noRStudioGD=TRUE)#
par(mar=c(1, 1, 1, 1), mfrow=c(1,2), oma = c(2, 2, 2, 0), ps=10, cex = 0.9, cex.main = 0.9)#
fun.plot(data10, wid=0.25, cap=0.125, xrange=c(0.5, 2.5), yrange=c(0, 5), amount=0.05, p.cex=0.6)#
fun.plot(data11, wid=0.25, cap=0.125, xrange=c(0.5, 2.5), yrange=c(0, 5), amount=0.05, p.cex=0.6)#
# stats#
fun.wilcox2(data10, paired = FALSE)#
# 	Wilcoxon rank sum exact test#
# #
# data:  x and y#
# W = 16, p-value = 0.02857#
# alternative hypothesis: true location shift is not equal to 0#
#
# nb result is in fact identical (pairs go in identical directions; performing Mann U as not enough values for paired (n = 5 pairs is required)#
fun.wilcox2(data11, paired = FALSE)#
# 	Wilcoxon rank sum exact test#
# #
# data:  x and y#
# W = 16, p-value = 0.02857#
# alternative hypothesis: true location shift is not equal to 0#
# COMBINED#
# FIG4EF#
#
# Perform the Wilcoxon Signed-Rank Test#
fun.wilcox <- function(data, paired=TRUE, alternative='two.sided', exact=NULL){#
	x <- data[data$x == 2,][order(data[data$x == 2,]$s),]$y#
	y <- data[data$x == 3,][order(data[data$x == 3,]$s),]$y#
	wilcox.test(x, y, paired = paired, alternative=alternative, exact=exact)#
	}#
#
dev.new(width=9 ,height=4,noRStudioGD=TRUE)#
par(mar=c(1, 1, 1, 1), mfrow=c(1,2), oma = c(2, 2, 2, 0), ps=10, cex = 0.9, cex.main = 0.9)#
fun.plot(data12, yrange=c(0,35), xrange=c(0.5,3.5), xlab='', ylab='', wid=0.2, cap=0.1, amount=0, p.cex=0.6)#
fun.plot(subset(data13, x != 1), yrange=c(0,0.25), xrange=c(0.5,3.5), xlab='', ylab='', wid=0.2, cap=0.1, amount=0, p.cex=0.6)#
# stats for Fig4E (dataset combined)#
# combined#
fun.wilcox(data12)#
# 	Wilcoxon signed rank exact test#
# #
# data:  x and y#
# V = 0, p-value = 0.0009766#
# alternative hypothesis: true location shift is not equal to 0#
# data13 combined durs#
fun.wilcox(data13)#
# 	Wilcoxon signed rank test with continuity correction#
# #
# data:  x and y#
# V = 0, p-value = 0.003822#
# alternative hypothesis: true location shift is not equal to 0#
# #
# Warning message:#
# In wilcox.test.default(x, y, paired = paired, alternative = alternative,  :#
#   cannot compute exact p-value with ties#
# FigS1#
dev.new(width=4.5 ,height=4,noRStudioGD=TRUE)#
par(mar=c(1, 1, 1, 1), mfrow=c(1,1), oma = c(2, 2, 2, 0), ps=10, cex = 0.9, cex.main = 0.9)#
#
fun.plot.S1 = function(){#
	plot(dataS1$'A+B', dataS1$'C', xlab = 'linear prediction (mV)', ylab = 'actual combination', bty='n', pch=20, col='black', xlim=c(0,40), ylim=c(0,40))#
#
	# Define the points for the y=x line#
	xline = yline = seq(0, 40, 0.1)#
#
	# Add shading below the line using polygon#
	polygon(c(0, xline, 40), c(0, yline, 0), col='lightgray', border=NA)#
#
	# Overlay the y=x line on top of the shaded region#
	lines(xline, yline, col='black', lwd=1)#
#
	# Replot your data points on top to ensure they're not covered by the polygon#
	points(dataS1$'A+B', dataS1$'C', pch=20, col='black')#
}#
#
fun.plot.S1()#
output.fun <- function(data, type=6, MAD = FALSE){#
	unique_x <- unique(data$x)#
	out <- sapply(1:length(unique_x), function(ii){#
		current_x <- unique_x[ii]#
        d <- data$y[data$x == current_x]#
        q1 <- quantile(d, probs=0.25, type=type)#
        q3 <- quantile(d, probs=0.75, type=type)#
        iqr <- q3 - q1  # Calculate IQR#
        lower_bound <- q1 - 1.5 * iqr  # Lower bound for outliers#
        upper_bound <- q3 + 1.5 * iqr  # Upper bound for outliers#
        # Exclude outliers#
        d_filtered <- if (MAD) d else d[d >= lower_bound & d <= upper_bound] # do NOT remove outliers for MAD#
#
        median_val <- median(d_filtered)#
        min_val <- min(d_filtered)#
        max_val <- max(d_filtered)#
        if (MAD){#
        	mad_value <- mad(d_filtered, constant = 1)#
        	c(min_val[[1]], median_val-mad_value, median_val, median_val+mad_value, max_val[[1]])	#
        }else{#
        	c(min_val[[1]], q1[[1]], median_val, q3[[1]], max_val[[1]])	#
        }#
    })#
    if (MAD){#
    	rownames(out) <- c('min','lm','median','um','max')#
    }else{#
    	rownames(out) <- c('min','q1','median','q3','max')#
    }#
    colnames(out) = unique_x#
    return(out)#
}#
#
box12 <- output.fun(data12, MAD=TRUE)#
box13 <- output.fun(data13, MAD=TRUE)#
plot_error_bars <- function(X, Y, color, lwd, xrange, yrange) {#
  x_q1 <- X[1]#
  x_median <- X[2]#
  x_q3 <- X[3]#
  y_q1 <- Y[1]#
  y_median <- Y[2]#
  y_q3 <- Y[3]#
  wid.x <- diff(xrange) / 50#
  wid.y <- diff(yrange) / 50#
  # Plot median points#
  points(x_median, y_median, pch=19, col=color)#
  # Error bars for x#
  segments(x_q1, y_median, x_q3, y_median, col=color, lwd=lwd)#
  segments(x_q1, y_median - 0.5*wid.y, x_q1, y_median + 0.5*wid.y, col=color, lwd=lwd)#
  segments(x_q3, y_median - 0.5*wid.y, x_q3, y_median + 0.5*wid.y, col=color, lwd=lwd)#
  # Error bars for y#
  segments(x_median, y_q1, x_median, y_q3, col=color, lwd=lwd)#
  segments(x_median - 0.5*wid.x, y_q1, x_median + 0.5*wid.x, y_q1, col=color, lwd=lwd)#
  segments(x_median - 0.5*wid.x, y_q3, x_median + 0.5*wid.x, y_q3, col=color, lwd=lwd)#
}#
#
# Initial settings#
lwd = 0.8#
xrange = c(0,0.25)#
yrange = c(0,35)#
#
# Initial plot setup#
#
fun.plot2 = function(){#
	plot(NULL, xlim=xrange, ylim=yrange, xlab="x", ylab="y", type="n", bty='n')#
#
	# Box13 Data#
	X <- box13[2:4,2]#
	Y <- box12[2:4,2]#
	plot_error_bars(X, Y, color='indianred', lwd=lwd, xrange=xrange, yrange=yrange)#
#
	# Box12 Data#
	X <- box13[2:4,3]#
	Y <- box12[2:4,3]#
	plot_error_bars(X, Y, color='black', lwd=lwd, xrange=xrange, yrange=yrange)#
	points(data13$y[data13$x == 2], data12$y[data12$x == 2],pch=20, col='indianred')#
	points(data13$y[data13$x == 3], data12$y[data12$x == 3], pch=20, col='black')#
}#
dev.new(width=4.5 ,height=4,noRStudioGD=TRUE)#
par(mar=c(1, 1, 1, 1), mfrow=c(1,1), oma = c(2, 2, 2, 0), ps=10, cex = 0.9, cex.main = 0.9)#
fun.plot2()#
#
if (plotsave) {	#
	svglite(paste0('Fig2F1 ', gsub(':', '-', Sys.time()), '.svg'), width=2,height=3.75, pointsize=10)#
	fun.plot(data1)#
	dev.off()#
#
	svglite(paste0('Fig2F2 ', gsub(':', '-', Sys.time()), '.svg'), width=2,height=3.75, pointsize=10)#
	fun.plot(data2)#
	dev.off()#
#
	svglite(paste0('Fig2F3 ', gsub(':', '-', Sys.time()), '.svg'), width=2,height=3.75, pointsize=10)#
	fun.plot(data3)#
	dev.off()#
#
	svglite(paste0('Fig2C_1 ', gsub(':', '-', Sys.time()), '.svg'), width=2.5,height=2.75, pointsize=10)#
	fun.plot(data4, ylab='PSC amplitude (pA)', yrange=c(-20,25))#
	dev.off()#
	svglite(paste0('Fig2C_2 ', gsub(':', '-', Sys.time()), '.svg'), width=2.5,height=2.75, pointsize=10)#
	fun.plot(data5, ylab='PSC amplitude (pA)', yrange=c(-20,25))#
	dev.off()#
	svglite(paste0('Fig2G ', gsub(':', '-', Sys.time()), '.svg'), width=2.5,height=2.75, pointsize=10)#
	fun.plot(data6, wid=0.25, cap=0.125, xrange=c(0.5, 2.5), yrange=c(-70, -55), amount=0.05)#
	dev.off()#
#
	svglite(paste0('Fig2J ', gsub(':', '-', Sys.time()), '.svg'), width=2.5,height=2.75, pointsize=10)#
	fun.plot(data7, wid=0.25, cap=0.125, xrange=c(0.5, 2.5), yrange=c(-70, -55), amount=0.05)#
	dev.off()#
#
	svglite(paste0('Fig3C1 ', gsub(':', '-', Sys.time()), '.svg'), width=2.2,height=3.70, pointsize=10)#
	fun.plot(data8, wid=0.25, cap=0.125, xrange=c(0.5, 2.5), yrange=c(0, 5), amount=0.05, p.cex=0.6)#
	dev.off()#
#
	svglite(paste0('Fig3C2 ', gsub(':', '-', Sys.time()), '.svg'), width=2.2,height=3.70, pointsize=10)#
	fun.plot(data9, wid=0.25, cap=0.125, xrange=c(0.5, 2.5), yrange=c(0, 5), amount=0.05, p.cex=0.6)#
	dev.off()#
#
	svglite(paste0('Fig3F1 ', gsub(':', '-', Sys.time()), '.svg'), width=2.2,height=3.70, pointsize=10)#
	fun.plot(data10, wid=0.25, cap=0.125, xrange=c(0.5, 2.5), yrange=c(0, 5), amount=0.05, p.cex=0.6)#
	dev.off()#
#
	svglite(paste0('Fig3F2 ', gsub(':', '-', Sys.time()), '.svg'), width=2.2,height=3.70, pointsize=10)#
	fun.plot(data11, wid=0.25, cap=0.125, xrange=c(0.5, 2.5), yrange=c(0, 5), amount=0.05, p.cex=0.6)#
	dev.off()#
#
	svglite(paste0('Fig4E1 ', gsub(':', '-', Sys.time()), '.svg'), width=2.2,height=3.70, pointsize=10)#
	fun.plot(data12, yrange=c(0,35), xrange=c(0.5,3.5), xlab='', ylab='', wid=0.3, cap=0.15, amount=0, p.cex=0.6)#
	dev.off()#
	svglite(paste0('Fig4E2 ', gsub(':', '-', Sys.time()), '.svg'), width=2.2,height=3.70, pointsize=10)#
	fun.plot(subset(data13, x != 1), yrange=c(0,0.25), xrange=c(0.5,3.5), xlab='', ylab='', wid=0.3, cap=0.15, amount=0, p.cex=0.6)#
	dev.off()#
	svglite(paste0('Fig4E3 ', gsub(':', '-', Sys.time()), '.svg'), width=2.2,height=3.50, pointsize=10)#
	fun.plot2()#
	dev.off()#
	svglite(paste0('FigS1 ', gsub(':', '-', Sys.time()), '.svg'), width=3.25,height=3.70, pointsize=10)#
	fun.plot.S1()#
	dev.off()#
}
